{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/coin.css","path":"css/coin.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/custom.css","path":"css/custom.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/coin.js","path":"js/coin.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"source/img/Wendy.png","path":"img/Wendy.png","modified":1,"renderable":0},{"_id":"source/img/alipay.jpg","path":"img/alipay.jpg","modified":1,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":0},{"_id":"source/img/wechat.jpg","path":"img/wechat.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/relax/photos/marvel/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667703416335},{"_id":"source/relax/photos/wallpaper/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667703497029},{"_id":"source/_data/clustrmaps.yml","hash":"05f8a924f7926bfbb4da1d4d203200dcefcd2b4b","modified":1667699973409},{"_id":"source/_data/link.yml","hash":"b4ed65bc48361e8f1e4b1c97b72187ba1c45feb1","modified":1667566631255},{"_id":"source/about/index.md","hash":"51e9001b8c921af77b7299b8b698c034422e8cd5","modified":1667658295150},{"_id":"source/css/custom.css","hash":"12bd57981abade3dbf643966114fd308fc952c1a","modified":1667667558759},{"_id":"source/css/footerTimer.css","hash":"7482b6504234a31b851fcf639ff0c7e5b2e572d0","modified":1667619150146},{"_id":"source/articals/archives/index.md","hash":"3839c21a3a9f01653542f3e418bd698df2a4db68","modified":1667742685674},{"_id":"source/articals/categories/index.md","hash":"82a7bf32cf3173788b1fc8f89d8b99797a76d60d","modified":1667702648664},{"_id":"source/articals/tags/index.md","hash":"28087223b136a26507faa064163a75d59dffb12d","modified":1667566114587},{"_id":"source/assets/scripts/footerTimer.js","hash":"cbaca56bb1cfef5c05a791ef135125491fa38dfb","modified":1667665677958},{"_id":"source/assets/scripts/progress-bar.js","hash":"99a26b15d2aa0422579f52a26a4a08dd96d6817c","modified":1667630055449},{"_id":"source/relax/games/index.md","hash":"d5d53718ac4ea12b90546f056038cd9d7ac83404","modified":1667731014480},{"_id":"source/relax/movies/index.md","hash":"79025369671a36368ce2e270fe19654c777e3794","modified":1667730526931},{"_id":"source/relax/music/index.md","hash":"83ad071523fec080a491aeeadc49c68a73371c66","modified":1667725197254},{"_id":"source/relax/photos/index.md","hash":"c089dec633367511e9ba20f5c70868dfb6f2193e","modified":1667726408714},{"_id":"source/social/comments/index.md","hash":"2c5e7ee81cdc90688813b0ba668a3c44027c1abf","modified":1667701967032},{"_id":"source/social/link/index.md","hash":"e28b570ff276d6ccc87e1893e6b3422b6fd0b554","modified":1667701755754},{"_id":"source/zone/love-story/index.md","hash":"9461b0bbc7266aa20cb574bce715f8fabfaca75b","modified":1667646721857},{"_id":"source/zone/work-life/index.md","hash":"bcf3635a9072f65537e8fc60c4f2e528473ca608","modified":1667646759528},{"_id":"source/_posts/TypeScript 系列/基础篇/TypeScript系列  基础篇(三) 对象类型.md","hash":"372c2147fa9ead82bc6284fdc048430d2ba613c2","modified":1667742265781},{"_id":"source/_posts/TypeScript 系列/基础篇/TypeScript系列  基础篇(五)  Classes 类.md","hash":"2ff899cd3876e18158c406ed0992184c3a1eb2e6","modified":1667742293897},{"_id":"source/_posts/TypeScript 系列/基础篇/TypeScript系列  基础篇(四)  类型操纵.md","hash":"2dc07118616f0c2f5e5ac91a3adc1fba6dfa1f76","modified":1667742280603},{"_id":"source/_posts/TypeScript 系列/基础篇/Typescript系列  基础篇 (一)  TS类型指南.md","hash":"cefcdd8d43b9ada6dbdf8d85bbfb506072ec444b","modified":1667742256281},{"_id":"source/_posts/TypeScript 系列/基础篇/Typescript系列  基础篇 (二) TS中的函数.md","hash":"532a46a593cd152fb62f81704c36e4868a0b19a5","modified":1667744601389},{"_id":"source/_posts/TypeScript 系列/基础篇/Typescript系列  基础篇 (六)   模块化入门篇.md","hash":"13308fec08f705dd66824984e55166c2e18b8773","modified":1667742243058},{"_id":"source/relax/photos/ohmygirl/index.md","hash":"5080954e7220af8e5d1ea49dd8edd0427def856b","modified":1667703814257},{"_id":"source/img/alipay.jpg","hash":"9c214a189859f2a4057cc2b953944c5651d50c76","modified":1667638368193},{"_id":"source/img/favicon.ico","hash":"95d2e1e1057e22c1df0ee8139434cb2088f8e4ba","modified":1667730260000},{"_id":"source/img/wechat.jpg","hash":"ccb2f36829e4c49f795ea963a91981289c268be9","modified":1667638360970},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1667565469054},{"_id":"themes/butterfly/README.md","hash":"c34579d9d7239828ce7d8abc235521eaf4ea9e17","modified":1667565469054},{"_id":"themes/butterfly/README_CN.md","hash":"25cfdbaf9883095322259c4f49bd08f0a7cffa0e","modified":1667565469054},{"_id":"themes/butterfly/_config.yml","hash":"81913d80786e8f89ddc9cae77c18905b02b361fd","modified":1667565469054},{"_id":"themes/butterfly/package.json","hash":"d2de76d6c4fbf9d6b329bba8ba808f7ccbd613fa","modified":1667565469054},{"_id":"themes/butterfly/plugins.yml","hash":"d46811a3c50f7057681ac496de4beda107aa26b6","modified":1667565469054},{"_id":"themes/butterfly/languages/default.yml","hash":"1e37a3695d50e3e61d7c36e58a6dac872a4a56cd","modified":1667565469054},{"_id":"themes/butterfly/languages/en.yml","hash":"d1bb560698eb8b0079495b7b18b44facb610f9fd","modified":1667565469054},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"28b6f0c39155651d747eb595e0a283bc97be2e09","modified":1667565469054},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"947f794e862bb2813e36887f777bdb760f70a322","modified":1667565469054},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1667565469054},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1667565469054},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1667565469054},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1667565469054},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1667565469054},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1667565469054},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1667565469054},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1667565469054},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1667565469054},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1667565469054},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"346b6b650b9dee4844f3be7865886002f82da24c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"3a3d11a1b109d120f5ce0c66a35a188020482cb5","modified":1667641573963},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"7dee9b73acdec2a34d41a45119ebe8bb8650bf6c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"13e0528b986775019bfd98743f4c0fee39464091","modified":1667639383342},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"699d0d2cff233628752956c4434125c8203f7d63","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8d39473ed112d113674a0f689f63fae06c72abd2","modified":1667565469054},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1667565469054},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"acfe765fb2c607bff7198630dbfa53a888c36357","modified":1667565469054},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"a3d1f417965ca20253c36f9e93429f3df6268856","modified":1667565469054},{"_id":"themes/butterfly/scripts/events/init.js","hash":"b4940a5c73d3a5cd8bb5883e3041ecdd905a74e0","modified":1667565469054},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1667565469054},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"3cfc46c749e2fd7ae9c2a17206238ed0e0e17e7d","modified":1667565469054},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1667565469054},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"21379ed2dccb69c43b893895c9d56238c11e5f43","modified":1667565469054},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1667565469054},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1667565469054},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"ee3e70098eb0849497d50b75e18cf4a27c397d52","modified":1667565469054},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b4cd617c619d1a0df93603721a6fa1317526174b","modified":1667565469054},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"763dab5c83f50c1c62fffc9a9dfedea29bb4e629","modified":1667565469054},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"d368a8830e506c8b5eb6512b709ec8db354d5ea1","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"f79c99f6c5b626c272dc2bed2b0250d6b91bb28a","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/iconfont.js","hash":"fce5f2c2da675ebd4f06134be05c194dd2db2242","modified":1667658175408},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1667565469054},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1667565469054},{"_id":"themes/butterfly/source/css/coin.css","hash":"89f8601fa55e15a3681226e03390e2c4e300ab1f","modified":1667637842272},{"_id":"themes/butterfly/source/css/custom.css","hash":"77c9e00d72c30b0a4c5f92a77cfa76b197b84d35","modified":1667658208328},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1667565469054},{"_id":"themes/butterfly/source/css/var.styl","hash":"e018dad9f674fc5564112b99032fe5fe8b2d195f","modified":1667565469054},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667565469054},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667565469054},{"_id":"themes/butterfly/source/js/coin.js","hash":"713edc7be809f229eccf023e81015df6ebe41580","modified":1667637614405},{"_id":"themes/butterfly/source/js/main.js","hash":"3a656e805249386b4e566d98952be28b418254b7","modified":1667698741946},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667565469054},{"_id":"themes/butterfly/source/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"fe4d847177b824e09c75e9c7b723184c708c569a","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"15530d9ac59c576d79af75dd687efe71e8d261b0","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"2df5a033104775ee9c8715925bb32c3ec5b75da0","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"65a23b5170204e55b813ce13a79d799b66b7382c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"aa175e2254704335f4da09175e59ef2375ca7d03","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"21ecb0b86e6daa46417877fac8b1312b3e556491","modified":1667656608939},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"d89205e015886cb3c41d50de999cd704a2bb2f5d","modified":1667667929394},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"fd170452968d6815f3117315f69eb9a6a7e77f7c","modified":1667659359983},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"c4b86758f3a3deae4612c31d725814c8753a7804","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"278855fe4399489bdef0393697bb87420e671fe9","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"773e28d7f8924b6bc9f64dec53afc245a1c254a5","modified":1667636982965},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e3d574921fca8e756923bf3b303835e57b9a26b2","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"6311eda08e4515281c51bd49f43902a51832383c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"7bd2db7fdc21f3beb868ef62dd3382fcc865af5d","modified":1667637455963},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"57a64551fbb6dea0505e3fc81b130fd5d31b212d","modified":1667639512554},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"142621f70bedcb5033ee99a988f7bb6c5eea3493","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"e37468e63db2a0ac09b65d21b7de3e62425bb455","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"6d93564a8bd13cb9b52ee5e178db3bcbf18b1bc6","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"7fb096656c8a6c21a4b6a5100885b1081d6021ed","modified":1667565469054},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"644d520fe80cc82058467708ab82ccad313b0c27","modified":1667565469054},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"714f19e7d66df84938bd1b82b33d5667abe1f147","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"2f95e99b8351fbecd9037a1bbdc3fee9d6ea8a77","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"a0010d833ed30211601c1e0bbbc68e85b77428c6","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"26be2afa9d4e7016cf3c42a6cd166f01e8e4ad5c","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"a457a0dbe23af21a7b6b8bfc5ee103c9fe92e89c","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"23db4e3cab68fed78601fc8a9c39ff5753bcc716","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"db0c148b56bb62d0c468c49d76c5657c01f57a06","modified":1667637757613},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bd88ee30ebf8ca2e7b4d3a034c317fd61733921f","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1667565469054},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"56389925671c7e8da0c033769421269e15e8f795","modified":1667565469054},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"a92984f566c97bb4179f34be79240af1552c6f17","modified":1667565469054},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"69f8e9414526dfda3af9a71c8e528fdd0ecbbfe5","modified":1667565469054},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1667565469054},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6f4b4ede52305bce9b22c8c897dcbde8af6e2ce4","modified":1667565469054},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1667565469054},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"a58d35d698885f1034dedbe99f7dbc1a801412c6","modified":1667565469054},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1667565469054},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"67cc6290e8a919f50476083ae5c2637df86c20de","modified":1667637001612},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1667565469054},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"51e45625929d57c9df3ba9090af99b9b7bb9a15b","modified":1667565469054},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"39d61cbe0c1e937f83ba3b147afaa29b4de2f87d","modified":1667565469054},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"25e58a7a8bda4b73d0a0e551643ca01b09ccd7e5","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"a310e48f826a4cacc55d8e68f43806e5085554f6","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1667565469054},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1667565469054},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1667565469054},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667565469054},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"99d9b17668260b242749c16851d9ec1024d31899","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"b2aadea7351fae8382b8c2a3b9de810d922b0ec1","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"58406a7a3bf45815769f652bf3ef81e57dcd07eb","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"5f648086a33a32d169a2f8d8c549c08aa02f67db","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"0611d9216f4c128ebdea4cc21454c3dc4a6398d5","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"ccb7d8ce3ded7364f9a15334b68ad73869fca757","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"49dcc23815e1d5264bb65c91e7dc67b1a723d1ea","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"8ec24c1939895ac0db2b2e8700bc9307b4ceb53c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"98ef20f8a3b10c1692f9b2b3c06033d2da8a8eae","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"eefdaa94956adc7a3ca90dd8edcd70a7574b439c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"591ef23c583690bd74af0cafb09af64ba5bd8151","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"22e2ef30fe5eb1db7566e89943c74ece029b2a8e","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"351fe25fbf02635b1f9e86e5e244c7d61f69baa7","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"e9bdf80d6796afc04eb809dbbe780d97f22c7fcd","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"e18fbd88d8942e53e771f29b26209ab735c5c567","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"a737046e730eb7264606ba0536218964044492f9","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"15462d1ed04651ad3b430c682842ac400f6f9b47","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"1c846c8d51649b8554d91536323eaeb20c8fc236","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"8e33aca36a4d3ae9e041ba05ced8eff56ae38f77","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"c12c898b35dd014780c1f3220ddbe12e7270983c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"04b2a5882e789a988e41d45abe606f0617b08e38","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"e846ddfe4a63b15d1416f6055f5756af5e3da7c6","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"ab167c00da4506f591b96f0591bf5bd214a26d4b","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"233907dd7f5b5f33412701d2ccffbc0bbae8707b","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d19e1c2c0a50f0e4547d71a17b9be88e8152f17c","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"dd0bc119029b62dce5dc965d5de7377e438fa29a","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"e8245d0b4933129bb1c485d8de11a9e52e676348","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"178c9cdcc4ce5a006885b24ce4a3d624e4734899","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1667565469054},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"f61d63724ea5c5f352568b3a16bde023affefbe5","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1667565469054},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1667565469054},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"95d2e1e1057e22c1df0ee8139434cb2088f8e4ba","modified":1667730260000},{"_id":"source/img/Wendy.png","hash":"8dfb2a6bf11a4e01a131e14268b5f19c7f063fe8","modified":1566725985335},{"_id":"public/css/custom.css","hash":"12bd57981abade3dbf643966114fd308fc952c1a","modified":1667744931492},{"_id":"public/css/footerTimer.css","hash":"7482b6504234a31b851fcf639ff0c7e5b2e572d0","modified":1667744931492},{"_id":"public/assets/scripts/footerTimer.js","hash":"cbaca56bb1cfef5c05a791ef135125491fa38dfb","modified":1667744931492},{"_id":"public/assets/scripts/progress-bar.js","hash":"99a26b15d2aa0422579f52a26a4a08dd96d6817c","modified":1667744931492},{"_id":"public/baidusitemap.xml","hash":"8c4e3222dca92ca0a552857c13d8a22ed257bb67","modified":1667744931492},{"_id":"public/search.xml","hash":"8b9399b4e77403fb3768c9ed0a2afca30f8f2b20","modified":1667744931492},{"_id":"public/sitemap.xml","hash":"47827b7199a5667ab08ecf49cdf3fd0d684225cf","modified":1667744931492},{"_id":"public/sitemap.txt","hash":"a370f6115f7f1d04691c0c7f33240ebdbafd3b6e","modified":1667744931492},{"_id":"public/about/index.html","hash":"a2599d54e900ca499949b3880596bf46f2ad6aa7","modified":1667744931492},{"_id":"public/articals/categories/index.html","hash":"e6ace67ddc881a03104cb4441f75b4a6a75e0087","modified":1667744931492},{"_id":"public/relax/games/index.html","hash":"05b34312bac3d8b4e12505d2e04db64ed5122047","modified":1667744931492},{"_id":"public/articals/archives/index.html","hash":"c4b1fa16a4702ff4e60acdfbdef8983596db9fa7","modified":1667744931492},{"_id":"public/articals/tags/index.html","hash":"2a9fd8f274f3e7fdc6128beb1a0777150ee244f1","modified":1667744931492},{"_id":"public/relax/movies/index.html","hash":"5c0b8d84186c9342b67f40844a8ad89c0855615a","modified":1667744931492},{"_id":"public/social/link/index.html","hash":"d8c2301e13ec15931ef18c1f44333f2bc450332c","modified":1667744931492},{"_id":"public/zone/love-story/index.html","hash":"979706c85a05eb3816b999d06eaf6390b41262bb","modified":1667744931492},{"_id":"public/zone/work-life/index.html","hash":"5a82900b687db6d920801a28fa1e499faf761c1b","modified":1667744931492},{"_id":"public/relax/photos/ohmygirl/index.html","hash":"098afda261b20f41b1dd38d8ede0a98b776f63c6","modified":1667744931492},{"_id":"public/relax/photos/marvel/index.html","hash":"440da68f903c610a1dcb89c51d5502c3a6757310","modified":1667744931492},{"_id":"public/relax/photos/index.html","hash":"b91ac14c229b31c8c11a1f93d4fd7d5942ab63f6","modified":1667744931492},{"_id":"public/relax/photos/wallpaper/index.html","hash":"e5ad330a92173fbfd4dcc58898887e74281f4fc4","modified":1667744931492},{"_id":"public/social/comments/index.html","hash":"997a0135f18ab4f4b32a107e8f35bd9aa8f4b72f","modified":1667744931492},{"_id":"public/relax/music/index.html","hash":"cbf65ee54746879483565ef01cc93bfed678f443","modified":1667744931492},{"_id":"public/articals/cla5g9ypk0011wgoifmnigtln/index.html","hash":"2947306cf2778d5192418472d21dc27db6e347b0","modified":1667744931492},{"_id":"public/articals/cla5g9yol0003wgoia6xl8e21/index.html","hash":"7e88bd01a57936ef2e96992e1e61ef1fa329d106","modified":1667744931492},{"_id":"public/articals/cla5g9yop0006wgoi292dei8b/index.html","hash":"c557da692f9bfbfb0f9ef85a3fa5d8fe03db12a4","modified":1667744931492},{"_id":"public/articals/cla5g9yog0001wgoi38t3geqd/index.html","hash":"e867438fb28070383ae2196bf098e0d464c1ae34","modified":1667744931492},{"_id":"public/articals/cla5g9yph000ywgoi9n584h3l/index.html","hash":"996e1ba6809c62fa3293032f90b3d13dd3b9968f","modified":1667744931492},{"_id":"public/articals/cla5g9ypj000zwgoi2lzvex2p/index.html","hash":"5d8b18416feaac477d4262114f0d79025dbd5cbf","modified":1667744931492},{"_id":"public/recommend/books/index.html","hash":"d7953d97677444cb20e1dac70d81ae5b2d26224a","modified":1667744931492},{"_id":"public/recommend/movies/index.html","hash":"b37aabc16e7b2313d46a1205bcfa08a89f818aa8","modified":1667744931492},{"_id":"public/comments/index.html","hash":"4b5bfa14748546e35566a33fb44c6e06a322f617","modified":1667744931492},{"_id":"public/articals/archives/2022/index.html","hash":"3b72779c931adbdcc34269e3d80dd092399e68a5","modified":1667744931492},{"_id":"public/articals/archives/2022/03/index.html","hash":"15784282a0cc39b9adc94ed26fdad839c440c7b8","modified":1667744931492},{"_id":"public/index.html","hash":"fce49e93d2429be9cb581701f29a391da876e98d","modified":1667744931492},{"_id":"public/articals/tags/TypeScript/index.html","hash":"21b4f34a0719d57e2f3f984a15c3e36ce2a2d552","modified":1667744931492},{"_id":"public/articals/tags/前端/index.html","hash":"67f491b02d3c73b08050f83afe50318c7965b830","modified":1667744931492},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1667744931492},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/idle_01.mtn","hash":"908abce18f6cf7fd4bc1486f048c25a517f4a34a","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/idle_02.mtn","hash":"865874c50848fbc9a55011391531e2ec171c9b91","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/idle_03.mtn","hash":"84684914ebf5dc5b2df160338bb97dcc0a978476","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/idle_04.mtn","hash":"78e22091792abb0600f724a5dfd60371257954e8","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/shake_01.mtn","hash":"dffc54733127832f8f5e91aced55a83da58fa215","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/shake_02.mtn","hash":"7b6c914f6c33450eda2e53d9b638fd7045c0f683","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/touch_01.mtn","hash":"99270ea8fe1f8f5d88eadb94f36bd0810009d1e6","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/touch_03.mtn","hash":"9c394975083915f0f3786caff1762381348b041e","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/touch_02.mtn","hash":"4d1f099fbd18d15c598a644227ed5bf942a2ba71","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/touch_06.mtn","hash":"feb9237c73f2045ed1704c01b5362c9a54ee5a18","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/touch_04.mtn","hash":"8d2302cfdaec698e575048797ff4f30ae4d202de","modified":1667744931492},{"_id":"public/live2dw/assets/wanko.model.json","hash":"b98a8ce54fbcf1606a489f1bc5f26b1a18c82d79","modified":1667744931492},{"_id":"public/live2dw/assets/mtn/touch_05.mtn","hash":"9610bb8a937ba9b11445a3894d8cc0733a2b67e5","modified":1667744931492},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1667744931492},{"_id":"public/live2dw/assets/moc/wanko.1024/texture_00.png","hash":"c405c1eeb82bcced7aa7a20f04a76168f60ad561","modified":1667744931492},{"_id":"public/live2dw/assets/moc/wanko.moc","hash":"7b188cd4dcddfe5bdba8ec51a65cb1c21cd2e57a","modified":1667744931492},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1667744931492},{"_id":"public/css/coin.css","hash":"89f8601fa55e15a3681226e03390e2c4e300ab1f","modified":1667744931492},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1667744931492},{"_id":"public/js/coin.js","hash":"713edc7be809f229eccf023e81015df6ebe41580","modified":1667744931492},{"_id":"public/js/utils.js","hash":"0b95daada72abb5d64a1e3236049a60120e47cca","modified":1667744931492},{"_id":"public/js/search/algolia.js","hash":"9feb248552667c53ce1b19bc7a295215f8c77008","modified":1667744931492},{"_id":"public/js/search/local-search.js","hash":"3071a4208fdf89ad7e0031536dd6ffa7bc951e4d","modified":1667744931492},{"_id":"public/css/index.css","hash":"464ebebe1103ffa78d9d53a961f702d7c9e619db","modified":1667744931492},{"_id":"public/js/main.js","hash":"3a656e805249386b4e566d98952be28b418254b7","modified":1667744931492},{"_id":"public/js/tw_cn.js","hash":"5c1391c9e96950833641f178b5f23c58422fb659","modified":1667744931492},{"_id":"public/img/favicon.ico","hash":"95d2e1e1057e22c1df0ee8139434cb2088f8e4ba","modified":1667744931492},{"_id":"public/img/alipay.jpg","hash":"9c214a189859f2a4057cc2b953944c5651d50c76","modified":1667744931492},{"_id":"public/img/wechat.jpg","hash":"ccb2f36829e4c49f795ea963a91981289c268be9","modified":1667744931492},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1667744931492},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1667744931492},{"_id":"public/img/Wendy.png","hash":"8dfb2a6bf11a4e01a131e14268b5f19c7f063fe8","modified":1667744931492}],"Category":[],"Data":[{"_id":"clustrmaps","data":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]}},{"_id":"link","data":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}],"Page":[{"_content":"# 关于\n\n{% icon icon-yule, 2em %}\n","source":"about/index.md","raw":"# 关于\n\n{% icon icon-yule, 2em %}\n","date":"2022-11-05T14:24:55.150Z","updated":"2022-11-05T14:24:55.150Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9yoe0000wgoi4a2g36wx","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><svg class=\"icon\" style=\"width: 2emem; height: 2emem\" aria-hidden=\"true\"><use xlink:href=\"#icon-yule\"></use></svg>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><svg class=\"icon\" style=\"width: 2emem; height: 2emem\" aria-hidden=\"true\"><use xlink:href=\"#icon-yule\"></use></svg>\n"},{"_content":"\n:root{\n  --primary-color:#3c83ff; /*我的主题色*/\n  --background-color: var(--primary-color);\n}\n\n/* 页脚与头图透明 */\n#page-header,#footer,\n/* day-mode-mask */\n#page-header::before, #footer::before,\n/* dark-mode-mask */\n[data-theme=\"dark\"] #page-header::before, [data-theme=\"dark\"] #footer::before\n{\n  background: transparent !important;\n}\n\n/* iconfont 设置 */\n/*iconfont默认样式*/\n.icon {\n  width: 1em; height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n  }\n/* 页脚蝴蝶振翅动画 */\n.copyright svg{\n  animation:butterfly 1s linear infinite alternate;\n}\n@keyframes butterfly {\n  from {\n    transform:rotateY(70deg);\n  }\n  to {\n    transform:rotateY(0deg);\n  }\n}\n\n/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n/* 顶部 progress-bar */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n/* bilibli 视频 设置 */\n/*哔哩哔哩视频适配*/\n.aspect-ratio {\n  position: relative;\n  width: 90%;\n  height: auto;\n  padding-bottom: 75%;\n  margin: 3% auto;\n  text-align: center;\n}\n.aspect-ratio iframe {\n  position: absolute;\n  width: 100%;\n  height: 86%;\n  left: 0;\n  top: 0;\n}\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: var(--theme-color);\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: var(--theme-color);\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 菜单文字 */\n#nav #menus > .menus_items > .menu_item > a > span {\n  font-size: 1em !important;\n  font-weight: bold !important;\n  text-shadow: #e8d8b9 0 0 3px !important;\n}\n\n/* 右侧nav 添加 flex:1  使导航栏居中 */\n#nav-right{\n  flex:1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap:nowrap;\n}\n/* 伪取消蓝色下划线 */\n#nav *::after{\n  background-color: transparent!important;\n}\n/* 子菜单横向布局 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\nleft:50%;\ntranslate:-50%;\n}\n\n\n/* 网站标题增强 */\n#site-name::before{\n  opacity: 0;\n  background-color: var(--background-color)!important;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  -ms-transition: .3s;\n  -o-transition: .3s;\n  position:absolute;\n  top:0!important;\n  right:0!important;\n  width:100%;\n  height:100%;\n  content: \"\\f015\";\n  box-shadow: 0 0 5px var(--background-color);\n  font-family: \"Font Awesome 6 Free\";\n  text-align: center;\n  color:white;\n  line-height:34px;/*如果有溢出或者垂直不居中的现象微调一下这个参数*/\n  font-size: 18px;/*根据个人喜好*/\n}\n#site-name:hover::before{\n  opacity: 1;\n  scale:1.03;\n}\n#site-name{\n  position: relative;\n  font-size: 24px; /*一定要把字体调大点，否则效果惨不忍睹！*/\n}","source":"css/custom.css","raw":"\n:root{\n  --primary-color:#3c83ff; /*我的主题色*/\n  --background-color: var(--primary-color);\n}\n\n/* 页脚与头图透明 */\n#page-header,#footer,\n/* day-mode-mask */\n#page-header::before, #footer::before,\n/* dark-mode-mask */\n[data-theme=\"dark\"] #page-header::before, [data-theme=\"dark\"] #footer::before\n{\n  background: transparent !important;\n}\n\n/* iconfont 设置 */\n/*iconfont默认样式*/\n.icon {\n  width: 1em; height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n  }\n/* 页脚蝴蝶振翅动画 */\n.copyright svg{\n  animation:butterfly 1s linear infinite alternate;\n}\n@keyframes butterfly {\n  from {\n    transform:rotateY(70deg);\n  }\n  to {\n    transform:rotateY(0deg);\n  }\n}\n\n/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n/* 顶部 progress-bar */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n/* bilibli 视频 设置 */\n/*哔哩哔哩视频适配*/\n.aspect-ratio {\n  position: relative;\n  width: 90%;\n  height: auto;\n  padding-bottom: 75%;\n  margin: 3% auto;\n  text-align: center;\n}\n.aspect-ratio iframe {\n  position: absolute;\n  width: 100%;\n  height: 86%;\n  left: 0;\n  top: 0;\n}\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: var(--theme-color);\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: var(--theme-color);\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 菜单文字 */\n#nav #menus > .menus_items > .menu_item > a > span {\n  font-size: 1em !important;\n  font-weight: bold !important;\n  text-shadow: #e8d8b9 0 0 3px !important;\n}\n\n/* 右侧nav 添加 flex:1  使导航栏居中 */\n#nav-right{\n  flex:1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap:nowrap;\n}\n/* 伪取消蓝色下划线 */\n#nav *::after{\n  background-color: transparent!important;\n}\n/* 子菜单横向布局 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\nleft:50%;\ntranslate:-50%;\n}\n\n\n/* 网站标题增强 */\n#site-name::before{\n  opacity: 0;\n  background-color: var(--background-color)!important;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  -ms-transition: .3s;\n  -o-transition: .3s;\n  position:absolute;\n  top:0!important;\n  right:0!important;\n  width:100%;\n  height:100%;\n  content: \"\\f015\";\n  box-shadow: 0 0 5px var(--background-color);\n  font-family: \"Font Awesome 6 Free\";\n  text-align: center;\n  color:white;\n  line-height:34px;/*如果有溢出或者垂直不居中的现象微调一下这个参数*/\n  font-size: 18px;/*根据个人喜好*/\n}\n#site-name:hover::before{\n  opacity: 1;\n  scale:1.03;\n}\n#site-name{\n  position: relative;\n  font-size: 24px; /*一定要把字体调大点，否则效果惨不忍睹！*/\n}","date":"2022-11-05T16:59:18.759Z","updated":"2022-11-05T16:59:18.759Z","path":"css/custom.css","layout":"false","title":"","comments":1,"_id":"cla5g9yok0002wgoib7dmbyfo","content":"\n:root{\n  --primary-color:#3c83ff; /*我的主题色*/\n  --background-color: var(--primary-color);\n}\n\n/* 页脚与头图透明 */\n#page-header,#footer,\n/* day-mode-mask */\n#page-header::before, #footer::before,\n/* dark-mode-mask */\n[data-theme=\"dark\"] #page-header::before, [data-theme=\"dark\"] #footer::before\n{\n  background: transparent !important;\n}\n\n/* iconfont 设置 */\n/*iconfont默认样式*/\n.icon {\n  width: 1em; height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n  }\n/* 页脚蝴蝶振翅动画 */\n.copyright svg{\n  animation:butterfly 1s linear infinite alternate;\n}\n@keyframes butterfly {\n  from {\n    transform:rotateY(70deg);\n  }\n  to {\n    transform:rotateY(0deg);\n  }\n}\n\n/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n/* 顶部 progress-bar */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n/* bilibli 视频 设置 */\n/*哔哩哔哩视频适配*/\n.aspect-ratio {\n  position: relative;\n  width: 90%;\n  height: auto;\n  padding-bottom: 75%;\n  margin: 3% auto;\n  text-align: center;\n}\n.aspect-ratio iframe {\n  position: absolute;\n  width: 100%;\n  height: 86%;\n  left: 0;\n  top: 0;\n}\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: var(--theme-color);\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: var(--theme-color);\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 菜单文字 */\n#nav #menus > .menus_items > .menu_item > a > span {\n  font-size: 1em !important;\n  font-weight: bold !important;\n  text-shadow: #e8d8b9 0 0 3px !important;\n}\n\n/* 右侧nav 添加 flex:1  使导航栏居中 */\n#nav-right{\n  flex:1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap:nowrap;\n}\n/* 伪取消蓝色下划线 */\n#nav *::after{\n  background-color: transparent!important;\n}\n/* 子菜单横向布局 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\nleft:50%;\ntranslate:-50%;\n}\n\n\n/* 网站标题增强 */\n#site-name::before{\n  opacity: 0;\n  background-color: var(--background-color)!important;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  -ms-transition: .3s;\n  -o-transition: .3s;\n  position:absolute;\n  top:0!important;\n  right:0!important;\n  width:100%;\n  height:100%;\n  content: \"\\f015\";\n  box-shadow: 0 0 5px var(--background-color);\n  font-family: \"Font Awesome 6 Free\";\n  text-align: center;\n  color:white;\n  line-height:34px;/*如果有溢出或者垂直不居中的现象微调一下这个参数*/\n  font-size: 18px;/*根据个人喜好*/\n}\n#site-name:hover::before{\n  opacity: 1;\n  scale:1.03;\n}\n#site-name{\n  position: relative;\n  font-size: 24px; /*一定要把字体调大点，否则效果惨不忍睹！*/\n}","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"\n:root{\n  --primary-color:#3c83ff; /*我的主题色*/\n  --background-color: var(--primary-color);\n}\n\n/* 页脚与头图透明 */\n#page-header,#footer,\n/* day-mode-mask */\n#page-header::before, #footer::before,\n/* dark-mode-mask */\n[data-theme=\"dark\"] #page-header::before, [data-theme=\"dark\"] #footer::before\n{\n  background: transparent !important;\n}\n\n/* iconfont 设置 */\n/*iconfont默认样式*/\n.icon {\n  width: 1em; height: 1em;\n  vertical-align: -0.15em;\n  fill: currentColor;\n  overflow: hidden;\n  }\n/* 页脚蝴蝶振翅动画 */\n.copyright svg{\n  animation:butterfly 1s linear infinite alternate;\n}\n@keyframes butterfly {\n  from {\n    transform:rotateY(70deg);\n  }\n  to {\n    transform:rotateY(0deg);\n  }\n}\n\n/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content > .card-widget.card-info {\n  background: linear-gradient(\n    -45deg,\n    #e8d8b9,\n    #eccec5,\n    #a3e9eb,\n    #bdbdf0,\n    #eec1ea\n  );\n  box-shadow: 0 0 5px rgb(66, 68, 68);\n  position: relative;\n  background-size: 400% 400%;\n  -webkit-animation: Gradient 10s ease infinite;\n  -moz-animation: Gradient 10s ease infinite;\n  animation: Gradient 10s ease infinite !important;\n}\n@-webkit-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@-moz-keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n@keyframes Gradient {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* 个人信息Follow me按钮 */\n#aside-content > .card-widget.card-info > #card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n\n/* 顶部 progress-bar */\n.pace {\n  -webkit-pointer-events: none;\n  pointer-events: none;\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  user-select: none;\n  z-index: 2000;\n  position: fixed;\n  margin: auto;\n  top: 4px;\n  left: 0;\n  right: 0;\n  height: 8px;\n  border-radius: 8px;\n  width: 7rem;\n  background: #eaecf2;\n  border: 1px #e3e8f7;\n  overflow: hidden\n}\n\n.pace-inactive .pace-progress {\n  opacity: 0;\n  transition: .3s ease-in\n}\n\n.pace .pace-progress {\n  -webkit-box-sizing: border-box;\n  -moz-box-sizing: border-box;\n  -ms-box-sizing: border-box;\n  -o-box-sizing: border-box;\n  box-sizing: border-box;\n  -webkit-transform: translate3d(0, 0, 0);\n  -moz-transform: translate3d(0, 0, 0);\n  -ms-transform: translate3d(0, 0, 0);\n  -o-transform: translate3d(0, 0, 0);\n  transform: translate3d(0, 0, 0);\n  max-width: 200px;\n  position: absolute;\n  z-index: 2000;\n  display: block;\n  top: 0;\n  right: 100%;\n  height: 100%;\n  width: 100%;\n  /* linear-gradient(to right, #3494e6, #ec6ead) */\n  background: linear-gradient(to right, #43cea2, #3866ca);\n  animation: gradient 2s ease infinite;\n  background-size: 200%\n}\n\n.pace.pace-inactive {\n  opacity: 0;\n  transition: .3s;\n  top: -8px\n}\n\n/* bilibli 视频 设置 */\n/*哔哩哔哩视频适配*/\n.aspect-ratio {\n  position: relative;\n  width: 90%;\n  height: auto;\n  padding-bottom: 75%;\n  margin: 3% auto;\n  text-align: center;\n}\n.aspect-ratio iframe {\n  position: absolute;\n  width: 100%;\n  height: 86%;\n  left: 0;\n  top: 0;\n}\n\n/* 文章页H1-H6图标样式效果 */\n/* 控制风车转动速度 4s那里可以自己调节快慢 */\nh1::before,\nh2::before,\nh3::before,\nh4::before,\nh5::before,\nh6::before {\n  -webkit-animation: ccc 4s linear infinite;\n  animation: ccc 4s linear infinite;\n}\n/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */\n@-webkit-keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n@keyframes ccc {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  to {\n    -webkit-transform: rotate(-1turn);\n    transform: rotate(-1turn);\n  }\n}\n/* 设置风车颜色 */\n#content-inner.layout h1::before {\n  color: #ef50a8;\n  margin-left: -1.55rem;\n  font-size: 1.3rem;\n  margin-top: -0.23rem;\n}\n#content-inner.layout h2::before {\n  color: #fb7061;\n  margin-left: -1.35rem;\n  font-size: 1.1rem;\n  margin-top: -0.12rem;\n}\n#content-inner.layout h3::before {\n  color: #ffbf00;\n  margin-left: -1.22rem;\n  font-size: 0.95rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h4::before {\n  color: #a9e000;\n  margin-left: -1.05rem;\n  font-size: 0.8rem;\n  margin-top: -0.09rem;\n}\n#content-inner.layout h5::before {\n  color: #57c850;\n  margin-left: -0.9rem;\n  font-size: 0.7rem;\n  margin-top: 0rem;\n}\n#content-inner.layout h6::before {\n  color: #5ec1e0;\n  margin-left: -0.9rem;\n  font-size: 0.66rem;\n  margin-top: 0rem;\n}\n/* s设置风车hover动效 6s那里可以自己调节快慢*/\n#content-inner.layout h1:hover,\n#content-inner.layout h2:hover,\n#content-inner.layout h3:hover,\n#content-inner.layout h4:hover,\n#content-inner.layout h5:hover,\n#content-inner.layout h6:hover {\n  color: var(--theme-color);\n}\n#content-inner.layout h1:hover::before,\n#content-inner.layout h2:hover::before,\n#content-inner.layout h3:hover::before,\n#content-inner.layout h4:hover::before,\n#content-inner.layout h5:hover::before,\n#content-inner.layout h6:hover::before {\n  color: var(--theme-color);\n  -webkit-animation: ccc 6s linear infinite;\n  animation: ccc 6s linear infinite;\n}\n\n/* 菜单文字 */\n#nav #menus > .menus_items > .menu_item > a > span {\n  font-size: 1em !important;\n  font-weight: bold !important;\n  text-shadow: #e8d8b9 0 0 3px !important;\n}\n\n/* 右侧nav 添加 flex:1  使导航栏居中 */\n#nav-right{\n  flex:1 1 auto;\n  justify-content: flex-end;\n  margin-left: auto;\n  display: flex;\n  flex-wrap:nowrap;\n}\n/* 伪取消蓝色下划线 */\n#nav *::after{\n  background-color: transparent!important;\n}\n/* 子菜单横向布局 */\n.menus_item_child li:not(#sidebar-menus li){\n  float: left;\n  border-radius: 6px!important;\n  -webkit-border-radius: 6px!important;\n  -moz-border-radius: 6px!important;\n  -ms-border-radius: 6px!important;\n  -o-border-radius: 6px!important;\n}\n.menus_item_child:not(#sidebar-menus ul){\nleft:50%;\ntranslate:-50%;\n}\n\n\n/* 网站标题增强 */\n#site-name::before{\n  opacity: 0;\n  background-color: var(--background-color)!important;\n  border-radius: 8px;\n  -webkit-border-radius: 8px;\n  -moz-border-radius: 8px;\n  -ms-border-radius: 8px;\n  -o-border-radius: 8px;\n  transition: .3s;\n  -webkit-transition: .3s;\n  -moz-transition: .3s;\n  -ms-transition: .3s;\n  -o-transition: .3s;\n  position:absolute;\n  top:0!important;\n  right:0!important;\n  width:100%;\n  height:100%;\n  content: \"\\f015\";\n  box-shadow: 0 0 5px var(--background-color);\n  font-family: \"Font Awesome 6 Free\";\n  text-align: center;\n  color:white;\n  line-height:34px;/*如果有溢出或者垂直不居中的现象微调一下这个参数*/\n  font-size: 18px;/*根据个人喜好*/\n}\n#site-name:hover::before{\n  opacity: 1;\n  scale:1.03;\n}\n#site-name{\n  position: relative;\n  font-size: 24px; /*一定要把字体调大点，否则效果惨不忍睹！*/\n}"},{"_content":"div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}","source":"css/footerTimer.css","raw":"div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}","date":"2022-11-05T03:32:30.146Z","updated":"2022-11-05T03:32:30.146Z","path":"css/footerTimer.css","layout":"false","title":"","comments":1,"_id":"cla5g9yoo0005wgoi4d415ixx","content":"div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"div#runtime{width:180px;margin:auto;color:#fff;padding-inline:5px;border-radius:10px;background-color:rgba(0,0,0,.7)}#workboard{font-size:12px}[data-theme=dark] div#runtime{color:#28b4c8;box-shadow:0 0 5px rgba(28,69,218,.71);animation:flashlight 1s linear infinite alternate}@-moz-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-webkit-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@-o-keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}@keyframes flashlight{from{box-shadow:0 0 5px #1478d2}to{box-shadow:0 0 2px #1478d2}}"},{"title":":title","_content":"","source":"articals/archives/index.md","raw":"---\ntitle: :title\n---\n","date":"2022-11-06T13:51:25.674Z","updated":"2022-11-06T13:51:25.674Z","path":"articals/archives/index.html","comments":1,"layout":"page","_id":"cla5g9yoq0007wgoi3v00c11a","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""},{"title":"分类","date":"2022-10-30T05:14:00.000Z","type":"categories","_content":"","source":"articals/categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-10-30 13:14\ntype: categories\n---\n","updated":"2022-11-06T02:44:08.664Z","path":"articals/categories/index.html","comments":1,"layout":"page","_id":"cla5g9yor0008wgoi20a19qk9","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""},{"title":"tags","date":"2022-11-04T12:48:32.000Z","type":"tags","_content":"\n## tags\n\n这是标签页\n","source":"articals/tags/index.md","raw":"---\ntitle: tags\ndate: 2022.11.04 20:48:32\ntype: \"tags\"\n---\n\n## tags\n\n这是标签页\n","updated":"2022-11-04T12:48:34.587Z","path":"articals/tags/index.html","comments":1,"layout":"page","_id":"cla5g9yos000awgoi6hz3fn9o","content":"<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h2><p>这是标签页</p>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h2 id=\"tags\"><a href=\"#tags\" class=\"headerlink\" title=\"tags\"></a>tags</h2><p>这是标签页</p>\n"},{"_content":"var now = new Date();\nfunction createtime() {\n  now.setTime(now.getTime() + 1e3);\n  var e = new Date(\"2022-10-30 00:00:00\"),\n    t = Math.trunc(234e8 + ((now - e) / 1e3) * 17),\n    a = (t / 1496e5).toFixed(6),\n    n = new Date(\"2022-10-30 00:00:00\"),\n    s = (now - n) / 1e3 / 60 / 60 / 24,\n    o = Math.floor(s),\n    r = (now - n) / 1e3 / 60 / 60 - 24 * o,\n    i = Math.floor(r);\n  1 == String(i).length && (i = \"0\" + i);\n  var l = (now - n) / 1e3 / 60 - 1440 * o - 60 * i,\n    b = Math.floor(l);\n  1 == String(b).length && (b = \"0\" + b);\n  var d = (now - n) / 1e3 - 86400 * o - 3600 * i - 60 * b,\n    c = Math.round(d);\n  1 == String(c).length && (c = \"0\" + c);\n  let g = \"\";\n  (g =\n    i < 18 && i >= 9\n      ? `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `\n      : `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `),\n    document.getElementById(\"workboard\") &&\n      (document.getElementById(\"workboard\").innerHTML = g);\n}\nsetInterval(() => {\n  createtime();\n}, 1e3);\n","source":"assets/scripts/footerTimer.js","raw":"var now = new Date();\nfunction createtime() {\n  now.setTime(now.getTime() + 1e3);\n  var e = new Date(\"2022-10-30 00:00:00\"),\n    t = Math.trunc(234e8 + ((now - e) / 1e3) * 17),\n    a = (t / 1496e5).toFixed(6),\n    n = new Date(\"2022-10-30 00:00:00\"),\n    s = (now - n) / 1e3 / 60 / 60 / 24,\n    o = Math.floor(s),\n    r = (now - n) / 1e3 / 60 / 60 - 24 * o,\n    i = Math.floor(r);\n  1 == String(i).length && (i = \"0\" + i);\n  var l = (now - n) / 1e3 / 60 - 1440 * o - 60 * i,\n    b = Math.floor(l);\n  1 == String(b).length && (b = \"0\" + b);\n  var d = (now - n) / 1e3 - 86400 * o - 3600 * i - 60 * b,\n    c = Math.round(d);\n  1 == String(c).length && (c = \"0\" + c);\n  let g = \"\";\n  (g =\n    i < 18 && i >= 9\n      ? `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `\n      : `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `),\n    document.getElementById(\"workboard\") &&\n      (document.getElementById(\"workboard\").innerHTML = g);\n}\nsetInterval(() => {\n  createtime();\n}, 1e3);\n","date":"2022-11-05T16:27:57.958Z","updated":"2022-11-05T16:27:57.958Z","path":"assets/scripts/footerTimer.js","layout":"false","title":"","comments":1,"_id":"cla5g9yot000bwgoi6j5tfyb4","content":"var now = new Date();\nfunction createtime() {\n  now.setTime(now.getTime() + 1e3);\n  var e = new Date(\"2022-10-30 00:00:00\"),\n    t = Math.trunc(234e8 + ((now - e) / 1e3) * 17),\n    a = (t / 1496e5).toFixed(6),\n    n = new Date(\"2022-10-30 00:00:00\"),\n    s = (now - n) / 1e3 / 60 / 60 / 24,\n    o = Math.floor(s),\n    r = (now - n) / 1e3 / 60 / 60 - 24 * o,\n    i = Math.floor(r);\n  1 == String(i).length && (i = \"0\" + i);\n  var l = (now - n) / 1e3 / 60 - 1440 * o - 60 * i,\n    b = Math.floor(l);\n  1 == String(b).length && (b = \"0\" + b);\n  var d = (now - n) / 1e3 - 86400 * o - 3600 * i - 60 * b,\n    c = Math.round(d);\n  1 == String(c).length && (c = \"0\" + c);\n  let g = \"\";\n  (g =\n    i < 18 && i >= 9\n      ? `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `\n      : `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `),\n    document.getElementById(\"workboard\") &&\n      (document.getElementById(\"workboard\").innerHTML = g);\n}\nsetInterval(() => {\n  createtime();\n}, 1e3);\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"var now = new Date();\nfunction createtime() {\n  now.setTime(now.getTime() + 1e3);\n  var e = new Date(\"2022-10-30 00:00:00\"),\n    t = Math.trunc(234e8 + ((now - e) / 1e3) * 17),\n    a = (t / 1496e5).toFixed(6),\n    n = new Date(\"2022-10-30 00:00:00\"),\n    s = (now - n) / 1e3 / 60 / 60 / 24,\n    o = Math.floor(s),\n    r = (now - n) / 1e3 / 60 / 60 - 24 * o,\n    i = Math.floor(r);\n  1 == String(i).length && (i = \"0\" + i);\n  var l = (now - n) / 1e3 / 60 - 1440 * o - 60 * i,\n    b = Math.floor(l);\n  1 == String(b).length && (b = \"0\" + b);\n  var d = (now - n) / 1e3 - 86400 * o - 3600 * i - 60 * b,\n    c = Math.round(d);\n  1 == String(c).length && (c = \"0\" + c);\n  let g = \"\";\n  (g =\n    i < 18 && i >= 9\n      ? `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `\n      : `<span class='textTip'> <br> <b>小站已经运行了 ${o} 天</span><span id='runtime'> ${i} 小时 ${b} 分 ${c} 秒 </b></span> <i id=\"heartbeat\" class='fas fa-heartbeat' style='color:red'></i> <br> <b>旅行者 1 号当前距离地球 ${t} 千米，约为 ${a} 个天文单位 🚀</b> <br> <b><font size=2px>世界上繁花无数✨</font></b> `),\n    document.getElementById(\"workboard\") &&\n      (document.getElementById(\"workboard\").innerHTML = g);\n}\nsetInterval(() => {\n  createtime();\n}, 1e3);\n"},{"_content":"/*! pace 1.0.2 */\n(function () {\n  var a,\n    b,\n    c,\n    d,\n    e,\n    f,\n    g,\n    h,\n    i,\n    j,\n    k,\n    l,\n    m,\n    n,\n    o,\n    p,\n    q,\n    r,\n    s,\n    t,\n    u,\n    v,\n    w,\n    x,\n    y,\n    z,\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X = [].slice,\n    Y = {}.hasOwnProperty,\n    Z = function (a, b) {\n      function c() {\n        this.constructor = a;\n      }\n      for (var d in b) Y.call(b, d) && (a[d] = b[d]);\n      return (\n        (c.prototype = b.prototype),\n        (a.prototype = new c()),\n        (a.__super__ = b.prototype),\n        a\n      );\n    },\n    $ =\n      [].indexOf ||\n      function (a) {\n        for (var b = 0, c = this.length; c > b; b++)\n          if (b in this && this[b] === a) return b;\n        return -1;\n      };\n  for (\n    u = {\n      catchupTime: 100,\n      initialRate: 0.03,\n      minTime: 250,\n      ghostTime: 100,\n      maxProgressPerFrame: 20,\n      easeFactor: 1.25,\n      startOnPageLoad: !0,\n      restartOnPushState: !0,\n      restartOnRequestAfter: 500,\n      target: \"body\",\n      elements: { checkInterval: 100, selectors: [\"body\"] },\n      eventLag: { minSamples: 10, sampleCount: 3, lagThreshold: 3 },\n      ajax: { trackMethods: [\"GET\"], trackWebSockets: !0, ignoreURLs: [] },\n    },\n      C = function () {\n        var a;\n        return null !=\n          (a =\n            \"undefined\" != typeof performance &&\n            null !== performance &&\n            \"function\" == typeof performance.now\n              ? performance.now()\n              : void 0)\n          ? a\n          : +new Date();\n      },\n      E =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame,\n      t = window.cancelAnimationFrame || window.mozCancelAnimationFrame,\n      null == E &&\n        ((E = function (a) {\n          return setTimeout(a, 50);\n        }),\n        (t = function (a) {\n          return clearTimeout(a);\n        })),\n      G = function (a) {\n        var b, c;\n        return (\n          (b = C()),\n          (c = function () {\n            var d;\n            return (\n              (d = C() - b),\n              d >= 33\n                ? ((b = C()),\n                  a(d, function () {\n                    return E(c);\n                  }))\n                : setTimeout(c, 33 - d)\n            );\n          })()\n        );\n      },\n      F = function () {\n        var a, b, c;\n        return (\n          (c = arguments[0]),\n          (b = arguments[1]),\n          (a = 3 <= arguments.length ? X.call(arguments, 2) : []),\n          \"function\" == typeof c[b] ? c[b].apply(c, a) : c[b]\n        );\n      },\n      v = function () {\n        var a, b, c, d, e, f, g;\n        for (\n          b = arguments[0],\n            d = 2 <= arguments.length ? X.call(arguments, 1) : [],\n            f = 0,\n            g = d.length;\n          g > f;\n          f++\n        )\n          if ((c = d[f]))\n            for (a in c)\n              Y.call(c, a) &&\n                ((e = c[a]),\n                null != b[a] &&\n                \"object\" == typeof b[a] &&\n                null != e &&\n                \"object\" == typeof e\n                  ? v(b[a], e)\n                  : (b[a] = e));\n        return b;\n      },\n      q = function (a) {\n        var b, c, d, e, f;\n        for (c = b = 0, e = 0, f = a.length; f > e; e++)\n          (d = a[e]), (c += Math.abs(d)), b++;\n        return c / b;\n      },\n      x = function (a, b) {\n        var c, d, e;\n        if (\n          (null == a && (a = \"options\"),\n          null == b && (b = !0),\n          (e = document.querySelector(\"[data-pace-\" + a + \"]\")))\n        ) {\n          if (((c = e.getAttribute(\"data-pace-\" + a)), !b)) return c;\n          try {\n            return JSON.parse(c);\n          } catch (f) {\n            return (\n              (d = f),\n              \"undefined\" != typeof console && null !== console\n                ? console.error(\"Error parsing inline pace options\", d)\n                : void 0\n            );\n          }\n        }\n      },\n      g = (function () {\n        function a() {}\n        return (\n          (a.prototype.on = function (a, b, c, d) {\n            var e;\n            return (\n              null == d && (d = !1),\n              null == this.bindings && (this.bindings = {}),\n              null == (e = this.bindings)[a] && (e[a] = []),\n              this.bindings[a].push({ handler: b, ctx: c, once: d })\n            );\n          }),\n          (a.prototype.once = function (a, b, c) {\n            return this.on(a, b, c, !0);\n          }),\n          (a.prototype.off = function (a, b) {\n            var c, d, e;\n            if (null != (null != (d = this.bindings) ? d[a] : void 0)) {\n              if (null == b) return delete this.bindings[a];\n              for (c = 0, e = []; c < this.bindings[a].length; )\n                e.push(\n                  this.bindings[a][c].handler === b\n                    ? this.bindings[a].splice(c, 1)\n                    : c++\n                );\n              return e;\n            }\n          }),\n          (a.prototype.trigger = function () {\n            var a, b, c, d, e, f, g, h, i;\n            if (\n              ((c = arguments[0]),\n              (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n              null != (g = this.bindings) ? g[c] : void 0)\n            ) {\n              for (e = 0, i = []; e < this.bindings[c].length; )\n                (h = this.bindings[c][e]),\n                  (d = h.handler),\n                  (b = h.ctx),\n                  (f = h.once),\n                  d.apply(null != b ? b : this, a),\n                  i.push(f ? this.bindings[c].splice(e, 1) : e++);\n              return i;\n            }\n          }),\n          a\n        );\n      })(),\n      j = window.Pace || {},\n      window.Pace = j,\n      v(j, g.prototype),\n      D = j.options = v({}, u, window.paceOptions, x()),\n      U = [\"ajax\", \"document\", \"eventLag\", \"elements\"],\n      Q = 0,\n      S = U.length;\n    S > Q;\n    Q++\n  )\n    (K = U[Q]), D[K] === !0 && (D[K] = u[K]);\n  (i = (function (a) {\n    function b() {\n      return (V = b.__super__.constructor.apply(this, arguments));\n    }\n    return Z(b, a), b;\n  })(Error)),\n    (b = (function () {\n      function a() {\n        this.progress = 0;\n      }\n      return (\n        (a.prototype.getElement = function () {\n          var a;\n          if (null == this.el) {\n            if (((a = document.querySelector(D.target)), !a)) throw new i();\n            (this.el = document.createElement(\"div\")),\n              (this.el.className = \"pace pace-active\"),\n              (document.body.className = document.body.className.replace(\n                /pace-done/g,\n                \"\"\n              )),\n              (document.body.className += \" pace-running\"),\n              (this.el.innerHTML =\n                '<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>'),\n              null != a.firstChild\n                ? a.insertBefore(this.el, a.firstChild)\n                : a.appendChild(this.el);\n          }\n          return this.el;\n        }),\n        (a.prototype.finish = function () {\n          var a;\n          return (\n            (a = this.getElement()),\n            (a.className = a.className.replace(\"pace-active\", \"\")),\n            (a.className += \" pace-inactive\"),\n            (document.body.className = document.body.className.replace(\n              \"pace-running\",\n              \"\"\n            )),\n            (document.body.className += \" pace-done\")\n          );\n        }),\n        (a.prototype.update = function (a) {\n          return (this.progress = a), this.render();\n        }),\n        (a.prototype.destroy = function () {\n          try {\n            this.getElement().parentNode.removeChild(this.getElement());\n          } catch (a) {\n            i = a;\n          }\n          return (this.el = void 0);\n        }),\n        (a.prototype.render = function () {\n          var a, b, c, d, e, f, g;\n          if (null == document.querySelector(D.target)) return !1;\n          for (\n            a = this.getElement(),\n              d = \"translate3d(\" + this.progress + \"%, 0, 0)\",\n              g = [\"webkitTransform\", \"msTransform\", \"transform\"],\n              e = 0,\n              f = g.length;\n            f > e;\n            e++\n          )\n            (b = g[e]), (a.children[0].style[b] = d);\n          return (\n            (!this.lastRenderedProgress ||\n              this.lastRenderedProgress | (0 !== this.progress) | 0) &&\n              (a.children[0].setAttribute(\n                \"data-progress-text\",\n                \"\" + (0 | this.progress) + \"%\"\n              ),\n              this.progress >= 100\n                ? (c = \"99\")\n                : ((c = this.progress < 10 ? \"0\" : \"\"),\n                  (c += 0 | this.progress)),\n              a.children[0].setAttribute(\"data-progress\", \"\" + c)),\n            (this.lastRenderedProgress = this.progress)\n          );\n        }),\n        (a.prototype.done = function () {\n          return this.progress >= 100;\n        }),\n        a\n      );\n    })()),\n    (h = (function () {\n      function a() {\n        this.bindings = {};\n      }\n      return (\n        (a.prototype.trigger = function (a, b) {\n          var c, d, e, f, g;\n          if (null != this.bindings[a]) {\n            for (f = this.bindings[a], g = [], d = 0, e = f.length; e > d; d++)\n              (c = f[d]), g.push(c.call(this, b));\n            return g;\n          }\n        }),\n        (a.prototype.on = function (a, b) {\n          var c;\n          return (\n            null == (c = this.bindings)[a] && (c[a] = []),\n            this.bindings[a].push(b)\n          );\n        }),\n        a\n      );\n    })()),\n    (P = window.XMLHttpRequest),\n    (O = window.XDomainRequest),\n    (N = window.WebSocket),\n    (w = function (a, b) {\n      var c, d, e;\n      e = [];\n      for (d in b.prototype)\n        try {\n          e.push(\n            null == a[d] && \"function\" != typeof b[d]\n              ? \"function\" == typeof Object.defineProperty\n                ? Object.defineProperty(a, d, {\n                    get: function () {\n                      return b.prototype[d];\n                    },\n                    configurable: !0,\n                    enumerable: !0,\n                  })\n                : (a[d] = b.prototype[d])\n              : void 0\n          );\n        } catch (f) {\n          c = f;\n        }\n      return e;\n    }),\n    (A = []),\n    (j.ignore = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"ignore\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (j.track = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"track\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (J = function (a) {\n      var b;\n      if ((null == a && (a = \"GET\"), \"track\" === A[0])) return \"force\";\n      if (!A.length && D.ajax) {\n        if (\"socket\" === a && D.ajax.trackWebSockets) return !0;\n        if (((b = a.toUpperCase()), $.call(D.ajax.trackMethods, b) >= 0))\n          return !0;\n      }\n      return !1;\n    }),\n    (k = (function (a) {\n      function b() {\n        var a,\n          c = this;\n        b.__super__.constructor.apply(this, arguments),\n          (a = function (a) {\n            var b;\n            return (\n              (b = a.open),\n              (a.open = function (d, e) {\n                return (\n                  J(d) && c.trigger(\"request\", { type: d, url: e, request: a }),\n                  b.apply(a, arguments)\n                );\n              })\n            );\n          }),\n          (window.XMLHttpRequest = function (b) {\n            var c;\n            return (c = new P(b)), a(c), c;\n          });\n        try {\n          w(window.XMLHttpRequest, P);\n        } catch (d) {}\n        if (null != O) {\n          window.XDomainRequest = function () {\n            var b;\n            return (b = new O()), a(b), b;\n          };\n          try {\n            w(window.XDomainRequest, O);\n          } catch (d) {}\n        }\n        if (null != N && D.ajax.trackWebSockets) {\n          window.WebSocket = function (a, b) {\n            var d;\n            return (\n              (d = null != b ? new N(a, b) : new N(a)),\n              J(\"socket\") &&\n                c.trigger(\"request\", {\n                  type: \"socket\",\n                  url: a,\n                  protocols: b,\n                  request: d,\n                }),\n              d\n            );\n          };\n          try {\n            w(window.WebSocket, N);\n          } catch (d) {}\n        }\n      }\n      return Z(b, a), b;\n    })(h)),\n    (R = null),\n    (y = function () {\n      return null == R && (R = new k()), R;\n    }),\n    (I = function (a) {\n      var b, c, d, e;\n      for (e = D.ajax.ignoreURLs, c = 0, d = e.length; d > c; c++)\n        if (((b = e[c]), \"string\" == typeof b)) {\n          if (-1 !== a.indexOf(b)) return !0;\n        } else if (b.test(a)) return !0;\n      return !1;\n    }),\n    y().on(\"request\", function (b) {\n      var c, d, e, f, g;\n      return (\n        (f = b.type),\n        (e = b.request),\n        (g = b.url),\n        I(g)\n          ? void 0\n          : j.running || (D.restartOnRequestAfter === !1 && \"force\" !== J(f))\n          ? void 0\n          : ((d = arguments),\n            (c = D.restartOnRequestAfter || 0),\n            \"boolean\" == typeof c && (c = 0),\n            setTimeout(function () {\n              var b, c, g, h, i, k;\n              if (\n                (b =\n                  \"socket\" === f\n                    ? e.readyState < 2\n                    : 0 < (h = e.readyState) && 4 > h)\n              ) {\n                for (\n                  j.restart(), i = j.sources, k = [], c = 0, g = i.length;\n                  g > c;\n                  c++\n                ) {\n                  if (((K = i[c]), K instanceof a)) {\n                    K.watch.apply(K, d);\n                    break;\n                  }\n                  k.push(void 0);\n                }\n                return k;\n              }\n            }, c))\n      );\n    }),\n    (a = (function () {\n      function a() {\n        var a = this;\n        (this.elements = []),\n          y().on(\"request\", function () {\n            return a.watch.apply(a, arguments);\n          });\n      }\n      return (\n        (a.prototype.watch = function (a) {\n          var b, c, d, e;\n          return (\n            (d = a.type),\n            (b = a.request),\n            (e = a.url),\n            I(e)\n              ? void 0\n              : ((c = \"socket\" === d ? new n(b) : new o(b)),\n                this.elements.push(c))\n          );\n        }),\n        a\n      );\n    })()),\n    (o = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = this;\n        if (((this.progress = 0), null != window.ProgressEvent))\n          for (\n            c = null,\n              a.addEventListener(\n                \"progress\",\n                function (a) {\n                  return (h.progress = a.lengthComputable\n                    ? (100 * a.loaded) / a.total\n                    : h.progress + (100 - h.progress) / 2);\n                },\n                !1\n              ),\n              g = [\"load\", \"abort\", \"timeout\", \"error\"],\n              d = 0,\n              e = g.length;\n            e > d;\n            d++\n          )\n            (b = g[d]),\n              a.addEventListener(\n                b,\n                function () {\n                  return (h.progress = 100);\n                },\n                !1\n              );\n        else\n          (f = a.onreadystatechange),\n            (a.onreadystatechange = function () {\n              var b;\n              return (\n                0 === (b = a.readyState) || 4 === b\n                  ? (h.progress = 100)\n                  : 3 === a.readyState && (h.progress = 50),\n                \"function\" == typeof f ? f.apply(null, arguments) : void 0\n              );\n            });\n      }\n      return a;\n    })()),\n    (n = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f = this;\n        for (\n          this.progress = 0, e = [\"error\", \"open\"], c = 0, d = e.length;\n          d > c;\n          c++\n        )\n          (b = e[c]),\n            a.addEventListener(\n              b,\n              function () {\n                return (f.progress = 100);\n              },\n              !1\n            );\n      }\n      return a;\n    })()),\n    (d = (function () {\n      function a(a) {\n        var b, c, d, f;\n        for (\n          null == a && (a = {}),\n            this.elements = [],\n            null == a.selectors && (a.selectors = []),\n            f = a.selectors,\n            c = 0,\n            d = f.length;\n          d > c;\n          c++\n        )\n          (b = f[c]), this.elements.push(new e(b));\n      }\n      return a;\n    })()),\n    (e = (function () {\n      function a(a) {\n        (this.selector = a), (this.progress = 0), this.check();\n      }\n      return (\n        (a.prototype.check = function () {\n          var a = this;\n          return document.querySelector(this.selector)\n            ? this.done()\n            : setTimeout(function () {\n                return a.check();\n              }, D.elements.checkInterval);\n        }),\n        (a.prototype.done = function () {\n          return (this.progress = 100);\n        }),\n        a\n      );\n    })()),\n    (c = (function () {\n      function a() {\n        var a,\n          b,\n          c = this;\n        (this.progress =\n          null != (b = this.states[document.readyState]) ? b : 100),\n          (a = document.onreadystatechange),\n          (document.onreadystatechange = function () {\n            return (\n              null != c.states[document.readyState] &&\n                (c.progress = c.states[document.readyState]),\n              \"function\" == typeof a ? a.apply(null, arguments) : void 0\n            );\n          });\n      }\n      return (\n        (a.prototype.states = { loading: 0, interactive: 50, complete: 100 }), a\n      );\n    })()),\n    (f = (function () {\n      function a() {\n        var a,\n          b,\n          c,\n          d,\n          e,\n          f = this;\n        (this.progress = 0),\n          (a = 0),\n          (e = []),\n          (d = 0),\n          (c = C()),\n          (b = setInterval(function () {\n            var g;\n            return (\n              (g = C() - c - 50),\n              (c = C()),\n              e.push(g),\n              e.length > D.eventLag.sampleCount && e.shift(),\n              (a = q(e)),\n              ++d >= D.eventLag.minSamples && a < D.eventLag.lagThreshold\n                ? ((f.progress = 100), clearInterval(b))\n                : (f.progress = 100 * (3 / (a + 3)))\n            );\n          }, 50));\n      }\n      return a;\n    })()),\n    (m = (function () {\n      function a(a) {\n        (this.source = a),\n          (this.last = this.sinceLastUpdate = 0),\n          (this.rate = D.initialRate),\n          (this.catchup = 0),\n          (this.progress = this.lastProgress = 0),\n          null != this.source && (this.progress = F(this.source, \"progress\"));\n      }\n      return (\n        (a.prototype.tick = function (a, b) {\n          var c;\n          return (\n            null == b && (b = F(this.source, \"progress\")),\n            b >= 100 && (this.done = !0),\n            b === this.last\n              ? (this.sinceLastUpdate += a)\n              : (this.sinceLastUpdate &&\n                  (this.rate = (b - this.last) / this.sinceLastUpdate),\n                (this.catchup = (b - this.progress) / D.catchupTime),\n                (this.sinceLastUpdate = 0),\n                (this.last = b)),\n            b > this.progress && (this.progress += this.catchup * a),\n            (c = 1 - Math.pow(this.progress / 100, D.easeFactor)),\n            (this.progress += c * this.rate * a),\n            (this.progress = Math.min(\n              this.lastProgress + D.maxProgressPerFrame,\n              this.progress\n            )),\n            (this.progress = Math.max(0, this.progress)),\n            (this.progress = Math.min(100, this.progress)),\n            (this.lastProgress = this.progress),\n            this.progress\n          );\n        }),\n        a\n      );\n    })()),\n    (L = null),\n    (H = null),\n    (r = null),\n    (M = null),\n    (p = null),\n    (s = null),\n    (j.running = !1),\n    (z = function () {\n      return D.restartOnPushState ? j.restart() : void 0;\n    }),\n    null != window.history.pushState &&\n      ((T = window.history.pushState),\n      (window.history.pushState = function () {\n        return z(), T.apply(window.history, arguments);\n      })),\n    null != window.history.replaceState &&\n      ((W = window.history.replaceState),\n      (window.history.replaceState = function () {\n        return z(), W.apply(window.history, arguments);\n      })),\n    (l = { ajax: a, elements: d, document: c, eventLag: f }),\n    (B = function () {\n      var a, c, d, e, f, g, h, i;\n      for (\n        j.sources = L = [],\n          g = [\"ajax\", \"elements\", \"document\", \"eventLag\"],\n          c = 0,\n          e = g.length;\n        e > c;\n        c++\n      )\n        (a = g[c]), D[a] !== !1 && L.push(new l[a](D[a]));\n      for (\n        i = null != (h = D.extraSources) ? h : [], d = 0, f = i.length;\n        f > d;\n        d++\n      )\n        (K = i[d]), L.push(new K(D));\n      return (j.bar = r = new b()), (H = []), (M = new m());\n    })(),\n    (j.stop = function () {\n      return (\n        j.trigger(\"stop\"),\n        (j.running = !1),\n        r.destroy(),\n        (s = !0),\n        null != p && (\"function\" == typeof t && t(p), (p = null)),\n        B()\n      );\n    }),\n    (j.restart = function () {\n      return j.trigger(\"restart\"), j.stop(), j.start();\n    }),\n    (j.go = function () {\n      var a;\n      return (\n        (j.running = !0),\n        r.render(),\n        (a = C()),\n        (s = !1),\n        (p = G(function (b, c) {\n          var d, e, f, g, h, i, k, l, n, o, p, q, t, u, v, w;\n          for (\n            l = 100 - r.progress, e = p = 0, f = !0, i = q = 0, u = L.length;\n            u > q;\n            i = ++q\n          )\n            for (\n              K = L[i],\n                o = null != H[i] ? H[i] : (H[i] = []),\n                h = null != (w = K.elements) ? w : [K],\n                k = t = 0,\n                v = h.length;\n              v > t;\n              k = ++t\n            )\n              (g = h[k]),\n                (n = null != o[k] ? o[k] : (o[k] = new m(g))),\n                (f &= n.done),\n                n.done || (e++, (p += n.tick(b)));\n          return (\n            (d = p / e),\n            r.update(M.tick(b, d)),\n            r.done() || f || s\n              ? (r.update(100),\n                j.trigger(\"done\"),\n                setTimeout(function () {\n                  return r.finish(), (j.running = !1), j.trigger(\"hide\");\n                }, Math.max(D.ghostTime, Math.max(D.minTime - (C() - a), 0))))\n              : c()\n          );\n        }))\n      );\n    }),\n    (j.start = function (a) {\n      v(D, a), (j.running = !0);\n      try {\n        r.render();\n      } catch (b) {\n        i = b;\n      }\n      return document.querySelector(\".pace\")\n        ? (j.trigger(\"start\"), j.go())\n        : setTimeout(j.start, 50);\n    }),\n    \"function\" == typeof define && define.amd\n      ? define([\"pace\"], function () {\n          return j;\n        })\n      : \"object\" == typeof exports\n      ? (module.exports = j)\n      : D.startOnPageLoad && j.start();\n}.call(this));\n","source":"assets/scripts/progress-bar.js","raw":"/*! pace 1.0.2 */\n(function () {\n  var a,\n    b,\n    c,\n    d,\n    e,\n    f,\n    g,\n    h,\n    i,\n    j,\n    k,\n    l,\n    m,\n    n,\n    o,\n    p,\n    q,\n    r,\n    s,\n    t,\n    u,\n    v,\n    w,\n    x,\n    y,\n    z,\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X = [].slice,\n    Y = {}.hasOwnProperty,\n    Z = function (a, b) {\n      function c() {\n        this.constructor = a;\n      }\n      for (var d in b) Y.call(b, d) && (a[d] = b[d]);\n      return (\n        (c.prototype = b.prototype),\n        (a.prototype = new c()),\n        (a.__super__ = b.prototype),\n        a\n      );\n    },\n    $ =\n      [].indexOf ||\n      function (a) {\n        for (var b = 0, c = this.length; c > b; b++)\n          if (b in this && this[b] === a) return b;\n        return -1;\n      };\n  for (\n    u = {\n      catchupTime: 100,\n      initialRate: 0.03,\n      minTime: 250,\n      ghostTime: 100,\n      maxProgressPerFrame: 20,\n      easeFactor: 1.25,\n      startOnPageLoad: !0,\n      restartOnPushState: !0,\n      restartOnRequestAfter: 500,\n      target: \"body\",\n      elements: { checkInterval: 100, selectors: [\"body\"] },\n      eventLag: { minSamples: 10, sampleCount: 3, lagThreshold: 3 },\n      ajax: { trackMethods: [\"GET\"], trackWebSockets: !0, ignoreURLs: [] },\n    },\n      C = function () {\n        var a;\n        return null !=\n          (a =\n            \"undefined\" != typeof performance &&\n            null !== performance &&\n            \"function\" == typeof performance.now\n              ? performance.now()\n              : void 0)\n          ? a\n          : +new Date();\n      },\n      E =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame,\n      t = window.cancelAnimationFrame || window.mozCancelAnimationFrame,\n      null == E &&\n        ((E = function (a) {\n          return setTimeout(a, 50);\n        }),\n        (t = function (a) {\n          return clearTimeout(a);\n        })),\n      G = function (a) {\n        var b, c;\n        return (\n          (b = C()),\n          (c = function () {\n            var d;\n            return (\n              (d = C() - b),\n              d >= 33\n                ? ((b = C()),\n                  a(d, function () {\n                    return E(c);\n                  }))\n                : setTimeout(c, 33 - d)\n            );\n          })()\n        );\n      },\n      F = function () {\n        var a, b, c;\n        return (\n          (c = arguments[0]),\n          (b = arguments[1]),\n          (a = 3 <= arguments.length ? X.call(arguments, 2) : []),\n          \"function\" == typeof c[b] ? c[b].apply(c, a) : c[b]\n        );\n      },\n      v = function () {\n        var a, b, c, d, e, f, g;\n        for (\n          b = arguments[0],\n            d = 2 <= arguments.length ? X.call(arguments, 1) : [],\n            f = 0,\n            g = d.length;\n          g > f;\n          f++\n        )\n          if ((c = d[f]))\n            for (a in c)\n              Y.call(c, a) &&\n                ((e = c[a]),\n                null != b[a] &&\n                \"object\" == typeof b[a] &&\n                null != e &&\n                \"object\" == typeof e\n                  ? v(b[a], e)\n                  : (b[a] = e));\n        return b;\n      },\n      q = function (a) {\n        var b, c, d, e, f;\n        for (c = b = 0, e = 0, f = a.length; f > e; e++)\n          (d = a[e]), (c += Math.abs(d)), b++;\n        return c / b;\n      },\n      x = function (a, b) {\n        var c, d, e;\n        if (\n          (null == a && (a = \"options\"),\n          null == b && (b = !0),\n          (e = document.querySelector(\"[data-pace-\" + a + \"]\")))\n        ) {\n          if (((c = e.getAttribute(\"data-pace-\" + a)), !b)) return c;\n          try {\n            return JSON.parse(c);\n          } catch (f) {\n            return (\n              (d = f),\n              \"undefined\" != typeof console && null !== console\n                ? console.error(\"Error parsing inline pace options\", d)\n                : void 0\n            );\n          }\n        }\n      },\n      g = (function () {\n        function a() {}\n        return (\n          (a.prototype.on = function (a, b, c, d) {\n            var e;\n            return (\n              null == d && (d = !1),\n              null == this.bindings && (this.bindings = {}),\n              null == (e = this.bindings)[a] && (e[a] = []),\n              this.bindings[a].push({ handler: b, ctx: c, once: d })\n            );\n          }),\n          (a.prototype.once = function (a, b, c) {\n            return this.on(a, b, c, !0);\n          }),\n          (a.prototype.off = function (a, b) {\n            var c, d, e;\n            if (null != (null != (d = this.bindings) ? d[a] : void 0)) {\n              if (null == b) return delete this.bindings[a];\n              for (c = 0, e = []; c < this.bindings[a].length; )\n                e.push(\n                  this.bindings[a][c].handler === b\n                    ? this.bindings[a].splice(c, 1)\n                    : c++\n                );\n              return e;\n            }\n          }),\n          (a.prototype.trigger = function () {\n            var a, b, c, d, e, f, g, h, i;\n            if (\n              ((c = arguments[0]),\n              (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n              null != (g = this.bindings) ? g[c] : void 0)\n            ) {\n              for (e = 0, i = []; e < this.bindings[c].length; )\n                (h = this.bindings[c][e]),\n                  (d = h.handler),\n                  (b = h.ctx),\n                  (f = h.once),\n                  d.apply(null != b ? b : this, a),\n                  i.push(f ? this.bindings[c].splice(e, 1) : e++);\n              return i;\n            }\n          }),\n          a\n        );\n      })(),\n      j = window.Pace || {},\n      window.Pace = j,\n      v(j, g.prototype),\n      D = j.options = v({}, u, window.paceOptions, x()),\n      U = [\"ajax\", \"document\", \"eventLag\", \"elements\"],\n      Q = 0,\n      S = U.length;\n    S > Q;\n    Q++\n  )\n    (K = U[Q]), D[K] === !0 && (D[K] = u[K]);\n  (i = (function (a) {\n    function b() {\n      return (V = b.__super__.constructor.apply(this, arguments));\n    }\n    return Z(b, a), b;\n  })(Error)),\n    (b = (function () {\n      function a() {\n        this.progress = 0;\n      }\n      return (\n        (a.prototype.getElement = function () {\n          var a;\n          if (null == this.el) {\n            if (((a = document.querySelector(D.target)), !a)) throw new i();\n            (this.el = document.createElement(\"div\")),\n              (this.el.className = \"pace pace-active\"),\n              (document.body.className = document.body.className.replace(\n                /pace-done/g,\n                \"\"\n              )),\n              (document.body.className += \" pace-running\"),\n              (this.el.innerHTML =\n                '<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>'),\n              null != a.firstChild\n                ? a.insertBefore(this.el, a.firstChild)\n                : a.appendChild(this.el);\n          }\n          return this.el;\n        }),\n        (a.prototype.finish = function () {\n          var a;\n          return (\n            (a = this.getElement()),\n            (a.className = a.className.replace(\"pace-active\", \"\")),\n            (a.className += \" pace-inactive\"),\n            (document.body.className = document.body.className.replace(\n              \"pace-running\",\n              \"\"\n            )),\n            (document.body.className += \" pace-done\")\n          );\n        }),\n        (a.prototype.update = function (a) {\n          return (this.progress = a), this.render();\n        }),\n        (a.prototype.destroy = function () {\n          try {\n            this.getElement().parentNode.removeChild(this.getElement());\n          } catch (a) {\n            i = a;\n          }\n          return (this.el = void 0);\n        }),\n        (a.prototype.render = function () {\n          var a, b, c, d, e, f, g;\n          if (null == document.querySelector(D.target)) return !1;\n          for (\n            a = this.getElement(),\n              d = \"translate3d(\" + this.progress + \"%, 0, 0)\",\n              g = [\"webkitTransform\", \"msTransform\", \"transform\"],\n              e = 0,\n              f = g.length;\n            f > e;\n            e++\n          )\n            (b = g[e]), (a.children[0].style[b] = d);\n          return (\n            (!this.lastRenderedProgress ||\n              this.lastRenderedProgress | (0 !== this.progress) | 0) &&\n              (a.children[0].setAttribute(\n                \"data-progress-text\",\n                \"\" + (0 | this.progress) + \"%\"\n              ),\n              this.progress >= 100\n                ? (c = \"99\")\n                : ((c = this.progress < 10 ? \"0\" : \"\"),\n                  (c += 0 | this.progress)),\n              a.children[0].setAttribute(\"data-progress\", \"\" + c)),\n            (this.lastRenderedProgress = this.progress)\n          );\n        }),\n        (a.prototype.done = function () {\n          return this.progress >= 100;\n        }),\n        a\n      );\n    })()),\n    (h = (function () {\n      function a() {\n        this.bindings = {};\n      }\n      return (\n        (a.prototype.trigger = function (a, b) {\n          var c, d, e, f, g;\n          if (null != this.bindings[a]) {\n            for (f = this.bindings[a], g = [], d = 0, e = f.length; e > d; d++)\n              (c = f[d]), g.push(c.call(this, b));\n            return g;\n          }\n        }),\n        (a.prototype.on = function (a, b) {\n          var c;\n          return (\n            null == (c = this.bindings)[a] && (c[a] = []),\n            this.bindings[a].push(b)\n          );\n        }),\n        a\n      );\n    })()),\n    (P = window.XMLHttpRequest),\n    (O = window.XDomainRequest),\n    (N = window.WebSocket),\n    (w = function (a, b) {\n      var c, d, e;\n      e = [];\n      for (d in b.prototype)\n        try {\n          e.push(\n            null == a[d] && \"function\" != typeof b[d]\n              ? \"function\" == typeof Object.defineProperty\n                ? Object.defineProperty(a, d, {\n                    get: function () {\n                      return b.prototype[d];\n                    },\n                    configurable: !0,\n                    enumerable: !0,\n                  })\n                : (a[d] = b.prototype[d])\n              : void 0\n          );\n        } catch (f) {\n          c = f;\n        }\n      return e;\n    }),\n    (A = []),\n    (j.ignore = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"ignore\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (j.track = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"track\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (J = function (a) {\n      var b;\n      if ((null == a && (a = \"GET\"), \"track\" === A[0])) return \"force\";\n      if (!A.length && D.ajax) {\n        if (\"socket\" === a && D.ajax.trackWebSockets) return !0;\n        if (((b = a.toUpperCase()), $.call(D.ajax.trackMethods, b) >= 0))\n          return !0;\n      }\n      return !1;\n    }),\n    (k = (function (a) {\n      function b() {\n        var a,\n          c = this;\n        b.__super__.constructor.apply(this, arguments),\n          (a = function (a) {\n            var b;\n            return (\n              (b = a.open),\n              (a.open = function (d, e) {\n                return (\n                  J(d) && c.trigger(\"request\", { type: d, url: e, request: a }),\n                  b.apply(a, arguments)\n                );\n              })\n            );\n          }),\n          (window.XMLHttpRequest = function (b) {\n            var c;\n            return (c = new P(b)), a(c), c;\n          });\n        try {\n          w(window.XMLHttpRequest, P);\n        } catch (d) {}\n        if (null != O) {\n          window.XDomainRequest = function () {\n            var b;\n            return (b = new O()), a(b), b;\n          };\n          try {\n            w(window.XDomainRequest, O);\n          } catch (d) {}\n        }\n        if (null != N && D.ajax.trackWebSockets) {\n          window.WebSocket = function (a, b) {\n            var d;\n            return (\n              (d = null != b ? new N(a, b) : new N(a)),\n              J(\"socket\") &&\n                c.trigger(\"request\", {\n                  type: \"socket\",\n                  url: a,\n                  protocols: b,\n                  request: d,\n                }),\n              d\n            );\n          };\n          try {\n            w(window.WebSocket, N);\n          } catch (d) {}\n        }\n      }\n      return Z(b, a), b;\n    })(h)),\n    (R = null),\n    (y = function () {\n      return null == R && (R = new k()), R;\n    }),\n    (I = function (a) {\n      var b, c, d, e;\n      for (e = D.ajax.ignoreURLs, c = 0, d = e.length; d > c; c++)\n        if (((b = e[c]), \"string\" == typeof b)) {\n          if (-1 !== a.indexOf(b)) return !0;\n        } else if (b.test(a)) return !0;\n      return !1;\n    }),\n    y().on(\"request\", function (b) {\n      var c, d, e, f, g;\n      return (\n        (f = b.type),\n        (e = b.request),\n        (g = b.url),\n        I(g)\n          ? void 0\n          : j.running || (D.restartOnRequestAfter === !1 && \"force\" !== J(f))\n          ? void 0\n          : ((d = arguments),\n            (c = D.restartOnRequestAfter || 0),\n            \"boolean\" == typeof c && (c = 0),\n            setTimeout(function () {\n              var b, c, g, h, i, k;\n              if (\n                (b =\n                  \"socket\" === f\n                    ? e.readyState < 2\n                    : 0 < (h = e.readyState) && 4 > h)\n              ) {\n                for (\n                  j.restart(), i = j.sources, k = [], c = 0, g = i.length;\n                  g > c;\n                  c++\n                ) {\n                  if (((K = i[c]), K instanceof a)) {\n                    K.watch.apply(K, d);\n                    break;\n                  }\n                  k.push(void 0);\n                }\n                return k;\n              }\n            }, c))\n      );\n    }),\n    (a = (function () {\n      function a() {\n        var a = this;\n        (this.elements = []),\n          y().on(\"request\", function () {\n            return a.watch.apply(a, arguments);\n          });\n      }\n      return (\n        (a.prototype.watch = function (a) {\n          var b, c, d, e;\n          return (\n            (d = a.type),\n            (b = a.request),\n            (e = a.url),\n            I(e)\n              ? void 0\n              : ((c = \"socket\" === d ? new n(b) : new o(b)),\n                this.elements.push(c))\n          );\n        }),\n        a\n      );\n    })()),\n    (o = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = this;\n        if (((this.progress = 0), null != window.ProgressEvent))\n          for (\n            c = null,\n              a.addEventListener(\n                \"progress\",\n                function (a) {\n                  return (h.progress = a.lengthComputable\n                    ? (100 * a.loaded) / a.total\n                    : h.progress + (100 - h.progress) / 2);\n                },\n                !1\n              ),\n              g = [\"load\", \"abort\", \"timeout\", \"error\"],\n              d = 0,\n              e = g.length;\n            e > d;\n            d++\n          )\n            (b = g[d]),\n              a.addEventListener(\n                b,\n                function () {\n                  return (h.progress = 100);\n                },\n                !1\n              );\n        else\n          (f = a.onreadystatechange),\n            (a.onreadystatechange = function () {\n              var b;\n              return (\n                0 === (b = a.readyState) || 4 === b\n                  ? (h.progress = 100)\n                  : 3 === a.readyState && (h.progress = 50),\n                \"function\" == typeof f ? f.apply(null, arguments) : void 0\n              );\n            });\n      }\n      return a;\n    })()),\n    (n = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f = this;\n        for (\n          this.progress = 0, e = [\"error\", \"open\"], c = 0, d = e.length;\n          d > c;\n          c++\n        )\n          (b = e[c]),\n            a.addEventListener(\n              b,\n              function () {\n                return (f.progress = 100);\n              },\n              !1\n            );\n      }\n      return a;\n    })()),\n    (d = (function () {\n      function a(a) {\n        var b, c, d, f;\n        for (\n          null == a && (a = {}),\n            this.elements = [],\n            null == a.selectors && (a.selectors = []),\n            f = a.selectors,\n            c = 0,\n            d = f.length;\n          d > c;\n          c++\n        )\n          (b = f[c]), this.elements.push(new e(b));\n      }\n      return a;\n    })()),\n    (e = (function () {\n      function a(a) {\n        (this.selector = a), (this.progress = 0), this.check();\n      }\n      return (\n        (a.prototype.check = function () {\n          var a = this;\n          return document.querySelector(this.selector)\n            ? this.done()\n            : setTimeout(function () {\n                return a.check();\n              }, D.elements.checkInterval);\n        }),\n        (a.prototype.done = function () {\n          return (this.progress = 100);\n        }),\n        a\n      );\n    })()),\n    (c = (function () {\n      function a() {\n        var a,\n          b,\n          c = this;\n        (this.progress =\n          null != (b = this.states[document.readyState]) ? b : 100),\n          (a = document.onreadystatechange),\n          (document.onreadystatechange = function () {\n            return (\n              null != c.states[document.readyState] &&\n                (c.progress = c.states[document.readyState]),\n              \"function\" == typeof a ? a.apply(null, arguments) : void 0\n            );\n          });\n      }\n      return (\n        (a.prototype.states = { loading: 0, interactive: 50, complete: 100 }), a\n      );\n    })()),\n    (f = (function () {\n      function a() {\n        var a,\n          b,\n          c,\n          d,\n          e,\n          f = this;\n        (this.progress = 0),\n          (a = 0),\n          (e = []),\n          (d = 0),\n          (c = C()),\n          (b = setInterval(function () {\n            var g;\n            return (\n              (g = C() - c - 50),\n              (c = C()),\n              e.push(g),\n              e.length > D.eventLag.sampleCount && e.shift(),\n              (a = q(e)),\n              ++d >= D.eventLag.minSamples && a < D.eventLag.lagThreshold\n                ? ((f.progress = 100), clearInterval(b))\n                : (f.progress = 100 * (3 / (a + 3)))\n            );\n          }, 50));\n      }\n      return a;\n    })()),\n    (m = (function () {\n      function a(a) {\n        (this.source = a),\n          (this.last = this.sinceLastUpdate = 0),\n          (this.rate = D.initialRate),\n          (this.catchup = 0),\n          (this.progress = this.lastProgress = 0),\n          null != this.source && (this.progress = F(this.source, \"progress\"));\n      }\n      return (\n        (a.prototype.tick = function (a, b) {\n          var c;\n          return (\n            null == b && (b = F(this.source, \"progress\")),\n            b >= 100 && (this.done = !0),\n            b === this.last\n              ? (this.sinceLastUpdate += a)\n              : (this.sinceLastUpdate &&\n                  (this.rate = (b - this.last) / this.sinceLastUpdate),\n                (this.catchup = (b - this.progress) / D.catchupTime),\n                (this.sinceLastUpdate = 0),\n                (this.last = b)),\n            b > this.progress && (this.progress += this.catchup * a),\n            (c = 1 - Math.pow(this.progress / 100, D.easeFactor)),\n            (this.progress += c * this.rate * a),\n            (this.progress = Math.min(\n              this.lastProgress + D.maxProgressPerFrame,\n              this.progress\n            )),\n            (this.progress = Math.max(0, this.progress)),\n            (this.progress = Math.min(100, this.progress)),\n            (this.lastProgress = this.progress),\n            this.progress\n          );\n        }),\n        a\n      );\n    })()),\n    (L = null),\n    (H = null),\n    (r = null),\n    (M = null),\n    (p = null),\n    (s = null),\n    (j.running = !1),\n    (z = function () {\n      return D.restartOnPushState ? j.restart() : void 0;\n    }),\n    null != window.history.pushState &&\n      ((T = window.history.pushState),\n      (window.history.pushState = function () {\n        return z(), T.apply(window.history, arguments);\n      })),\n    null != window.history.replaceState &&\n      ((W = window.history.replaceState),\n      (window.history.replaceState = function () {\n        return z(), W.apply(window.history, arguments);\n      })),\n    (l = { ajax: a, elements: d, document: c, eventLag: f }),\n    (B = function () {\n      var a, c, d, e, f, g, h, i;\n      for (\n        j.sources = L = [],\n          g = [\"ajax\", \"elements\", \"document\", \"eventLag\"],\n          c = 0,\n          e = g.length;\n        e > c;\n        c++\n      )\n        (a = g[c]), D[a] !== !1 && L.push(new l[a](D[a]));\n      for (\n        i = null != (h = D.extraSources) ? h : [], d = 0, f = i.length;\n        f > d;\n        d++\n      )\n        (K = i[d]), L.push(new K(D));\n      return (j.bar = r = new b()), (H = []), (M = new m());\n    })(),\n    (j.stop = function () {\n      return (\n        j.trigger(\"stop\"),\n        (j.running = !1),\n        r.destroy(),\n        (s = !0),\n        null != p && (\"function\" == typeof t && t(p), (p = null)),\n        B()\n      );\n    }),\n    (j.restart = function () {\n      return j.trigger(\"restart\"), j.stop(), j.start();\n    }),\n    (j.go = function () {\n      var a;\n      return (\n        (j.running = !0),\n        r.render(),\n        (a = C()),\n        (s = !1),\n        (p = G(function (b, c) {\n          var d, e, f, g, h, i, k, l, n, o, p, q, t, u, v, w;\n          for (\n            l = 100 - r.progress, e = p = 0, f = !0, i = q = 0, u = L.length;\n            u > q;\n            i = ++q\n          )\n            for (\n              K = L[i],\n                o = null != H[i] ? H[i] : (H[i] = []),\n                h = null != (w = K.elements) ? w : [K],\n                k = t = 0,\n                v = h.length;\n              v > t;\n              k = ++t\n            )\n              (g = h[k]),\n                (n = null != o[k] ? o[k] : (o[k] = new m(g))),\n                (f &= n.done),\n                n.done || (e++, (p += n.tick(b)));\n          return (\n            (d = p / e),\n            r.update(M.tick(b, d)),\n            r.done() || f || s\n              ? (r.update(100),\n                j.trigger(\"done\"),\n                setTimeout(function () {\n                  return r.finish(), (j.running = !1), j.trigger(\"hide\");\n                }, Math.max(D.ghostTime, Math.max(D.minTime - (C() - a), 0))))\n              : c()\n          );\n        }))\n      );\n    }),\n    (j.start = function (a) {\n      v(D, a), (j.running = !0);\n      try {\n        r.render();\n      } catch (b) {\n        i = b;\n      }\n      return document.querySelector(\".pace\")\n        ? (j.trigger(\"start\"), j.go())\n        : setTimeout(j.start, 50);\n    }),\n    \"function\" == typeof define && define.amd\n      ? define([\"pace\"], function () {\n          return j;\n        })\n      : \"object\" == typeof exports\n      ? (module.exports = j)\n      : D.startOnPageLoad && j.start();\n}.call(this));\n","date":"2022-11-05T06:34:15.449Z","updated":"2022-11-05T06:34:15.449Z","path":"assets/scripts/progress-bar.js","layout":"false","title":"","comments":1,"_id":"cla5g9yov000dwgoid0y6gnzv","content":"/*! pace 1.0.2 */\n(function () {\n  var a,\n    b,\n    c,\n    d,\n    e,\n    f,\n    g,\n    h,\n    i,\n    j,\n    k,\n    l,\n    m,\n    n,\n    o,\n    p,\n    q,\n    r,\n    s,\n    t,\n    u,\n    v,\n    w,\n    x,\n    y,\n    z,\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X = [].slice,\n    Y = {}.hasOwnProperty,\n    Z = function (a, b) {\n      function c() {\n        this.constructor = a;\n      }\n      for (var d in b) Y.call(b, d) && (a[d] = b[d]);\n      return (\n        (c.prototype = b.prototype),\n        (a.prototype = new c()),\n        (a.__super__ = b.prototype),\n        a\n      );\n    },\n    $ =\n      [].indexOf ||\n      function (a) {\n        for (var b = 0, c = this.length; c > b; b++)\n          if (b in this && this[b] === a) return b;\n        return -1;\n      };\n  for (\n    u = {\n      catchupTime: 100,\n      initialRate: 0.03,\n      minTime: 250,\n      ghostTime: 100,\n      maxProgressPerFrame: 20,\n      easeFactor: 1.25,\n      startOnPageLoad: !0,\n      restartOnPushState: !0,\n      restartOnRequestAfter: 500,\n      target: \"body\",\n      elements: { checkInterval: 100, selectors: [\"body\"] },\n      eventLag: { minSamples: 10, sampleCount: 3, lagThreshold: 3 },\n      ajax: { trackMethods: [\"GET\"], trackWebSockets: !0, ignoreURLs: [] },\n    },\n      C = function () {\n        var a;\n        return null !=\n          (a =\n            \"undefined\" != typeof performance &&\n            null !== performance &&\n            \"function\" == typeof performance.now\n              ? performance.now()\n              : void 0)\n          ? a\n          : +new Date();\n      },\n      E =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame,\n      t = window.cancelAnimationFrame || window.mozCancelAnimationFrame,\n      null == E &&\n        ((E = function (a) {\n          return setTimeout(a, 50);\n        }),\n        (t = function (a) {\n          return clearTimeout(a);\n        })),\n      G = function (a) {\n        var b, c;\n        return (\n          (b = C()),\n          (c = function () {\n            var d;\n            return (\n              (d = C() - b),\n              d >= 33\n                ? ((b = C()),\n                  a(d, function () {\n                    return E(c);\n                  }))\n                : setTimeout(c, 33 - d)\n            );\n          })()\n        );\n      },\n      F = function () {\n        var a, b, c;\n        return (\n          (c = arguments[0]),\n          (b = arguments[1]),\n          (a = 3 <= arguments.length ? X.call(arguments, 2) : []),\n          \"function\" == typeof c[b] ? c[b].apply(c, a) : c[b]\n        );\n      },\n      v = function () {\n        var a, b, c, d, e, f, g;\n        for (\n          b = arguments[0],\n            d = 2 <= arguments.length ? X.call(arguments, 1) : [],\n            f = 0,\n            g = d.length;\n          g > f;\n          f++\n        )\n          if ((c = d[f]))\n            for (a in c)\n              Y.call(c, a) &&\n                ((e = c[a]),\n                null != b[a] &&\n                \"object\" == typeof b[a] &&\n                null != e &&\n                \"object\" == typeof e\n                  ? v(b[a], e)\n                  : (b[a] = e));\n        return b;\n      },\n      q = function (a) {\n        var b, c, d, e, f;\n        for (c = b = 0, e = 0, f = a.length; f > e; e++)\n          (d = a[e]), (c += Math.abs(d)), b++;\n        return c / b;\n      },\n      x = function (a, b) {\n        var c, d, e;\n        if (\n          (null == a && (a = \"options\"),\n          null == b && (b = !0),\n          (e = document.querySelector(\"[data-pace-\" + a + \"]\")))\n        ) {\n          if (((c = e.getAttribute(\"data-pace-\" + a)), !b)) return c;\n          try {\n            return JSON.parse(c);\n          } catch (f) {\n            return (\n              (d = f),\n              \"undefined\" != typeof console && null !== console\n                ? console.error(\"Error parsing inline pace options\", d)\n                : void 0\n            );\n          }\n        }\n      },\n      g = (function () {\n        function a() {}\n        return (\n          (a.prototype.on = function (a, b, c, d) {\n            var e;\n            return (\n              null == d && (d = !1),\n              null == this.bindings && (this.bindings = {}),\n              null == (e = this.bindings)[a] && (e[a] = []),\n              this.bindings[a].push({ handler: b, ctx: c, once: d })\n            );\n          }),\n          (a.prototype.once = function (a, b, c) {\n            return this.on(a, b, c, !0);\n          }),\n          (a.prototype.off = function (a, b) {\n            var c, d, e;\n            if (null != (null != (d = this.bindings) ? d[a] : void 0)) {\n              if (null == b) return delete this.bindings[a];\n              for (c = 0, e = []; c < this.bindings[a].length; )\n                e.push(\n                  this.bindings[a][c].handler === b\n                    ? this.bindings[a].splice(c, 1)\n                    : c++\n                );\n              return e;\n            }\n          }),\n          (a.prototype.trigger = function () {\n            var a, b, c, d, e, f, g, h, i;\n            if (\n              ((c = arguments[0]),\n              (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n              null != (g = this.bindings) ? g[c] : void 0)\n            ) {\n              for (e = 0, i = []; e < this.bindings[c].length; )\n                (h = this.bindings[c][e]),\n                  (d = h.handler),\n                  (b = h.ctx),\n                  (f = h.once),\n                  d.apply(null != b ? b : this, a),\n                  i.push(f ? this.bindings[c].splice(e, 1) : e++);\n              return i;\n            }\n          }),\n          a\n        );\n      })(),\n      j = window.Pace || {},\n      window.Pace = j,\n      v(j, g.prototype),\n      D = j.options = v({}, u, window.paceOptions, x()),\n      U = [\"ajax\", \"document\", \"eventLag\", \"elements\"],\n      Q = 0,\n      S = U.length;\n    S > Q;\n    Q++\n  )\n    (K = U[Q]), D[K] === !0 && (D[K] = u[K]);\n  (i = (function (a) {\n    function b() {\n      return (V = b.__super__.constructor.apply(this, arguments));\n    }\n    return Z(b, a), b;\n  })(Error)),\n    (b = (function () {\n      function a() {\n        this.progress = 0;\n      }\n      return (\n        (a.prototype.getElement = function () {\n          var a;\n          if (null == this.el) {\n            if (((a = document.querySelector(D.target)), !a)) throw new i();\n            (this.el = document.createElement(\"div\")),\n              (this.el.className = \"pace pace-active\"),\n              (document.body.className = document.body.className.replace(\n                /pace-done/g,\n                \"\"\n              )),\n              (document.body.className += \" pace-running\"),\n              (this.el.innerHTML =\n                '<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>'),\n              null != a.firstChild\n                ? a.insertBefore(this.el, a.firstChild)\n                : a.appendChild(this.el);\n          }\n          return this.el;\n        }),\n        (a.prototype.finish = function () {\n          var a;\n          return (\n            (a = this.getElement()),\n            (a.className = a.className.replace(\"pace-active\", \"\")),\n            (a.className += \" pace-inactive\"),\n            (document.body.className = document.body.className.replace(\n              \"pace-running\",\n              \"\"\n            )),\n            (document.body.className += \" pace-done\")\n          );\n        }),\n        (a.prototype.update = function (a) {\n          return (this.progress = a), this.render();\n        }),\n        (a.prototype.destroy = function () {\n          try {\n            this.getElement().parentNode.removeChild(this.getElement());\n          } catch (a) {\n            i = a;\n          }\n          return (this.el = void 0);\n        }),\n        (a.prototype.render = function () {\n          var a, b, c, d, e, f, g;\n          if (null == document.querySelector(D.target)) return !1;\n          for (\n            a = this.getElement(),\n              d = \"translate3d(\" + this.progress + \"%, 0, 0)\",\n              g = [\"webkitTransform\", \"msTransform\", \"transform\"],\n              e = 0,\n              f = g.length;\n            f > e;\n            e++\n          )\n            (b = g[e]), (a.children[0].style[b] = d);\n          return (\n            (!this.lastRenderedProgress ||\n              this.lastRenderedProgress | (0 !== this.progress) | 0) &&\n              (a.children[0].setAttribute(\n                \"data-progress-text\",\n                \"\" + (0 | this.progress) + \"%\"\n              ),\n              this.progress >= 100\n                ? (c = \"99\")\n                : ((c = this.progress < 10 ? \"0\" : \"\"),\n                  (c += 0 | this.progress)),\n              a.children[0].setAttribute(\"data-progress\", \"\" + c)),\n            (this.lastRenderedProgress = this.progress)\n          );\n        }),\n        (a.prototype.done = function () {\n          return this.progress >= 100;\n        }),\n        a\n      );\n    })()),\n    (h = (function () {\n      function a() {\n        this.bindings = {};\n      }\n      return (\n        (a.prototype.trigger = function (a, b) {\n          var c, d, e, f, g;\n          if (null != this.bindings[a]) {\n            for (f = this.bindings[a], g = [], d = 0, e = f.length; e > d; d++)\n              (c = f[d]), g.push(c.call(this, b));\n            return g;\n          }\n        }),\n        (a.prototype.on = function (a, b) {\n          var c;\n          return (\n            null == (c = this.bindings)[a] && (c[a] = []),\n            this.bindings[a].push(b)\n          );\n        }),\n        a\n      );\n    })()),\n    (P = window.XMLHttpRequest),\n    (O = window.XDomainRequest),\n    (N = window.WebSocket),\n    (w = function (a, b) {\n      var c, d, e;\n      e = [];\n      for (d in b.prototype)\n        try {\n          e.push(\n            null == a[d] && \"function\" != typeof b[d]\n              ? \"function\" == typeof Object.defineProperty\n                ? Object.defineProperty(a, d, {\n                    get: function () {\n                      return b.prototype[d];\n                    },\n                    configurable: !0,\n                    enumerable: !0,\n                  })\n                : (a[d] = b.prototype[d])\n              : void 0\n          );\n        } catch (f) {\n          c = f;\n        }\n      return e;\n    }),\n    (A = []),\n    (j.ignore = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"ignore\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (j.track = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"track\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (J = function (a) {\n      var b;\n      if ((null == a && (a = \"GET\"), \"track\" === A[0])) return \"force\";\n      if (!A.length && D.ajax) {\n        if (\"socket\" === a && D.ajax.trackWebSockets) return !0;\n        if (((b = a.toUpperCase()), $.call(D.ajax.trackMethods, b) >= 0))\n          return !0;\n      }\n      return !1;\n    }),\n    (k = (function (a) {\n      function b() {\n        var a,\n          c = this;\n        b.__super__.constructor.apply(this, arguments),\n          (a = function (a) {\n            var b;\n            return (\n              (b = a.open),\n              (a.open = function (d, e) {\n                return (\n                  J(d) && c.trigger(\"request\", { type: d, url: e, request: a }),\n                  b.apply(a, arguments)\n                );\n              })\n            );\n          }),\n          (window.XMLHttpRequest = function (b) {\n            var c;\n            return (c = new P(b)), a(c), c;\n          });\n        try {\n          w(window.XMLHttpRequest, P);\n        } catch (d) {}\n        if (null != O) {\n          window.XDomainRequest = function () {\n            var b;\n            return (b = new O()), a(b), b;\n          };\n          try {\n            w(window.XDomainRequest, O);\n          } catch (d) {}\n        }\n        if (null != N && D.ajax.trackWebSockets) {\n          window.WebSocket = function (a, b) {\n            var d;\n            return (\n              (d = null != b ? new N(a, b) : new N(a)),\n              J(\"socket\") &&\n                c.trigger(\"request\", {\n                  type: \"socket\",\n                  url: a,\n                  protocols: b,\n                  request: d,\n                }),\n              d\n            );\n          };\n          try {\n            w(window.WebSocket, N);\n          } catch (d) {}\n        }\n      }\n      return Z(b, a), b;\n    })(h)),\n    (R = null),\n    (y = function () {\n      return null == R && (R = new k()), R;\n    }),\n    (I = function (a) {\n      var b, c, d, e;\n      for (e = D.ajax.ignoreURLs, c = 0, d = e.length; d > c; c++)\n        if (((b = e[c]), \"string\" == typeof b)) {\n          if (-1 !== a.indexOf(b)) return !0;\n        } else if (b.test(a)) return !0;\n      return !1;\n    }),\n    y().on(\"request\", function (b) {\n      var c, d, e, f, g;\n      return (\n        (f = b.type),\n        (e = b.request),\n        (g = b.url),\n        I(g)\n          ? void 0\n          : j.running || (D.restartOnRequestAfter === !1 && \"force\" !== J(f))\n          ? void 0\n          : ((d = arguments),\n            (c = D.restartOnRequestAfter || 0),\n            \"boolean\" == typeof c && (c = 0),\n            setTimeout(function () {\n              var b, c, g, h, i, k;\n              if (\n                (b =\n                  \"socket\" === f\n                    ? e.readyState < 2\n                    : 0 < (h = e.readyState) && 4 > h)\n              ) {\n                for (\n                  j.restart(), i = j.sources, k = [], c = 0, g = i.length;\n                  g > c;\n                  c++\n                ) {\n                  if (((K = i[c]), K instanceof a)) {\n                    K.watch.apply(K, d);\n                    break;\n                  }\n                  k.push(void 0);\n                }\n                return k;\n              }\n            }, c))\n      );\n    }),\n    (a = (function () {\n      function a() {\n        var a = this;\n        (this.elements = []),\n          y().on(\"request\", function () {\n            return a.watch.apply(a, arguments);\n          });\n      }\n      return (\n        (a.prototype.watch = function (a) {\n          var b, c, d, e;\n          return (\n            (d = a.type),\n            (b = a.request),\n            (e = a.url),\n            I(e)\n              ? void 0\n              : ((c = \"socket\" === d ? new n(b) : new o(b)),\n                this.elements.push(c))\n          );\n        }),\n        a\n      );\n    })()),\n    (o = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = this;\n        if (((this.progress = 0), null != window.ProgressEvent))\n          for (\n            c = null,\n              a.addEventListener(\n                \"progress\",\n                function (a) {\n                  return (h.progress = a.lengthComputable\n                    ? (100 * a.loaded) / a.total\n                    : h.progress + (100 - h.progress) / 2);\n                },\n                !1\n              ),\n              g = [\"load\", \"abort\", \"timeout\", \"error\"],\n              d = 0,\n              e = g.length;\n            e > d;\n            d++\n          )\n            (b = g[d]),\n              a.addEventListener(\n                b,\n                function () {\n                  return (h.progress = 100);\n                },\n                !1\n              );\n        else\n          (f = a.onreadystatechange),\n            (a.onreadystatechange = function () {\n              var b;\n              return (\n                0 === (b = a.readyState) || 4 === b\n                  ? (h.progress = 100)\n                  : 3 === a.readyState && (h.progress = 50),\n                \"function\" == typeof f ? f.apply(null, arguments) : void 0\n              );\n            });\n      }\n      return a;\n    })()),\n    (n = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f = this;\n        for (\n          this.progress = 0, e = [\"error\", \"open\"], c = 0, d = e.length;\n          d > c;\n          c++\n        )\n          (b = e[c]),\n            a.addEventListener(\n              b,\n              function () {\n                return (f.progress = 100);\n              },\n              !1\n            );\n      }\n      return a;\n    })()),\n    (d = (function () {\n      function a(a) {\n        var b, c, d, f;\n        for (\n          null == a && (a = {}),\n            this.elements = [],\n            null == a.selectors && (a.selectors = []),\n            f = a.selectors,\n            c = 0,\n            d = f.length;\n          d > c;\n          c++\n        )\n          (b = f[c]), this.elements.push(new e(b));\n      }\n      return a;\n    })()),\n    (e = (function () {\n      function a(a) {\n        (this.selector = a), (this.progress = 0), this.check();\n      }\n      return (\n        (a.prototype.check = function () {\n          var a = this;\n          return document.querySelector(this.selector)\n            ? this.done()\n            : setTimeout(function () {\n                return a.check();\n              }, D.elements.checkInterval);\n        }),\n        (a.prototype.done = function () {\n          return (this.progress = 100);\n        }),\n        a\n      );\n    })()),\n    (c = (function () {\n      function a() {\n        var a,\n          b,\n          c = this;\n        (this.progress =\n          null != (b = this.states[document.readyState]) ? b : 100),\n          (a = document.onreadystatechange),\n          (document.onreadystatechange = function () {\n            return (\n              null != c.states[document.readyState] &&\n                (c.progress = c.states[document.readyState]),\n              \"function\" == typeof a ? a.apply(null, arguments) : void 0\n            );\n          });\n      }\n      return (\n        (a.prototype.states = { loading: 0, interactive: 50, complete: 100 }), a\n      );\n    })()),\n    (f = (function () {\n      function a() {\n        var a,\n          b,\n          c,\n          d,\n          e,\n          f = this;\n        (this.progress = 0),\n          (a = 0),\n          (e = []),\n          (d = 0),\n          (c = C()),\n          (b = setInterval(function () {\n            var g;\n            return (\n              (g = C() - c - 50),\n              (c = C()),\n              e.push(g),\n              e.length > D.eventLag.sampleCount && e.shift(),\n              (a = q(e)),\n              ++d >= D.eventLag.minSamples && a < D.eventLag.lagThreshold\n                ? ((f.progress = 100), clearInterval(b))\n                : (f.progress = 100 * (3 / (a + 3)))\n            );\n          }, 50));\n      }\n      return a;\n    })()),\n    (m = (function () {\n      function a(a) {\n        (this.source = a),\n          (this.last = this.sinceLastUpdate = 0),\n          (this.rate = D.initialRate),\n          (this.catchup = 0),\n          (this.progress = this.lastProgress = 0),\n          null != this.source && (this.progress = F(this.source, \"progress\"));\n      }\n      return (\n        (a.prototype.tick = function (a, b) {\n          var c;\n          return (\n            null == b && (b = F(this.source, \"progress\")),\n            b >= 100 && (this.done = !0),\n            b === this.last\n              ? (this.sinceLastUpdate += a)\n              : (this.sinceLastUpdate &&\n                  (this.rate = (b - this.last) / this.sinceLastUpdate),\n                (this.catchup = (b - this.progress) / D.catchupTime),\n                (this.sinceLastUpdate = 0),\n                (this.last = b)),\n            b > this.progress && (this.progress += this.catchup * a),\n            (c = 1 - Math.pow(this.progress / 100, D.easeFactor)),\n            (this.progress += c * this.rate * a),\n            (this.progress = Math.min(\n              this.lastProgress + D.maxProgressPerFrame,\n              this.progress\n            )),\n            (this.progress = Math.max(0, this.progress)),\n            (this.progress = Math.min(100, this.progress)),\n            (this.lastProgress = this.progress),\n            this.progress\n          );\n        }),\n        a\n      );\n    })()),\n    (L = null),\n    (H = null),\n    (r = null),\n    (M = null),\n    (p = null),\n    (s = null),\n    (j.running = !1),\n    (z = function () {\n      return D.restartOnPushState ? j.restart() : void 0;\n    }),\n    null != window.history.pushState &&\n      ((T = window.history.pushState),\n      (window.history.pushState = function () {\n        return z(), T.apply(window.history, arguments);\n      })),\n    null != window.history.replaceState &&\n      ((W = window.history.replaceState),\n      (window.history.replaceState = function () {\n        return z(), W.apply(window.history, arguments);\n      })),\n    (l = { ajax: a, elements: d, document: c, eventLag: f }),\n    (B = function () {\n      var a, c, d, e, f, g, h, i;\n      for (\n        j.sources = L = [],\n          g = [\"ajax\", \"elements\", \"document\", \"eventLag\"],\n          c = 0,\n          e = g.length;\n        e > c;\n        c++\n      )\n        (a = g[c]), D[a] !== !1 && L.push(new l[a](D[a]));\n      for (\n        i = null != (h = D.extraSources) ? h : [], d = 0, f = i.length;\n        f > d;\n        d++\n      )\n        (K = i[d]), L.push(new K(D));\n      return (j.bar = r = new b()), (H = []), (M = new m());\n    })(),\n    (j.stop = function () {\n      return (\n        j.trigger(\"stop\"),\n        (j.running = !1),\n        r.destroy(),\n        (s = !0),\n        null != p && (\"function\" == typeof t && t(p), (p = null)),\n        B()\n      );\n    }),\n    (j.restart = function () {\n      return j.trigger(\"restart\"), j.stop(), j.start();\n    }),\n    (j.go = function () {\n      var a;\n      return (\n        (j.running = !0),\n        r.render(),\n        (a = C()),\n        (s = !1),\n        (p = G(function (b, c) {\n          var d, e, f, g, h, i, k, l, n, o, p, q, t, u, v, w;\n          for (\n            l = 100 - r.progress, e = p = 0, f = !0, i = q = 0, u = L.length;\n            u > q;\n            i = ++q\n          )\n            for (\n              K = L[i],\n                o = null != H[i] ? H[i] : (H[i] = []),\n                h = null != (w = K.elements) ? w : [K],\n                k = t = 0,\n                v = h.length;\n              v > t;\n              k = ++t\n            )\n              (g = h[k]),\n                (n = null != o[k] ? o[k] : (o[k] = new m(g))),\n                (f &= n.done),\n                n.done || (e++, (p += n.tick(b)));\n          return (\n            (d = p / e),\n            r.update(M.tick(b, d)),\n            r.done() || f || s\n              ? (r.update(100),\n                j.trigger(\"done\"),\n                setTimeout(function () {\n                  return r.finish(), (j.running = !1), j.trigger(\"hide\");\n                }, Math.max(D.ghostTime, Math.max(D.minTime - (C() - a), 0))))\n              : c()\n          );\n        }))\n      );\n    }),\n    (j.start = function (a) {\n      v(D, a), (j.running = !0);\n      try {\n        r.render();\n      } catch (b) {\n        i = b;\n      }\n      return document.querySelector(\".pace\")\n        ? (j.trigger(\"start\"), j.go())\n        : setTimeout(j.start, 50);\n    }),\n    \"function\" == typeof define && define.amd\n      ? define([\"pace\"], function () {\n          return j;\n        })\n      : \"object\" == typeof exports\n      ? (module.exports = j)\n      : D.startOnPageLoad && j.start();\n}.call(this));\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"/*! pace 1.0.2 */\n(function () {\n  var a,\n    b,\n    c,\n    d,\n    e,\n    f,\n    g,\n    h,\n    i,\n    j,\n    k,\n    l,\n    m,\n    n,\n    o,\n    p,\n    q,\n    r,\n    s,\n    t,\n    u,\n    v,\n    w,\n    x,\n    y,\n    z,\n    A,\n    B,\n    C,\n    D,\n    E,\n    F,\n    G,\n    H,\n    I,\n    J,\n    K,\n    L,\n    M,\n    N,\n    O,\n    P,\n    Q,\n    R,\n    S,\n    T,\n    U,\n    V,\n    W,\n    X = [].slice,\n    Y = {}.hasOwnProperty,\n    Z = function (a, b) {\n      function c() {\n        this.constructor = a;\n      }\n      for (var d in b) Y.call(b, d) && (a[d] = b[d]);\n      return (\n        (c.prototype = b.prototype),\n        (a.prototype = new c()),\n        (a.__super__ = b.prototype),\n        a\n      );\n    },\n    $ =\n      [].indexOf ||\n      function (a) {\n        for (var b = 0, c = this.length; c > b; b++)\n          if (b in this && this[b] === a) return b;\n        return -1;\n      };\n  for (\n    u = {\n      catchupTime: 100,\n      initialRate: 0.03,\n      minTime: 250,\n      ghostTime: 100,\n      maxProgressPerFrame: 20,\n      easeFactor: 1.25,\n      startOnPageLoad: !0,\n      restartOnPushState: !0,\n      restartOnRequestAfter: 500,\n      target: \"body\",\n      elements: { checkInterval: 100, selectors: [\"body\"] },\n      eventLag: { minSamples: 10, sampleCount: 3, lagThreshold: 3 },\n      ajax: { trackMethods: [\"GET\"], trackWebSockets: !0, ignoreURLs: [] },\n    },\n      C = function () {\n        var a;\n        return null !=\n          (a =\n            \"undefined\" != typeof performance &&\n            null !== performance &&\n            \"function\" == typeof performance.now\n              ? performance.now()\n              : void 0)\n          ? a\n          : +new Date();\n      },\n      E =\n        window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        window.msRequestAnimationFrame,\n      t = window.cancelAnimationFrame || window.mozCancelAnimationFrame,\n      null == E &&\n        ((E = function (a) {\n          return setTimeout(a, 50);\n        }),\n        (t = function (a) {\n          return clearTimeout(a);\n        })),\n      G = function (a) {\n        var b, c;\n        return (\n          (b = C()),\n          (c = function () {\n            var d;\n            return (\n              (d = C() - b),\n              d >= 33\n                ? ((b = C()),\n                  a(d, function () {\n                    return E(c);\n                  }))\n                : setTimeout(c, 33 - d)\n            );\n          })()\n        );\n      },\n      F = function () {\n        var a, b, c;\n        return (\n          (c = arguments[0]),\n          (b = arguments[1]),\n          (a = 3 <= arguments.length ? X.call(arguments, 2) : []),\n          \"function\" == typeof c[b] ? c[b].apply(c, a) : c[b]\n        );\n      },\n      v = function () {\n        var a, b, c, d, e, f, g;\n        for (\n          b = arguments[0],\n            d = 2 <= arguments.length ? X.call(arguments, 1) : [],\n            f = 0,\n            g = d.length;\n          g > f;\n          f++\n        )\n          if ((c = d[f]))\n            for (a in c)\n              Y.call(c, a) &&\n                ((e = c[a]),\n                null != b[a] &&\n                \"object\" == typeof b[a] &&\n                null != e &&\n                \"object\" == typeof e\n                  ? v(b[a], e)\n                  : (b[a] = e));\n        return b;\n      },\n      q = function (a) {\n        var b, c, d, e, f;\n        for (c = b = 0, e = 0, f = a.length; f > e; e++)\n          (d = a[e]), (c += Math.abs(d)), b++;\n        return c / b;\n      },\n      x = function (a, b) {\n        var c, d, e;\n        if (\n          (null == a && (a = \"options\"),\n          null == b && (b = !0),\n          (e = document.querySelector(\"[data-pace-\" + a + \"]\")))\n        ) {\n          if (((c = e.getAttribute(\"data-pace-\" + a)), !b)) return c;\n          try {\n            return JSON.parse(c);\n          } catch (f) {\n            return (\n              (d = f),\n              \"undefined\" != typeof console && null !== console\n                ? console.error(\"Error parsing inline pace options\", d)\n                : void 0\n            );\n          }\n        }\n      },\n      g = (function () {\n        function a() {}\n        return (\n          (a.prototype.on = function (a, b, c, d) {\n            var e;\n            return (\n              null == d && (d = !1),\n              null == this.bindings && (this.bindings = {}),\n              null == (e = this.bindings)[a] && (e[a] = []),\n              this.bindings[a].push({ handler: b, ctx: c, once: d })\n            );\n          }),\n          (a.prototype.once = function (a, b, c) {\n            return this.on(a, b, c, !0);\n          }),\n          (a.prototype.off = function (a, b) {\n            var c, d, e;\n            if (null != (null != (d = this.bindings) ? d[a] : void 0)) {\n              if (null == b) return delete this.bindings[a];\n              for (c = 0, e = []; c < this.bindings[a].length; )\n                e.push(\n                  this.bindings[a][c].handler === b\n                    ? this.bindings[a].splice(c, 1)\n                    : c++\n                );\n              return e;\n            }\n          }),\n          (a.prototype.trigger = function () {\n            var a, b, c, d, e, f, g, h, i;\n            if (\n              ((c = arguments[0]),\n              (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n              null != (g = this.bindings) ? g[c] : void 0)\n            ) {\n              for (e = 0, i = []; e < this.bindings[c].length; )\n                (h = this.bindings[c][e]),\n                  (d = h.handler),\n                  (b = h.ctx),\n                  (f = h.once),\n                  d.apply(null != b ? b : this, a),\n                  i.push(f ? this.bindings[c].splice(e, 1) : e++);\n              return i;\n            }\n          }),\n          a\n        );\n      })(),\n      j = window.Pace || {},\n      window.Pace = j,\n      v(j, g.prototype),\n      D = j.options = v({}, u, window.paceOptions, x()),\n      U = [\"ajax\", \"document\", \"eventLag\", \"elements\"],\n      Q = 0,\n      S = U.length;\n    S > Q;\n    Q++\n  )\n    (K = U[Q]), D[K] === !0 && (D[K] = u[K]);\n  (i = (function (a) {\n    function b() {\n      return (V = b.__super__.constructor.apply(this, arguments));\n    }\n    return Z(b, a), b;\n  })(Error)),\n    (b = (function () {\n      function a() {\n        this.progress = 0;\n      }\n      return (\n        (a.prototype.getElement = function () {\n          var a;\n          if (null == this.el) {\n            if (((a = document.querySelector(D.target)), !a)) throw new i();\n            (this.el = document.createElement(\"div\")),\n              (this.el.className = \"pace pace-active\"),\n              (document.body.className = document.body.className.replace(\n                /pace-done/g,\n                \"\"\n              )),\n              (document.body.className += \" pace-running\"),\n              (this.el.innerHTML =\n                '<div class=\"pace-progress\">\\n  <div class=\"pace-progress-inner\"></div>\\n</div>\\n<div class=\"pace-activity\"></div>'),\n              null != a.firstChild\n                ? a.insertBefore(this.el, a.firstChild)\n                : a.appendChild(this.el);\n          }\n          return this.el;\n        }),\n        (a.prototype.finish = function () {\n          var a;\n          return (\n            (a = this.getElement()),\n            (a.className = a.className.replace(\"pace-active\", \"\")),\n            (a.className += \" pace-inactive\"),\n            (document.body.className = document.body.className.replace(\n              \"pace-running\",\n              \"\"\n            )),\n            (document.body.className += \" pace-done\")\n          );\n        }),\n        (a.prototype.update = function (a) {\n          return (this.progress = a), this.render();\n        }),\n        (a.prototype.destroy = function () {\n          try {\n            this.getElement().parentNode.removeChild(this.getElement());\n          } catch (a) {\n            i = a;\n          }\n          return (this.el = void 0);\n        }),\n        (a.prototype.render = function () {\n          var a, b, c, d, e, f, g;\n          if (null == document.querySelector(D.target)) return !1;\n          for (\n            a = this.getElement(),\n              d = \"translate3d(\" + this.progress + \"%, 0, 0)\",\n              g = [\"webkitTransform\", \"msTransform\", \"transform\"],\n              e = 0,\n              f = g.length;\n            f > e;\n            e++\n          )\n            (b = g[e]), (a.children[0].style[b] = d);\n          return (\n            (!this.lastRenderedProgress ||\n              this.lastRenderedProgress | (0 !== this.progress) | 0) &&\n              (a.children[0].setAttribute(\n                \"data-progress-text\",\n                \"\" + (0 | this.progress) + \"%\"\n              ),\n              this.progress >= 100\n                ? (c = \"99\")\n                : ((c = this.progress < 10 ? \"0\" : \"\"),\n                  (c += 0 | this.progress)),\n              a.children[0].setAttribute(\"data-progress\", \"\" + c)),\n            (this.lastRenderedProgress = this.progress)\n          );\n        }),\n        (a.prototype.done = function () {\n          return this.progress >= 100;\n        }),\n        a\n      );\n    })()),\n    (h = (function () {\n      function a() {\n        this.bindings = {};\n      }\n      return (\n        (a.prototype.trigger = function (a, b) {\n          var c, d, e, f, g;\n          if (null != this.bindings[a]) {\n            for (f = this.bindings[a], g = [], d = 0, e = f.length; e > d; d++)\n              (c = f[d]), g.push(c.call(this, b));\n            return g;\n          }\n        }),\n        (a.prototype.on = function (a, b) {\n          var c;\n          return (\n            null == (c = this.bindings)[a] && (c[a] = []),\n            this.bindings[a].push(b)\n          );\n        }),\n        a\n      );\n    })()),\n    (P = window.XMLHttpRequest),\n    (O = window.XDomainRequest),\n    (N = window.WebSocket),\n    (w = function (a, b) {\n      var c, d, e;\n      e = [];\n      for (d in b.prototype)\n        try {\n          e.push(\n            null == a[d] && \"function\" != typeof b[d]\n              ? \"function\" == typeof Object.defineProperty\n                ? Object.defineProperty(a, d, {\n                    get: function () {\n                      return b.prototype[d];\n                    },\n                    configurable: !0,\n                    enumerable: !0,\n                  })\n                : (a[d] = b.prototype[d])\n              : void 0\n          );\n        } catch (f) {\n          c = f;\n        }\n      return e;\n    }),\n    (A = []),\n    (j.ignore = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"ignore\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (j.track = function () {\n      var a, b, c;\n      return (\n        (b = arguments[0]),\n        (a = 2 <= arguments.length ? X.call(arguments, 1) : []),\n        A.unshift(\"track\"),\n        (c = b.apply(null, a)),\n        A.shift(),\n        c\n      );\n    }),\n    (J = function (a) {\n      var b;\n      if ((null == a && (a = \"GET\"), \"track\" === A[0])) return \"force\";\n      if (!A.length && D.ajax) {\n        if (\"socket\" === a && D.ajax.trackWebSockets) return !0;\n        if (((b = a.toUpperCase()), $.call(D.ajax.trackMethods, b) >= 0))\n          return !0;\n      }\n      return !1;\n    }),\n    (k = (function (a) {\n      function b() {\n        var a,\n          c = this;\n        b.__super__.constructor.apply(this, arguments),\n          (a = function (a) {\n            var b;\n            return (\n              (b = a.open),\n              (a.open = function (d, e) {\n                return (\n                  J(d) && c.trigger(\"request\", { type: d, url: e, request: a }),\n                  b.apply(a, arguments)\n                );\n              })\n            );\n          }),\n          (window.XMLHttpRequest = function (b) {\n            var c;\n            return (c = new P(b)), a(c), c;\n          });\n        try {\n          w(window.XMLHttpRequest, P);\n        } catch (d) {}\n        if (null != O) {\n          window.XDomainRequest = function () {\n            var b;\n            return (b = new O()), a(b), b;\n          };\n          try {\n            w(window.XDomainRequest, O);\n          } catch (d) {}\n        }\n        if (null != N && D.ajax.trackWebSockets) {\n          window.WebSocket = function (a, b) {\n            var d;\n            return (\n              (d = null != b ? new N(a, b) : new N(a)),\n              J(\"socket\") &&\n                c.trigger(\"request\", {\n                  type: \"socket\",\n                  url: a,\n                  protocols: b,\n                  request: d,\n                }),\n              d\n            );\n          };\n          try {\n            w(window.WebSocket, N);\n          } catch (d) {}\n        }\n      }\n      return Z(b, a), b;\n    })(h)),\n    (R = null),\n    (y = function () {\n      return null == R && (R = new k()), R;\n    }),\n    (I = function (a) {\n      var b, c, d, e;\n      for (e = D.ajax.ignoreURLs, c = 0, d = e.length; d > c; c++)\n        if (((b = e[c]), \"string\" == typeof b)) {\n          if (-1 !== a.indexOf(b)) return !0;\n        } else if (b.test(a)) return !0;\n      return !1;\n    }),\n    y().on(\"request\", function (b) {\n      var c, d, e, f, g;\n      return (\n        (f = b.type),\n        (e = b.request),\n        (g = b.url),\n        I(g)\n          ? void 0\n          : j.running || (D.restartOnRequestAfter === !1 && \"force\" !== J(f))\n          ? void 0\n          : ((d = arguments),\n            (c = D.restartOnRequestAfter || 0),\n            \"boolean\" == typeof c && (c = 0),\n            setTimeout(function () {\n              var b, c, g, h, i, k;\n              if (\n                (b =\n                  \"socket\" === f\n                    ? e.readyState < 2\n                    : 0 < (h = e.readyState) && 4 > h)\n              ) {\n                for (\n                  j.restart(), i = j.sources, k = [], c = 0, g = i.length;\n                  g > c;\n                  c++\n                ) {\n                  if (((K = i[c]), K instanceof a)) {\n                    K.watch.apply(K, d);\n                    break;\n                  }\n                  k.push(void 0);\n                }\n                return k;\n              }\n            }, c))\n      );\n    }),\n    (a = (function () {\n      function a() {\n        var a = this;\n        (this.elements = []),\n          y().on(\"request\", function () {\n            return a.watch.apply(a, arguments);\n          });\n      }\n      return (\n        (a.prototype.watch = function (a) {\n          var b, c, d, e;\n          return (\n            (d = a.type),\n            (b = a.request),\n            (e = a.url),\n            I(e)\n              ? void 0\n              : ((c = \"socket\" === d ? new n(b) : new o(b)),\n                this.elements.push(c))\n          );\n        }),\n        a\n      );\n    })()),\n    (o = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f,\n          g,\n          h = this;\n        if (((this.progress = 0), null != window.ProgressEvent))\n          for (\n            c = null,\n              a.addEventListener(\n                \"progress\",\n                function (a) {\n                  return (h.progress = a.lengthComputable\n                    ? (100 * a.loaded) / a.total\n                    : h.progress + (100 - h.progress) / 2);\n                },\n                !1\n              ),\n              g = [\"load\", \"abort\", \"timeout\", \"error\"],\n              d = 0,\n              e = g.length;\n            e > d;\n            d++\n          )\n            (b = g[d]),\n              a.addEventListener(\n                b,\n                function () {\n                  return (h.progress = 100);\n                },\n                !1\n              );\n        else\n          (f = a.onreadystatechange),\n            (a.onreadystatechange = function () {\n              var b;\n              return (\n                0 === (b = a.readyState) || 4 === b\n                  ? (h.progress = 100)\n                  : 3 === a.readyState && (h.progress = 50),\n                \"function\" == typeof f ? f.apply(null, arguments) : void 0\n              );\n            });\n      }\n      return a;\n    })()),\n    (n = (function () {\n      function a(a) {\n        var b,\n          c,\n          d,\n          e,\n          f = this;\n        for (\n          this.progress = 0, e = [\"error\", \"open\"], c = 0, d = e.length;\n          d > c;\n          c++\n        )\n          (b = e[c]),\n            a.addEventListener(\n              b,\n              function () {\n                return (f.progress = 100);\n              },\n              !1\n            );\n      }\n      return a;\n    })()),\n    (d = (function () {\n      function a(a) {\n        var b, c, d, f;\n        for (\n          null == a && (a = {}),\n            this.elements = [],\n            null == a.selectors && (a.selectors = []),\n            f = a.selectors,\n            c = 0,\n            d = f.length;\n          d > c;\n          c++\n        )\n          (b = f[c]), this.elements.push(new e(b));\n      }\n      return a;\n    })()),\n    (e = (function () {\n      function a(a) {\n        (this.selector = a), (this.progress = 0), this.check();\n      }\n      return (\n        (a.prototype.check = function () {\n          var a = this;\n          return document.querySelector(this.selector)\n            ? this.done()\n            : setTimeout(function () {\n                return a.check();\n              }, D.elements.checkInterval);\n        }),\n        (a.prototype.done = function () {\n          return (this.progress = 100);\n        }),\n        a\n      );\n    })()),\n    (c = (function () {\n      function a() {\n        var a,\n          b,\n          c = this;\n        (this.progress =\n          null != (b = this.states[document.readyState]) ? b : 100),\n          (a = document.onreadystatechange),\n          (document.onreadystatechange = function () {\n            return (\n              null != c.states[document.readyState] &&\n                (c.progress = c.states[document.readyState]),\n              \"function\" == typeof a ? a.apply(null, arguments) : void 0\n            );\n          });\n      }\n      return (\n        (a.prototype.states = { loading: 0, interactive: 50, complete: 100 }), a\n      );\n    })()),\n    (f = (function () {\n      function a() {\n        var a,\n          b,\n          c,\n          d,\n          e,\n          f = this;\n        (this.progress = 0),\n          (a = 0),\n          (e = []),\n          (d = 0),\n          (c = C()),\n          (b = setInterval(function () {\n            var g;\n            return (\n              (g = C() - c - 50),\n              (c = C()),\n              e.push(g),\n              e.length > D.eventLag.sampleCount && e.shift(),\n              (a = q(e)),\n              ++d >= D.eventLag.minSamples && a < D.eventLag.lagThreshold\n                ? ((f.progress = 100), clearInterval(b))\n                : (f.progress = 100 * (3 / (a + 3)))\n            );\n          }, 50));\n      }\n      return a;\n    })()),\n    (m = (function () {\n      function a(a) {\n        (this.source = a),\n          (this.last = this.sinceLastUpdate = 0),\n          (this.rate = D.initialRate),\n          (this.catchup = 0),\n          (this.progress = this.lastProgress = 0),\n          null != this.source && (this.progress = F(this.source, \"progress\"));\n      }\n      return (\n        (a.prototype.tick = function (a, b) {\n          var c;\n          return (\n            null == b && (b = F(this.source, \"progress\")),\n            b >= 100 && (this.done = !0),\n            b === this.last\n              ? (this.sinceLastUpdate += a)\n              : (this.sinceLastUpdate &&\n                  (this.rate = (b - this.last) / this.sinceLastUpdate),\n                (this.catchup = (b - this.progress) / D.catchupTime),\n                (this.sinceLastUpdate = 0),\n                (this.last = b)),\n            b > this.progress && (this.progress += this.catchup * a),\n            (c = 1 - Math.pow(this.progress / 100, D.easeFactor)),\n            (this.progress += c * this.rate * a),\n            (this.progress = Math.min(\n              this.lastProgress + D.maxProgressPerFrame,\n              this.progress\n            )),\n            (this.progress = Math.max(0, this.progress)),\n            (this.progress = Math.min(100, this.progress)),\n            (this.lastProgress = this.progress),\n            this.progress\n          );\n        }),\n        a\n      );\n    })()),\n    (L = null),\n    (H = null),\n    (r = null),\n    (M = null),\n    (p = null),\n    (s = null),\n    (j.running = !1),\n    (z = function () {\n      return D.restartOnPushState ? j.restart() : void 0;\n    }),\n    null != window.history.pushState &&\n      ((T = window.history.pushState),\n      (window.history.pushState = function () {\n        return z(), T.apply(window.history, arguments);\n      })),\n    null != window.history.replaceState &&\n      ((W = window.history.replaceState),\n      (window.history.replaceState = function () {\n        return z(), W.apply(window.history, arguments);\n      })),\n    (l = { ajax: a, elements: d, document: c, eventLag: f }),\n    (B = function () {\n      var a, c, d, e, f, g, h, i;\n      for (\n        j.sources = L = [],\n          g = [\"ajax\", \"elements\", \"document\", \"eventLag\"],\n          c = 0,\n          e = g.length;\n        e > c;\n        c++\n      )\n        (a = g[c]), D[a] !== !1 && L.push(new l[a](D[a]));\n      for (\n        i = null != (h = D.extraSources) ? h : [], d = 0, f = i.length;\n        f > d;\n        d++\n      )\n        (K = i[d]), L.push(new K(D));\n      return (j.bar = r = new b()), (H = []), (M = new m());\n    })(),\n    (j.stop = function () {\n      return (\n        j.trigger(\"stop\"),\n        (j.running = !1),\n        r.destroy(),\n        (s = !0),\n        null != p && (\"function\" == typeof t && t(p), (p = null)),\n        B()\n      );\n    }),\n    (j.restart = function () {\n      return j.trigger(\"restart\"), j.stop(), j.start();\n    }),\n    (j.go = function () {\n      var a;\n      return (\n        (j.running = !0),\n        r.render(),\n        (a = C()),\n        (s = !1),\n        (p = G(function (b, c) {\n          var d, e, f, g, h, i, k, l, n, o, p, q, t, u, v, w;\n          for (\n            l = 100 - r.progress, e = p = 0, f = !0, i = q = 0, u = L.length;\n            u > q;\n            i = ++q\n          )\n            for (\n              K = L[i],\n                o = null != H[i] ? H[i] : (H[i] = []),\n                h = null != (w = K.elements) ? w : [K],\n                k = t = 0,\n                v = h.length;\n              v > t;\n              k = ++t\n            )\n              (g = h[k]),\n                (n = null != o[k] ? o[k] : (o[k] = new m(g))),\n                (f &= n.done),\n                n.done || (e++, (p += n.tick(b)));\n          return (\n            (d = p / e),\n            r.update(M.tick(b, d)),\n            r.done() || f || s\n              ? (r.update(100),\n                j.trigger(\"done\"),\n                setTimeout(function () {\n                  return r.finish(), (j.running = !1), j.trigger(\"hide\");\n                }, Math.max(D.ghostTime, Math.max(D.minTime - (C() - a), 0))))\n              : c()\n          );\n        }))\n      );\n    }),\n    (j.start = function (a) {\n      v(D, a), (j.running = !0);\n      try {\n        r.render();\n      } catch (b) {\n        i = b;\n      }\n      return document.querySelector(\".pace\")\n        ? (j.trigger(\"start\"), j.go())\n        : setTimeout(j.start, 50);\n    }),\n    \"function\" == typeof define && define.amd\n      ? define([\"pace\"], function () {\n          return j;\n        })\n      : \"object\" == typeof exports\n      ? (module.exports = j)\n      : D.startOnPageLoad && j.start();\n}.call(this));\n"},{"title":"Onlyy Games","_content":"\n# 游戏\n\n#### 你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\n","source":"relax/games/index.md","raw":"---\ntitle: Onlyy Games\n---\n\n# 游戏\n\n#### 你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\n","date":"2022-11-06T10:36:54.480Z","updated":"2022-11-06T10:36:54.480Z","path":"relax/games/index.html","comments":1,"layout":"page","_id":"cla5g9yow000fwgoi3ilx37gd","content":"<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><h4 id=\"你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\"><a href=\"#你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\" class=\"headerlink\" title=\"你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\"></a>你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！</h4>","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"游戏\"><a href=\"#游戏\" class=\"headerlink\" title=\"游戏\"></a>游戏</h1><h4 id=\"你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\"><a href=\"#你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\" class=\"headerlink\" title=\"你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！\"></a>你这个年龄段，你这个阶段，你玩得下去游戏？有点出息没有！</h4>"},{"title":"Onlyy 放映厅","_content":"\n<!-- aid 即为视频的av号 -->\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"https://player.bilibili.com/player.html?aid=88182907&page=1&as_wide=1&high_quality=1&danmaku=0\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n","source":"relax/movies/index.md","raw":"---\ntitle: Onlyy 放映厅\n---\n\n<!-- aid 即为视频的av号 -->\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"https://player.bilibili.com/player.html?aid=88182907&page=1&as_wide=1&high_quality=1&danmaku=0\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n","date":"2022-11-06T10:28:46.931Z","updated":"2022-11-06T10:28:46.931Z","path":"relax/movies/index.html","comments":1,"layout":"page","_id":"cla5g9yox000iwgoihf9qfa2h","content":"<!-- aid 即为视频的av号 -->\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"https://player.bilibili.com/player.html?aid=88182907&page=1&as_wide=1&high_quality=1&danmaku=0\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<!-- aid 即为视频的av号 -->\n<div align=center class=\"aspect-ratio\">\n    <iframe src=\"https://player.bilibili.com/player.html?aid=88182907&page=1&as_wide=1&high_quality=1&danmaku=0\" \n    scrolling=\"no\" \n    border=\"0\" \n    frameborder=\"no\" \n    framespacing=\"0\" \n    high_quality=1\n    danmaku=1 \n    allowfullscreen=\"true\"> \n    </iframe>\n</div>\n"},{"aplayer":true,"_content":"","source":"relax/music/index.md","raw":"---\naplayer: true\n---\n","date":"2022-11-06T08:59:57.254Z","updated":"2022-11-06T08:59:57.254Z","path":"relax/music/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9yoz000jwgoi2bl7b3b1","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""},{"_content":"<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/relax/photos/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/relax/photos/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/relax/photos/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>\n","source":"relax/photos/index.md","raw":"<div class=\"gallery-group-main\">\n{% galleryGroup '壁紙' '收藏的一些壁紙' '/relax/photos/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}\n{% galleryGroup '漫威' '關於漫威的圖片' '/relax/photos/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}\n{% galleryGroup 'OH MY GIRL' '關於OH MY GIRL的圖片' '/relax/photos/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}\n</div>\n","date":"2022-11-06T09:20:08.714Z","updated":"2022-11-06T09:20:08.714Z","path":"relax/photos/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9yp0000lwgoi0xm5hc9g","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/onlyy-blog/relax/photos/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/onlyy-blog/relax/photos/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/onlyy-blog/relax/photos/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">壁紙</div>\n  <p>收藏的一些壁紙</p>\n  <a href='/onlyy-blog/relax/photos/wallpaper'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">漫威</div>\n  <p>關於漫威的圖片</p>\n  <a href='/onlyy-blog/relax/photos/marvel'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">OH MY GIRL</div>\n  <p>關於OH MY GIRL的圖片</p>\n  <a href='/onlyy-blog/relax/photos/ohmygirl'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n"},{"title":"留言板","date":"2022-11-06T02:32:47.032Z","type":"comment","_content":"","source":"social/comments/index.md","raw":"---\ntitle: 留言板\ndate: 2022.11.04 20:47:124\ntype: \"comment\"\n---\n","updated":"2022-11-06T02:32:47.032Z","path":"social/comments/index.html","comments":1,"layout":"page","_id":"cla5g9yp1000nwgoi9jx2622b","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""},{"title":"link","date":"2022-11-06T02:29:15.754Z","type":"link","_content":"","source":"social/link/index.md","raw":"---\ntitle: link\ndate: 2022.11.04 20:47:124\ntype: \"link\"\n---\n","updated":"2022-11-06T02:29:15.754Z","path":"social/link/index.html","comments":1,"layout":"page","_id":"cla5g9yp2000qwgoideks66zp","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""},{"_content":"# 爱与和平\n","source":"zone/love-story/index.md","raw":"# 爱与和平\n","date":"2022-11-05T11:12:01.857Z","updated":"2022-11-05T11:12:01.857Z","path":"zone/love-story/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9yp9000rwgoi2y0i3agf","content":"<h1 id=\"爱与和平\"><a href=\"#爱与和平\" class=\"headerlink\" title=\"爱与和平\"></a>爱与和平</h1>","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"爱与和平\"><a href=\"#爱与和平\" class=\"headerlink\" title=\"爱与和平\"></a>爱与和平</h1>"},{"_content":"## 工作与生活\n","source":"zone/work-life/index.md","raw":"## 工作与生活\n","date":"2022-11-05T11:12:39.528Z","updated":"2022-11-05T11:12:39.528Z","path":"zone/work-life/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9ypa000swgoib0n6cvfo","content":"<h2 id=\"工作与生活\"><a href=\"#工作与生活\" class=\"headerlink\" title=\"工作与生活\"></a>工作与生活</h2>","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h2 id=\"工作与生活\"><a href=\"#工作与生活\" class=\"headerlink\" title=\"工作与生活\"></a>工作与生活</h2>"},{"title":"ohmygirl","date":"2022-11-06T03:03:12.000Z","_content":"\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}\n","source":"relax/photos/ohmygirl/index.md","raw":"---\ntitle: ohmygirl\ndate: 2022-11-06 11:03:12\n---\n\n{% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %}\n","updated":"2022-11-06T03:03:34.257Z","path":"relax/photos/ohmygirl/index.html","comments":1,"layout":"page","_id":"cla5g9ypa000uwgoifwhqfx1h","content":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\" alt=\"\"></p>\n          </div>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<div class=\"fj-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\" alt=\"\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\" alt=\"\"></p>\n          </div>\n"},{"_content":"","source":"relax/photos/marvel/index.md","raw":"","date":"2022-11-06T02:56:56.335Z","updated":"2022-11-06T02:56:56.335Z","path":"relax/photos/marvel/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9ypb000wwgoianx809l8","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""},{"_content":"","source":"relax/photos/wallpaper/index.md","raw":"","date":"2022-11-06T02:58:17.029Z","updated":"2022-11-06T02:58:17.029Z","path":"relax/photos/wallpaper/index.html","title":"","comments":1,"layout":"page","_id":"cla5g9ypc000xwgoihu8m0owu","content":"","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":""}],"Post":[{"title":"TypeScript 系列基础篇(三) 对象类型","date":"2022-03-02T09:37:00.000Z","updated":"2022-03-02T09:37:00.000Z","keywords":["前端","TypeScript","TS","对象"],"archive":"TypeScript","swiper_index":10,"_content":"\n# TypeScript 系列基础篇(三) 对象类型\n\n对象是我们组织数据的基本方式。除了常规的对象类型外，TS 还提供了**只读数组**、**元组**、**属性修饰符**、**索引签名**等知识体系。在前面的章节中，我们已经了解到了对象的基本使用。可以用**字面量**、**`interface`**、**`type alias`**来规定一个普通的对象类型。现在是时候了解一下常用的对象属性修饰符、类型拓展、索引签名和内置的特殊对象类型了。 还没有对象吗？那就赶紧`new`一个吧！\n\n## 一、<mark>属性修饰符</mark>\n\n利用属性修饰符，我们可以增强对象的属性的约束。\n\n### 1. `?` 可选属性\n\n可选属性我们在之前就已经有所了解。定义对象类型时，在属性名后面加上英文问号 \"`?`\" ，表示该属性可选。此后，该类型的对象里可以有这个属性，也可以没有。因此，该属性除了我们给它约束了的类型之外，还可能是`undefined`，从而引发某些问题。在之前的文章中提到过，这可以通过**真值校验**来进行类型缩减，或者给函数的形参设置默认值，从而解决。\n\n```ts\n// 其中gender为可选属性\ninterface Person {\n  name: string;\n  age: number;\n  gender?: 1 | 2;\n}\n// 可以有全部属性\nconst cc: Person = {\n  name: \"cc\",\n  age: 18,\n  gender: 2,\n};\n\n// 可以缺失可选属性\nconst yy: Person = {\n  name: \"yy\",\n  age: 18,\n};\n```\n\n### 2. `readonly` 只读属性\n\n在对象的某个或某些属性前加上关键字 **`readonly`**，可以设置该属性为只读属性。**对象的只读属性在`TS`里一般不允许被重新赋值**。只读属性不意味着完全不能修改。如果只读属性是一个对象类型，那我们可以修改它里面的成员。\n\n```ts\n// id为只读属性，不允许重新赋值\ninterface Person {\n  name: string;\n  age: number;\n  readonly idInfo: {\n    id: string;\n    addr: string;\n  };\n}\n// 可以有全部属性\nconst cc: Person = {\n  name: \"cc\",\n  age: 18,\n  idInfo: {\n    id: \"42xxxx199x04xxxx1X\",\n    addr: \"Wuhan\",\n  },\n};\n\n// 下面这句会报错，因为cc的id信息被设置为只读属性，不可以被重新哦\ncc.idInfo = { id: \"xiao cai ji\", addr: \"beijing\" };\n// 这样修改就可以啦\ncc.idInfo.addr = \"beijing\";\n```\n\n然而事实上，在`TS`里我们依然有方法可以让只读属性被重新赋值。由于`TS`的类型检查机制，在检查两个对象类型是否兼容时，只针对类型，而不会去检测属性是否有 `readonly` 。例如，下面这两个对象类型是完全相互兼容的。\n\n```ts\n// id为只读属性，不允许重新赋值\ninterface Person {\n  readonly name: string;\n  readonly age: number;\n  readonly idInfo: {\n    id: string;\n    addr: string;\n  };\n}\n// 没有readonly属性，所有成员都可以被赋值\ninterface People {\n  name: string;\n  age: number;\n  idInfo: {\n    id: string;\n    addr: string;\n  };\n}\n\n// 注意Person的属性是只读的\nlet person: Person = {\n  name: \"gg\",\n  age: 15,\n  idInfo: {\n    id: \"qaq\",\n    addr: \"zzZ\",\n  },\n};\n// 声明一个People类型的对象person，它的属性不是只读的\nlet people: People;\n\n// 类型兼容，具有只读属性的person可以被赋值给people\n// 此时people是People类型，其属性可以修改；person是Person类型，其属性只读\n// 熟悉JS引用类型的同学们都知道，people和person是同一个对象\npeople = person;\n\n// 修改people的属性，我们发现person也会被相应修改，因为他们实际是同一个对象\npeople.name = \"pp\";\npeople.age = 20;\n```\n\n从这个栗子中可以看到，我们可以通过一个**不具有相应只读属性，且属性类型能够兼容**的对象，来重写另一个对象的只读属性。因此，在**使用只读属性时，一定要注意这种情况**，以免引起超出意料的困扰。\n\n## 二、<mark>索引签名</mark>\n\n在上一篇文章[TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇 ](https://juejin.cn/post/7070172611849748517)中，我们了解了函数签名。和这里的**索引签名**多多少少有些相像。\n\n我们在使用**`interface`**或者**`type alias`**定义某个对象类型时，以往的做法是列举出所有的属性名并规定它们的值的类型。但是有时候，我们不知道对象里会有哪些属性，无法逐个列出。此时，我们可以使用<mark>**索引签名**</mark>，来**规定属性名的类型**和对应属性值的类型。\n\n```ts\n// 通过索引签名，我们可以定义一个伪数组的\n// 规定了属性名必须是number\ninterface StringArray {\n  [index: number]: string;\n}\n// 注意和真数组区分开来\nlet strArr1: StringArray = {\n  0: \"100分\",\n  5: \"95分\",\n};\n// 报错，因为属性名grades不是number类型，不符合StringArray类型的约束\nlet strArr2: StringArray = {\n  grades: \"100分\",\n};\n```\n\n当我们使用`number`类型作为属性名时，`JS`在把他放进对象之前**会先将其转化为`string`类型**。索引签名可以和指定属性名,以及属性修饰符混合使用，此时，对象中必须包含列举出的属性(可选属性除外)，而且可拓展符合索引签名的约束的属性。\n\n```ts\ninterface Person {\n  [x: string]: string;\n  100: string;\n  50?: string;\n}\n\nlet cc: Person = {\n  100: \"满意100\",\n  6: \"我是由索引签名拓展的属性\",\n};\n\nlet yy: Person = {\n  0: \"QAQ\",\n  100: \"555~\",\n  50: \"0.0\",\n};\n```\n\n索引签名可以不止一套，但是**各个索引签名的返回值应该互相兼容**。\n\n```ts\ninterface Person {\n  [x: string]: string;\n  [y: number]: string;\n}\n```\n\n可以**在索引签名的签名加上`readonly`关键字，使被签名的属性变为只读属性。**\n\n```ts\ninterface Person {\n  readonly [x: number]: string | number;\n}\n\nlet cc: Person = {\n  2: \"cc\",\n  5: 18,\n  10: \"boi\",\n};\n```\n\n## 三、<mark>类型拓展</mark>\n\n我们可以从已有的对象类型的配置中，生成一个全新的类型，使其不仅含有原来类型的所有属性，还能拥有自己独有的属性。这样可以方便地实现类型复用，避免过多地重复敲代码，提高我们的工作效率。在定义新类型时，**使用 `interface` 和 `type` 关键字，实现类型拓展的方式会有差别**。\n\n### 1. 类型继承\n\n使用**`interface`**关键字声明的对象类型，可以通过**`extends`**关键字来继承其它的对象类型，从而**直接获得父类型的所有属性配置、属性签名，而不必重复列举一遍**。**可以同时继承多个对象类型**。\n\n```ts\ntype A = {\n  name: string;\n};\n\ninterface B {\n  age: number;\n}\n\n// C类型继承A类型，包含name属性，不添加其它属性\ninterface C extends A {}\n\n// CC类型继承A，B类型，包含name, age, 以及自己列举的gender属性\ninterface CC extends A, B {\n  gender: 1 | 2;\n}\n```\n\n### 2. 类型交叉\n\n通过**`type`**关键字给一个对象类型起**别名**时，使用 `&` 符号来连接多个类型，从而产生一个新类型，新的类型包含所有其它对象类型的属性，即类型交叉。\n\n```ts\ntype A = {\n  name: string;\n};\n\ninterface B {\n  age: number;\n}\n// 类型CC包含name和age属性\ntype CC = A & B;\n```\n\n值得一提的是，如果 `&` 连接的是简单联合类型，则产生的新类型是 `&` 符号两边类型的公有类型。\n\n```ts\ntype A = string | number;\ntype B = string[] | number;\n// C是A和B共有的类型，number类型\ntype C = A & B;\n```\n\n这一点 和 `&`在对象类型之间的使用看起来完全不同，起初我也有些疑惑。但是我们可以从本质上来思考，就不再有疑惑了。在关键字 type 定义的类型别名中，使用 `&` 符号连接已有的类型可以产生一个新的类型，这个**新类型需要同时满足 `&` 符号两边的类型的约束**。\n\n因此，在**对象类型的栗子**中，新类型`CC`既需要满足`A`类型的约束 (因此`CC`必须有`A`的所有属性)，又必须满足类型 B 的约束 (因此必须含有类型 B 的所有属性)，即`CC`具有`A`和`B`的所有属性。\n\n而在**简单联合类型**的栗子中，新类型`C`既要满足 A 的类型约束 (要么`C`是`number`, 要么是`string`)，又要满足类型`B`的约束 (要么`C`是字符串数组`string[]`，要么是`number`)，因此最终得到的`C`是`number`。\n\n## 四、<mark>泛型对象</mark>\n\n**泛型**：使用尖括号`<>`来声明类型参数 (可以有多个)来表示暂时未知的类型，在实际声明变量时传入相应的类型 (或者由`TS`自动推论) 来替换相应出现该类型参数的地方，从而将抽象的、未知的类型替换为具体的、已知的类型。一个类型参数指代一种类型，例如`<T,K,U,...>`分别指代一种暂时未知的类型。将泛型用于定义对象类型，便得到了**泛型对象**。\n\n```ts\n// 类型T代表一种暂时未知的类型\ninterface PersonInfo<T> {\n  info: T;\n}\n// 传入类型变量string，这时候string就会在相应的地方替换原来的T\nlet p1: PersonInfo<string> = {\n  info: \"cc\",\n};\n\nlet p2: PersonInfo<number> = {\n  info: 18,\n};\n\nlet p3: PersonInfo<\"男\" | \"女\"> = {\n  info: \"男\",\n};\n```\n\n泛型对象常用于泛型函数，可参考[TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇](https://juejin.cn/post/7070172611849748517)。\n\n**泛型同样可在类型别名中使用**。而类型别名除了定义对象类型之外，还能用泛型来定义各种其它类型。因此，我们可以**使用泛型嵌套来定义更为复杂的类型结构** (孩子已经哭了，难怪都说，玩会了泛型，`TS`就学完了一半)。本文主要介绍对象类型，关于泛型，以后再专门介绍。如下是官网的一个栗子。\n\n```ts\ntype OrNull<Type> = Type | null;\n\ntype OneOrMany<Type> = Type | Type[];\n\ntype OneOrManyOrNull<Type> = OrNull<OneOrMany<Type>>;\n\ntype OneOrManyOrNullStrings = OneOrManyOrNull<string>;\n```\n\n## 五、数组类型\n\n我们知道，数组是一种特殊的对象类型。上面简单了解了下泛型，那么我们现在就能知道，原来所谓数值数组、字符串数组等 (`number[]`，`string[]` )是泛型数组`Array<number>`，`Array<string>`的简写。现代`JS`也提供了其它新类型的泛型结构，如`Map<T, K>`，`Set<T>`，`Promise<T>`等，类型参数的数量都取决于各类型的自身行为表现。\n\n### 1. `ReadonlyArray` 只读数组\n\n只读数组是`TS`提供的一种特殊的数组，它的任何成员都不能被修改。\n\n- 无法进行新增、删除、替换等操作，`push`、`pop`等修改自身的方法都无法使用。\n- 可以使用不修改自身的数组方法。例如使用`slice`方法，返回一个普通的数组\n- 代表一种类型，无法当作构造函数使用，不能使用`new`操作符。\n- 在声明一个只读数组类型的变量时需指定类型参数，只读数组里只能存放该类型的值。\n- 只读数组类型的变量本身可以接收普通数组的赋值。\n- 普通数组不能接收只读数组的赋值\n\n```ts\n// 指定类型参数number，即该只读数组里只\nlet a: ReadonlyArray<number> = [123];\n// 错误\na.pop();\n// 可以使用slice方法\nlet cc = a.slice(0);\n\n// 该变量可以用普通重新赋值\na = [1, 2, 3, 4];\n\n// 错误\nlet val = new ReadonlyArray();\n\nlet aa: Array<number> = [456];\n// 错误\naa = a;\n```\n\n### 2. `Tuple Types` 元组\n\n<mark>**元组**</mark>类型是另一种特殊的数组类型，**一般来说**它可以存储不同类型的成员，**限定了数组的长度及每个成员的类型**。(**普通数组也可以通过指定联合类型的类型参数，从而存放不同类型的成员)**。元组的成员是可以被修改，可以调用一系列的数组方法。\n\n```ts\ntype UserInfo = [string, number, 1 | 2];\n```\n\n这里得`UserInfo`便是一个元组类型，规定了元组里**有且仅有**三个成员，索引为`0`的成员是`string`类型，索引为`1`的成员是`number`类型，索引为`2`的成员 是字面量联合类型 `1 | 2` 。\n\n- 元组类型可以被解构。\n\n```ts\nfunction introduceUser(info: UserInfo): string {\n  const [name, age, gender] = info;\n  return `我是${name}，今年${age}岁啦`;\n}\n```\n\n- **元组也可以指定可选成员**：\n\n```ts\n// 第三个成员可选\ntype UserInfo = [string, number, (1 | 2)?];\n```\n\n- 元组中可使用剩余参数，来**指定某个或某些索引位置的成员的类型和其它成员的类型**。此时，元组没有长度限制。\n\n```ts\ntype FamilyMember = string[];\n// 指定索引0处的类型为string，索引1处的类型为number，剩余类型为FamilyMember\ntype UserInfo1 = [string, number, ...FamilyMember[]];\n// 同理\ntype UserInfo2 = [string, number, ...FamilyMember[], boolean];\ntype UserInfo3 = [...FamilyMember[], string, number];\n```\n\n- **`readonly`** 只读元组类型\n\n  我们可以用类似 数组类型的简写方式 来声明一个只读元组：**`readonly [string, number]`**，使元组的成员变为只读成员，不可修改。**`readonly`关键字只能用于字面量数组或字面量元组类型之前，不可用于类型别名之前**。\n\n  ```ts\n  // ok\n  let cc: readonly [string, number] = [\"cc\", 18];\n  // 报错\n  let yy: readonly UserInfo3 = [[\"dd\"], \"1\", 1];\n  // 用于字面量元组之前，ok\n  let yy: readonly [...FamilyMember[], string, number] = [[\"dd\"], \"1\", 1];\n\n  // 报错，只读属性不可修改\n  cc[0] = \"yy\";\n  ```\n\n  此外，如果我们对数组使用<mark>**常量断言**</mark>：**`as const`**，该数组的类型也会变为只读元组。\n\n  ```ts\n  let yy = [\"yy\", 18] as const;\n\n  // 报错，只读属性不可修改\n  yy[0] = \"cc\";\n  ```\n\n- `ReadonlyArray`、`tuple`、`readonly tuple` 的主要区别。\n\n  - `ReadonlyArray` 只读数组：不可修改数组成员，不可增删改，不会为每个数组成员单独指定类型，可以被重新赋值；\n  - `tuple` 元组：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度；元组可以修改成员的值；可以被重新赋值；\n  - `readonly tuple`：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度，不可修改成员的值，不可被重新赋值；\n\n关于对象类型就先分享到这里啦。如果觉得我的文章有不妥之处，欢迎在评论区留言指正。下一期聊聊**泛型**，不见不散。\n","source":"_posts/TypeScript 系列/基础篇/TypeScript系列  基础篇(三) 对象类型.md","raw":"---\ntitle: TypeScript 系列基础篇(三) 对象类型\ndate: 2022-03-02 17:37\nupdated: 2022-03-02 17:37\nkeywords:\n  - 前端\n  - TypeScript\n  - TS\n  - 对象\ntags:\n  - TypeScript\n  - 前端\narchive: TypeScript\nswiper_index: 10\n---\n\n# TypeScript 系列基础篇(三) 对象类型\n\n对象是我们组织数据的基本方式。除了常规的对象类型外，TS 还提供了**只读数组**、**元组**、**属性修饰符**、**索引签名**等知识体系。在前面的章节中，我们已经了解到了对象的基本使用。可以用**字面量**、**`interface`**、**`type alias`**来规定一个普通的对象类型。现在是时候了解一下常用的对象属性修饰符、类型拓展、索引签名和内置的特殊对象类型了。 还没有对象吗？那就赶紧`new`一个吧！\n\n## 一、<mark>属性修饰符</mark>\n\n利用属性修饰符，我们可以增强对象的属性的约束。\n\n### 1. `?` 可选属性\n\n可选属性我们在之前就已经有所了解。定义对象类型时，在属性名后面加上英文问号 \"`?`\" ，表示该属性可选。此后，该类型的对象里可以有这个属性，也可以没有。因此，该属性除了我们给它约束了的类型之外，还可能是`undefined`，从而引发某些问题。在之前的文章中提到过，这可以通过**真值校验**来进行类型缩减，或者给函数的形参设置默认值，从而解决。\n\n```ts\n// 其中gender为可选属性\ninterface Person {\n  name: string;\n  age: number;\n  gender?: 1 | 2;\n}\n// 可以有全部属性\nconst cc: Person = {\n  name: \"cc\",\n  age: 18,\n  gender: 2,\n};\n\n// 可以缺失可选属性\nconst yy: Person = {\n  name: \"yy\",\n  age: 18,\n};\n```\n\n### 2. `readonly` 只读属性\n\n在对象的某个或某些属性前加上关键字 **`readonly`**，可以设置该属性为只读属性。**对象的只读属性在`TS`里一般不允许被重新赋值**。只读属性不意味着完全不能修改。如果只读属性是一个对象类型，那我们可以修改它里面的成员。\n\n```ts\n// id为只读属性，不允许重新赋值\ninterface Person {\n  name: string;\n  age: number;\n  readonly idInfo: {\n    id: string;\n    addr: string;\n  };\n}\n// 可以有全部属性\nconst cc: Person = {\n  name: \"cc\",\n  age: 18,\n  idInfo: {\n    id: \"42xxxx199x04xxxx1X\",\n    addr: \"Wuhan\",\n  },\n};\n\n// 下面这句会报错，因为cc的id信息被设置为只读属性，不可以被重新哦\ncc.idInfo = { id: \"xiao cai ji\", addr: \"beijing\" };\n// 这样修改就可以啦\ncc.idInfo.addr = \"beijing\";\n```\n\n然而事实上，在`TS`里我们依然有方法可以让只读属性被重新赋值。由于`TS`的类型检查机制，在检查两个对象类型是否兼容时，只针对类型，而不会去检测属性是否有 `readonly` 。例如，下面这两个对象类型是完全相互兼容的。\n\n```ts\n// id为只读属性，不允许重新赋值\ninterface Person {\n  readonly name: string;\n  readonly age: number;\n  readonly idInfo: {\n    id: string;\n    addr: string;\n  };\n}\n// 没有readonly属性，所有成员都可以被赋值\ninterface People {\n  name: string;\n  age: number;\n  idInfo: {\n    id: string;\n    addr: string;\n  };\n}\n\n// 注意Person的属性是只读的\nlet person: Person = {\n  name: \"gg\",\n  age: 15,\n  idInfo: {\n    id: \"qaq\",\n    addr: \"zzZ\",\n  },\n};\n// 声明一个People类型的对象person，它的属性不是只读的\nlet people: People;\n\n// 类型兼容，具有只读属性的person可以被赋值给people\n// 此时people是People类型，其属性可以修改；person是Person类型，其属性只读\n// 熟悉JS引用类型的同学们都知道，people和person是同一个对象\npeople = person;\n\n// 修改people的属性，我们发现person也会被相应修改，因为他们实际是同一个对象\npeople.name = \"pp\";\npeople.age = 20;\n```\n\n从这个栗子中可以看到，我们可以通过一个**不具有相应只读属性，且属性类型能够兼容**的对象，来重写另一个对象的只读属性。因此，在**使用只读属性时，一定要注意这种情况**，以免引起超出意料的困扰。\n\n## 二、<mark>索引签名</mark>\n\n在上一篇文章[TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇 ](https://juejin.cn/post/7070172611849748517)中，我们了解了函数签名。和这里的**索引签名**多多少少有些相像。\n\n我们在使用**`interface`**或者**`type alias`**定义某个对象类型时，以往的做法是列举出所有的属性名并规定它们的值的类型。但是有时候，我们不知道对象里会有哪些属性，无法逐个列出。此时，我们可以使用<mark>**索引签名**</mark>，来**规定属性名的类型**和对应属性值的类型。\n\n```ts\n// 通过索引签名，我们可以定义一个伪数组的\n// 规定了属性名必须是number\ninterface StringArray {\n  [index: number]: string;\n}\n// 注意和真数组区分开来\nlet strArr1: StringArray = {\n  0: \"100分\",\n  5: \"95分\",\n};\n// 报错，因为属性名grades不是number类型，不符合StringArray类型的约束\nlet strArr2: StringArray = {\n  grades: \"100分\",\n};\n```\n\n当我们使用`number`类型作为属性名时，`JS`在把他放进对象之前**会先将其转化为`string`类型**。索引签名可以和指定属性名,以及属性修饰符混合使用，此时，对象中必须包含列举出的属性(可选属性除外)，而且可拓展符合索引签名的约束的属性。\n\n```ts\ninterface Person {\n  [x: string]: string;\n  100: string;\n  50?: string;\n}\n\nlet cc: Person = {\n  100: \"满意100\",\n  6: \"我是由索引签名拓展的属性\",\n};\n\nlet yy: Person = {\n  0: \"QAQ\",\n  100: \"555~\",\n  50: \"0.0\",\n};\n```\n\n索引签名可以不止一套，但是**各个索引签名的返回值应该互相兼容**。\n\n```ts\ninterface Person {\n  [x: string]: string;\n  [y: number]: string;\n}\n```\n\n可以**在索引签名的签名加上`readonly`关键字，使被签名的属性变为只读属性。**\n\n```ts\ninterface Person {\n  readonly [x: number]: string | number;\n}\n\nlet cc: Person = {\n  2: \"cc\",\n  5: 18,\n  10: \"boi\",\n};\n```\n\n## 三、<mark>类型拓展</mark>\n\n我们可以从已有的对象类型的配置中，生成一个全新的类型，使其不仅含有原来类型的所有属性，还能拥有自己独有的属性。这样可以方便地实现类型复用，避免过多地重复敲代码，提高我们的工作效率。在定义新类型时，**使用 `interface` 和 `type` 关键字，实现类型拓展的方式会有差别**。\n\n### 1. 类型继承\n\n使用**`interface`**关键字声明的对象类型，可以通过**`extends`**关键字来继承其它的对象类型，从而**直接获得父类型的所有属性配置、属性签名，而不必重复列举一遍**。**可以同时继承多个对象类型**。\n\n```ts\ntype A = {\n  name: string;\n};\n\ninterface B {\n  age: number;\n}\n\n// C类型继承A类型，包含name属性，不添加其它属性\ninterface C extends A {}\n\n// CC类型继承A，B类型，包含name, age, 以及自己列举的gender属性\ninterface CC extends A, B {\n  gender: 1 | 2;\n}\n```\n\n### 2. 类型交叉\n\n通过**`type`**关键字给一个对象类型起**别名**时，使用 `&` 符号来连接多个类型，从而产生一个新类型，新的类型包含所有其它对象类型的属性，即类型交叉。\n\n```ts\ntype A = {\n  name: string;\n};\n\ninterface B {\n  age: number;\n}\n// 类型CC包含name和age属性\ntype CC = A & B;\n```\n\n值得一提的是，如果 `&` 连接的是简单联合类型，则产生的新类型是 `&` 符号两边类型的公有类型。\n\n```ts\ntype A = string | number;\ntype B = string[] | number;\n// C是A和B共有的类型，number类型\ntype C = A & B;\n```\n\n这一点 和 `&`在对象类型之间的使用看起来完全不同，起初我也有些疑惑。但是我们可以从本质上来思考，就不再有疑惑了。在关键字 type 定义的类型别名中，使用 `&` 符号连接已有的类型可以产生一个新的类型，这个**新类型需要同时满足 `&` 符号两边的类型的约束**。\n\n因此，在**对象类型的栗子**中，新类型`CC`既需要满足`A`类型的约束 (因此`CC`必须有`A`的所有属性)，又必须满足类型 B 的约束 (因此必须含有类型 B 的所有属性)，即`CC`具有`A`和`B`的所有属性。\n\n而在**简单联合类型**的栗子中，新类型`C`既要满足 A 的类型约束 (要么`C`是`number`, 要么是`string`)，又要满足类型`B`的约束 (要么`C`是字符串数组`string[]`，要么是`number`)，因此最终得到的`C`是`number`。\n\n## 四、<mark>泛型对象</mark>\n\n**泛型**：使用尖括号`<>`来声明类型参数 (可以有多个)来表示暂时未知的类型，在实际声明变量时传入相应的类型 (或者由`TS`自动推论) 来替换相应出现该类型参数的地方，从而将抽象的、未知的类型替换为具体的、已知的类型。一个类型参数指代一种类型，例如`<T,K,U,...>`分别指代一种暂时未知的类型。将泛型用于定义对象类型，便得到了**泛型对象**。\n\n```ts\n// 类型T代表一种暂时未知的类型\ninterface PersonInfo<T> {\n  info: T;\n}\n// 传入类型变量string，这时候string就会在相应的地方替换原来的T\nlet p1: PersonInfo<string> = {\n  info: \"cc\",\n};\n\nlet p2: PersonInfo<number> = {\n  info: 18,\n};\n\nlet p3: PersonInfo<\"男\" | \"女\"> = {\n  info: \"男\",\n};\n```\n\n泛型对象常用于泛型函数，可参考[TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇](https://juejin.cn/post/7070172611849748517)。\n\n**泛型同样可在类型别名中使用**。而类型别名除了定义对象类型之外，还能用泛型来定义各种其它类型。因此，我们可以**使用泛型嵌套来定义更为复杂的类型结构** (孩子已经哭了，难怪都说，玩会了泛型，`TS`就学完了一半)。本文主要介绍对象类型，关于泛型，以后再专门介绍。如下是官网的一个栗子。\n\n```ts\ntype OrNull<Type> = Type | null;\n\ntype OneOrMany<Type> = Type | Type[];\n\ntype OneOrManyOrNull<Type> = OrNull<OneOrMany<Type>>;\n\ntype OneOrManyOrNullStrings = OneOrManyOrNull<string>;\n```\n\n## 五、数组类型\n\n我们知道，数组是一种特殊的对象类型。上面简单了解了下泛型，那么我们现在就能知道，原来所谓数值数组、字符串数组等 (`number[]`，`string[]` )是泛型数组`Array<number>`，`Array<string>`的简写。现代`JS`也提供了其它新类型的泛型结构，如`Map<T, K>`，`Set<T>`，`Promise<T>`等，类型参数的数量都取决于各类型的自身行为表现。\n\n### 1. `ReadonlyArray` 只读数组\n\n只读数组是`TS`提供的一种特殊的数组，它的任何成员都不能被修改。\n\n- 无法进行新增、删除、替换等操作，`push`、`pop`等修改自身的方法都无法使用。\n- 可以使用不修改自身的数组方法。例如使用`slice`方法，返回一个普通的数组\n- 代表一种类型，无法当作构造函数使用，不能使用`new`操作符。\n- 在声明一个只读数组类型的变量时需指定类型参数，只读数组里只能存放该类型的值。\n- 只读数组类型的变量本身可以接收普通数组的赋值。\n- 普通数组不能接收只读数组的赋值\n\n```ts\n// 指定类型参数number，即该只读数组里只\nlet a: ReadonlyArray<number> = [123];\n// 错误\na.pop();\n// 可以使用slice方法\nlet cc = a.slice(0);\n\n// 该变量可以用普通重新赋值\na = [1, 2, 3, 4];\n\n// 错误\nlet val = new ReadonlyArray();\n\nlet aa: Array<number> = [456];\n// 错误\naa = a;\n```\n\n### 2. `Tuple Types` 元组\n\n<mark>**元组**</mark>类型是另一种特殊的数组类型，**一般来说**它可以存储不同类型的成员，**限定了数组的长度及每个成员的类型**。(**普通数组也可以通过指定联合类型的类型参数，从而存放不同类型的成员)**。元组的成员是可以被修改，可以调用一系列的数组方法。\n\n```ts\ntype UserInfo = [string, number, 1 | 2];\n```\n\n这里得`UserInfo`便是一个元组类型，规定了元组里**有且仅有**三个成员，索引为`0`的成员是`string`类型，索引为`1`的成员是`number`类型，索引为`2`的成员 是字面量联合类型 `1 | 2` 。\n\n- 元组类型可以被解构。\n\n```ts\nfunction introduceUser(info: UserInfo): string {\n  const [name, age, gender] = info;\n  return `我是${name}，今年${age}岁啦`;\n}\n```\n\n- **元组也可以指定可选成员**：\n\n```ts\n// 第三个成员可选\ntype UserInfo = [string, number, (1 | 2)?];\n```\n\n- 元组中可使用剩余参数，来**指定某个或某些索引位置的成员的类型和其它成员的类型**。此时，元组没有长度限制。\n\n```ts\ntype FamilyMember = string[];\n// 指定索引0处的类型为string，索引1处的类型为number，剩余类型为FamilyMember\ntype UserInfo1 = [string, number, ...FamilyMember[]];\n// 同理\ntype UserInfo2 = [string, number, ...FamilyMember[], boolean];\ntype UserInfo3 = [...FamilyMember[], string, number];\n```\n\n- **`readonly`** 只读元组类型\n\n  我们可以用类似 数组类型的简写方式 来声明一个只读元组：**`readonly [string, number]`**，使元组的成员变为只读成员，不可修改。**`readonly`关键字只能用于字面量数组或字面量元组类型之前，不可用于类型别名之前**。\n\n  ```ts\n  // ok\n  let cc: readonly [string, number] = [\"cc\", 18];\n  // 报错\n  let yy: readonly UserInfo3 = [[\"dd\"], \"1\", 1];\n  // 用于字面量元组之前，ok\n  let yy: readonly [...FamilyMember[], string, number] = [[\"dd\"], \"1\", 1];\n\n  // 报错，只读属性不可修改\n  cc[0] = \"yy\";\n  ```\n\n  此外，如果我们对数组使用<mark>**常量断言**</mark>：**`as const`**，该数组的类型也会变为只读元组。\n\n  ```ts\n  let yy = [\"yy\", 18] as const;\n\n  // 报错，只读属性不可修改\n  yy[0] = \"cc\";\n  ```\n\n- `ReadonlyArray`、`tuple`、`readonly tuple` 的主要区别。\n\n  - `ReadonlyArray` 只读数组：不可修改数组成员，不可增删改，不会为每个数组成员单独指定类型，可以被重新赋值；\n  - `tuple` 元组：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度；元组可以修改成员的值；可以被重新赋值；\n  - `readonly tuple`：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度，不可修改成员的值，不可被重新赋值；\n\n关于对象类型就先分享到这里啦。如果觉得我的文章有不妥之处，欢迎在评论区留言指正。下一期聊聊**泛型**，不见不散。\n","slug":"TypeScript-系列-基础篇-TypeScript系列-基础篇-三-对象类型","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cla5g9yog0001wgoi38t3geqd","content":"<h1 id=\"TypeScript-系列基础篇-三-对象类型\"><a href=\"#TypeScript-系列基础篇-三-对象类型\" class=\"headerlink\" title=\"TypeScript 系列基础篇(三) 对象类型\"></a>TypeScript 系列基础篇(三) 对象类型</h1><p>对象是我们组织数据的基本方式。除了常规的对象类型外，TS 还提供了<strong>只读数组</strong>、<strong>元组</strong>、<strong>属性修饰符</strong>、<strong>索引签名</strong>等知识体系。在前面的章节中，我们已经了解到了对象的基本使用。可以用<strong>字面量</strong>、<strong><code>interface</code></strong>、<strong><code>type alias</code></strong>来规定一个普通的对象类型。现在是时候了解一下常用的对象属性修饰符、类型拓展、索引签名和内置的特殊对象类型了。 还没有对象吗？那就赶紧<code>new</code>一个吧！</p>\n<h2 id=\"一、属性修饰符\"><a href=\"#一、属性修饰符\" class=\"headerlink\" title=\"一、属性修饰符\"></a>一、<mark>属性修饰符</mark></h2><p>利用属性修饰符，我们可以增强对象的属性的约束。</p>\n<h3 id=\"1-可选属性\"><a href=\"#1-可选属性\" class=\"headerlink\" title=\"1. ? 可选属性\"></a>1. <code>?</code> 可选属性</h3><p>可选属性我们在之前就已经有所了解。定义对象类型时，在属性名后面加上英文问号 “<code>?</code>“ ，表示该属性可选。此后，该类型的对象里可以有这个属性，也可以没有。因此，该属性除了我们给它约束了的类型之外，还可能是<code>undefined</code>，从而引发某些问题。在之前的文章中提到过，这可以通过<strong>真值校验</strong>来进行类型缩减，或者给函数的形参设置默认值，从而解决。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其中gender为可选属性</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  gender?: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 可以有全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以缺失可选属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">yy</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-readonly-只读属性\"><a href=\"#2-readonly-只读属性\" class=\"headerlink\" title=\"2. readonly 只读属性\"></a>2. <code>readonly</code> 只读属性</h3><p>在对象的某个或某些属性前加上关键字 <strong><code>readonly</code></strong>，可以设置该属性为只读属性。<strong>对象的只读属性在<code>TS</code>里一般不允许被重新赋值</strong>。只读属性不意味着完全不能修改。如果只读属性是一个对象类型，那我们可以修改它里面的成员。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// id为只读属性，不允许重新赋值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 可以有全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;42xxxx199x04xxxx1X&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"string\">&quot;Wuhan&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这句会报错，因为cc的id信息被设置为只读属性，不可以被重新哦</span></span><br><span class=\"line\">cc.<span class=\"property\">idInfo</span> = &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;xiao cai ji&quot;</span>, <span class=\"attr\">addr</span>: <span class=\"string\">&quot;beijing&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 这样修改就可以啦</span></span><br><span class=\"line\">cc.<span class=\"property\">idInfo</span>.<span class=\"property\">addr</span> = <span class=\"string\">&quot;beijing&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>然而事实上，在<code>TS</code>里我们依然有方法可以让只读属性被重新赋值。由于<code>TS</code>的类型检查机制，在检查两个对象类型是否兼容时，只针对类型，而不会去检测属性是否有 <code>readonly</code> 。例如，下面这两个对象类型是完全相互兼容的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// id为只读属性，不允许重新赋值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 没有readonly属性，所有成员都可以被赋值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意Person的属性是只读的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">person</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;gg&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">  <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;qaq&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"string\">&quot;zzZ&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 声明一个People类型的对象person，它的属性不是只读的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">people</span>: <span class=\"title class_\">People</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型兼容，具有只读属性的person可以被赋值给people</span></span><br><span class=\"line\"><span class=\"comment\">// 此时people是People类型，其属性可以修改；person是Person类型，其属性只读</span></span><br><span class=\"line\"><span class=\"comment\">// 熟悉JS引用类型的同学们都知道，people和person是同一个对象</span></span><br><span class=\"line\">people = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改people的属性，我们发现person也会被相应修改，因为他们实际是同一个对象</span></span><br><span class=\"line\">people.<span class=\"property\">name</span> = <span class=\"string\">&quot;pp&quot;</span>;</span><br><span class=\"line\">people.<span class=\"property\">age</span> = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n<p>从这个栗子中可以看到，我们可以通过一个<strong>不具有相应只读属性，且属性类型能够兼容</strong>的对象，来重写另一个对象的只读属性。因此，在<strong>使用只读属性时，一定要注意这种情况</strong>，以免引起超出意料的困扰。</p>\n<h2 id=\"二、索引签名\"><a href=\"#二、索引签名\" class=\"headerlink\" title=\"二、索引签名\"></a>二、<mark>索引签名</mark></h2><p>在上一篇文章<a href=\"https://juejin.cn/post/7070172611849748517\">TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇 </a>中，我们了解了函数签名。和这里的<strong>索引签名</strong>多多少少有些相像。</p>\n<p>我们在使用<strong><code>interface</code></strong>或者<strong><code>type alias</code></strong>定义某个对象类型时，以往的做法是列举出所有的属性名并规定它们的值的类型。但是有时候，我们不知道对象里会有哪些属性，无法逐个列出。此时，我们可以使用<mark><strong>索引签名</strong></mark>，来<strong>规定属性名的类型</strong>和对应属性值的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过索引签名，我们可以定义一个伪数组的</span></span><br><span class=\"line\"><span class=\"comment\">// 规定了属性名必须是number</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">StringArray</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意和真数组区分开来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strArr1</span>: <span class=\"title class_\">StringArray</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;100分&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">5</span>: <span class=\"string\">&quot;95分&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错，因为属性名grades不是number类型，不符合StringArray类型的约束</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strArr2</span>: <span class=\"title class_\">StringArray</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">grades</span>: <span class=\"string\">&quot;100分&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当我们使用<code>number</code>类型作为属性名时，<code>JS</code>在把他放进对象之前<strong>会先将其转化为<code>string</code>类型</strong>。索引签名可以和指定属性名,以及属性修饰符混合使用，此时，对象中必须包含列举出的属性(可选属性除外)，而且可拓展符合索引签名的约束的属性。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"number\">50</span>?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"string\">&quot;满意100&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">6</span>: <span class=\"string\">&quot;我是由索引签名拓展的属性&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">yy</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;QAQ&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"string\">&quot;555~&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">50</span>: <span class=\"string\">&quot;0.0&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>索引签名可以不止一套，但是<strong>各个索引签名的返回值应该互相兼容</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  [<span class=\"attr\">y</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以<strong>在索引签名的签名加上<code>readonly</code>关键字，使被签名的属性变为只读属性。</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">5</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"number\">10</span>: <span class=\"string\">&quot;boi&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、类型拓展\"><a href=\"#三、类型拓展\" class=\"headerlink\" title=\"三、类型拓展\"></a>三、<mark>类型拓展</mark></h2><p>我们可以从已有的对象类型的配置中，生成一个全新的类型，使其不仅含有原来类型的所有属性，还能拥有自己独有的属性。这样可以方便地实现类型复用，避免过多地重复敲代码，提高我们的工作效率。在定义新类型时，<strong>使用 <code>interface</code> 和 <code>type</code> 关键字，实现类型拓展的方式会有差别</strong>。</p>\n<h3 id=\"1-类型继承\"><a href=\"#1-类型继承\" class=\"headerlink\" title=\"1. 类型继承\"></a>1. 类型继承</h3><p>使用<strong><code>interface</code></strong>关键字声明的对象类型，可以通过<strong><code>extends</code></strong>关键字来继承其它的对象类型，从而<strong>直接获得父类型的所有属性配置、属性签名，而不必重复列举一遍</strong>。<strong>可以同时继承多个对象类型</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> B &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// C类型继承A类型，包含name属性，不添加其它属性</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> C <span class=\"keyword\">extends</span> A &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CC类型继承A，B类型，包含name, age, 以及自己列举的gender属性</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> CC <span class=\"keyword\">extends</span> A, B &#123;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-类型交叉\"><a href=\"#2-类型交叉\" class=\"headerlink\" title=\"2. 类型交叉\"></a>2. 类型交叉</h3><p>通过<strong><code>type</code></strong>关键字给一个对象类型起<strong>别名</strong>时，使用 <code>&amp;</code> 符号来连接多个类型，从而产生一个新类型，新的类型包含所有其它对象类型的属性，即类型交叉。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> B &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类型CC包含name和age属性</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">CC</span> = A &amp; B;</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，如果 <code>&amp;</code> 连接的是简单联合类型，则产生的新类型是 <code>&amp;</code> 符号两边类型的公有类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"built_in\">string</span>[] | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// C是A和B共有的类型，number类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> C = A &amp; B;</span><br></pre></td></tr></table></figure>\n<p>这一点 和 <code>&amp;</code>在对象类型之间的使用看起来完全不同，起初我也有些疑惑。但是我们可以从本质上来思考，就不再有疑惑了。在关键字 type 定义的类型别名中，使用 <code>&amp;</code> 符号连接已有的类型可以产生一个新的类型，这个<strong>新类型需要同时满足 <code>&amp;</code> 符号两边的类型的约束</strong>。</p>\n<p>因此，在<strong>对象类型的栗子</strong>中，新类型<code>CC</code>既需要满足<code>A</code>类型的约束 (因此<code>CC</code>必须有<code>A</code>的所有属性)，又必须满足类型 B 的约束 (因此必须含有类型 B 的所有属性)，即<code>CC</code>具有<code>A</code>和<code>B</code>的所有属性。</p>\n<p>而在<strong>简单联合类型</strong>的栗子中，新类型<code>C</code>既要满足 A 的类型约束 (要么<code>C</code>是<code>number</code>, 要么是<code>string</code>)，又要满足类型<code>B</code>的约束 (要么<code>C</code>是字符串数组<code>string[]</code>，要么是<code>number</code>)，因此最终得到的<code>C</code>是<code>number</code>。</p>\n<h2 id=\"四、泛型对象\"><a href=\"#四、泛型对象\" class=\"headerlink\" title=\"四、泛型对象\"></a>四、<mark>泛型对象</mark></h2><p><strong>泛型</strong>：使用尖括号<code>&lt;&gt;</code>来声明类型参数 (可以有多个)来表示暂时未知的类型，在实际声明变量时传入相应的类型 (或者由<code>TS</code>自动推论) 来替换相应出现该类型参数的地方，从而将抽象的、未知的类型替换为具体的、已知的类型。一个类型参数指代一种类型，例如<code>&lt;T,K,U,...&gt;</code>分别指代一种暂时未知的类型。将泛型用于定义对象类型，便得到了<strong>泛型对象</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类型T代表一种暂时未知的类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonInfo</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 传入类型变量string，这时候string就会在相应的地方替换原来的T</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">PersonInfo</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p2</span>: <span class=\"title class_\">PersonInfo</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p3</span>: <span class=\"title class_\">PersonInfo</span>&lt;<span class=\"string\">&quot;男&quot;</span> | <span class=\"string\">&quot;女&quot;</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>泛型对象常用于泛型函数，可参考<a href=\"https://juejin.cn/post/7070172611849748517\">TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇</a>。</p>\n<p><strong>泛型同样可在类型别名中使用</strong>。而类型别名除了定义对象类型之外，还能用泛型来定义各种其它类型。因此，我们可以<strong>使用泛型嵌套来定义更为复杂的类型结构</strong> (孩子已经哭了，难怪都说，玩会了泛型，<code>TS</code>就学完了一半)。本文主要介绍对象类型，关于泛型，以后再专门介绍。如下是官网的一个栗子。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OrNull</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">Type</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OneOrMany</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">Type</span> | <span class=\"title class_\">Type</span>[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OneOrManyOrNull</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">OrNull</span>&lt;<span class=\"title class_\">OneOrMany</span>&lt;<span class=\"title class_\">Type</span>&gt;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OneOrManyOrNullStrings</span> = <span class=\"title class_\">OneOrManyOrNull</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、数组类型\"><a href=\"#五、数组类型\" class=\"headerlink\" title=\"五、数组类型\"></a>五、数组类型</h2><p>我们知道，数组是一种特殊的对象类型。上面简单了解了下泛型，那么我们现在就能知道，原来所谓数值数组、字符串数组等 (<code>number[]</code>，<code>string[]</code> )是泛型数组<code>Array&lt;number&gt;</code>，<code>Array&lt;string&gt;</code>的简写。现代<code>JS</code>也提供了其它新类型的泛型结构，如<code>Map&lt;T, K&gt;</code>，<code>Set&lt;T&gt;</code>，<code>Promise&lt;T&gt;</code>等，类型参数的数量都取决于各类型的自身行为表现。</p>\n<h3 id=\"1-ReadonlyArray-只读数组\"><a href=\"#1-ReadonlyArray-只读数组\" class=\"headerlink\" title=\"1. ReadonlyArray 只读数组\"></a>1. <code>ReadonlyArray</code> 只读数组</h3><p>只读数组是<code>TS</code>提供的一种特殊的数组，它的任何成员都不能被修改。</p>\n<ul>\n<li>无法进行新增、删除、替换等操作，<code>push</code>、<code>pop</code>等修改自身的方法都无法使用。</li>\n<li>可以使用不修改自身的数组方法。例如使用<code>slice</code>方法，返回一个普通的数组</li>\n<li>代表一种类型，无法当作构造函数使用，不能使用<code>new</code>操作符。</li>\n<li>在声明一个只读数组类型的变量时需指定类型参数，只读数组里只能存放该类型的值。</li>\n<li>只读数组类型的变量本身可以接收普通数组的赋值。</li>\n<li>普通数组不能接收只读数组的赋值</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定类型参数number，即该只读数组里只</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">123</span>];</span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\">a.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"><span class=\"comment\">// 可以使用slice方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cc = a.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该变量可以用普通重新赋值</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> val = <span class=\"keyword\">new</span> <span class=\"title class_\">ReadonlyArray</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">aa</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">456</span>];</span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\">aa = a;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Tuple-Types-元组\"><a href=\"#2-Tuple-Types-元组\" class=\"headerlink\" title=\"2. Tuple Types 元组\"></a>2. <code>Tuple Types</code> 元组</h3><p><mark><strong>元组</strong></mark>类型是另一种特殊的数组类型，<strong>一般来说</strong>它可以存储不同类型的成员，<strong>限定了数组的长度及每个成员的类型</strong>。(<strong>普通数组也可以通过指定联合类型的类型参数，从而存放不同类型的成员)</strong>。元组的成员是可以被修改，可以调用一系列的数组方法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"number\">1</span> | <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<p>这里得<code>UserInfo</code>便是一个元组类型，规定了元组里<strong>有且仅有</strong>三个成员，索引为<code>0</code>的成员是<code>string</code>类型，索引为<code>1</code>的成员是<code>number</code>类型，索引为<code>2</code>的成员 是字面量联合类型 <code>1 | 2</code> 。</p>\n<ul>\n<li>元组类型可以被解构。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduceUser</span>(<span class=\"params\">info: UserInfo</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, age, gender] = info;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`我是<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁啦`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>元组也可以指定可选成员</strong>：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三个成员可选</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, (<span class=\"number\">1</span> | <span class=\"number\">2</span>)?];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>元组中可使用剩余参数，来<strong>指定某个或某些索引位置的成员的类型和其它成员的类型</strong>。此时，元组没有长度限制。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">FamilyMember</span> = <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"><span class=\"comment\">// 指定索引0处的类型为string，索引1处的类型为number，剩余类型为FamilyMember</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo1</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, ...<span class=\"title class_\">FamilyMember</span>[]];</span><br><span class=\"line\"><span class=\"comment\">// 同理</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo2</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, ...<span class=\"title class_\">FamilyMember</span>[], <span class=\"built_in\">boolean</span>];</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo3</span> = [...<span class=\"title class_\">FamilyMember</span>[], <span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong><code>readonly</code></strong> 只读元组类型</p>\n<p>我们可以用类似 数组类型的简写方式 来声明一个只读元组：<strong><code>readonly [string, number]</code></strong>，使元组的成员变为只读成员，不可修改。<strong><code>readonly</code>关键字只能用于字面量数组或字面量元组类型之前，不可用于类型别名之前</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cc</span>: <span class=\"keyword\">readonly</span> [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">yy</span>: <span class=\"keyword\">readonly</span> <span class=\"title class_\">UserInfo3</span> = [[<span class=\"string\">&quot;dd&quot;</span>], <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">// 用于字面量元组之前，ok</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">yy</span>: <span class=\"keyword\">readonly</span> [...<span class=\"title class_\">FamilyMember</span>[], <span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>] = [[<span class=\"string\">&quot;dd&quot;</span>], <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错，只读属性不可修改</span></span><br><span class=\"line\">cc[<span class=\"number\">0</span>] = <span class=\"string\">&quot;yy&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>此外，如果我们对数组使用<mark><strong>常量断言</strong></mark>：<strong><code>as const</code></strong>，该数组的类型也会变为只读元组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yy = [<span class=\"string\">&quot;yy&quot;</span>, <span class=\"number\">18</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错，只读属性不可修改</span></span><br><span class=\"line\">yy[<span class=\"number\">0</span>] = <span class=\"string\">&quot;cc&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ReadonlyArray</code>、<code>tuple</code>、<code>readonly tuple</code> 的主要区别。</p>\n<ul>\n<li><code>ReadonlyArray</code> 只读数组：不可修改数组成员，不可增删改，不会为每个数组成员单独指定类型，可以被重新赋值；</li>\n<li><code>tuple</code> 元组：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度；元组可以修改成员的值；可以被重新赋值；</li>\n<li><code>readonly tuple</code>：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度，不可修改成员的值，不可被重新赋值；</li>\n</ul>\n</li>\n</ul>\n<p>关于对象类型就先分享到这里啦。如果觉得我的文章有不妥之处，欢迎在评论区留言指正。下一期聊聊<strong>泛型</strong>，不见不散。</p>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"TypeScript-系列基础篇-三-对象类型\"><a href=\"#TypeScript-系列基础篇-三-对象类型\" class=\"headerlink\" title=\"TypeScript 系列基础篇(三) 对象类型\"></a>TypeScript 系列基础篇(三) 对象类型</h1><p>对象是我们组织数据的基本方式。除了常规的对象类型外，TS 还提供了<strong>只读数组</strong>、<strong>元组</strong>、<strong>属性修饰符</strong>、<strong>索引签名</strong>等知识体系。在前面的章节中，我们已经了解到了对象的基本使用。可以用<strong>字面量</strong>、<strong><code>interface</code></strong>、<strong><code>type alias</code></strong>来规定一个普通的对象类型。现在是时候了解一下常用的对象属性修饰符、类型拓展、索引签名和内置的特殊对象类型了。 还没有对象吗？那就赶紧<code>new</code>一个吧！</p>\n<h2 id=\"一、属性修饰符\"><a href=\"#一、属性修饰符\" class=\"headerlink\" title=\"一、属性修饰符\"></a>一、<mark>属性修饰符</mark></h2><p>利用属性修饰符，我们可以增强对象的属性的约束。</p>\n<h3 id=\"1-可选属性\"><a href=\"#1-可选属性\" class=\"headerlink\" title=\"1. ? 可选属性\"></a>1. <code>?</code> 可选属性</h3><p>可选属性我们在之前就已经有所了解。定义对象类型时，在属性名后面加上英文问号 “<code>?</code>“ ，表示该属性可选。此后，该类型的对象里可以有这个属性，也可以没有。因此，该属性除了我们给它约束了的类型之外，还可能是<code>undefined</code>，从而引发某些问题。在之前的文章中提到过，这可以通过<strong>真值校验</strong>来进行类型缩减，或者给函数的形参设置默认值，从而解决。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 其中gender为可选属性</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  gender?: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 可以有全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 可以缺失可选属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">yy</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-readonly-只读属性\"><a href=\"#2-readonly-只读属性\" class=\"headerlink\" title=\"2. readonly 只读属性\"></a>2. <code>readonly</code> 只读属性</h3><p>在对象的某个或某些属性前加上关键字 <strong><code>readonly</code></strong>，可以设置该属性为只读属性。<strong>对象的只读属性在<code>TS</code>里一般不允许被重新赋值</strong>。只读属性不意味着完全不能修改。如果只读属性是一个对象类型，那我们可以修改它里面的成员。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// id为只读属性，不允许重新赋值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 可以有全部属性</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;42xxxx199x04xxxx1X&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"string\">&quot;Wuhan&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下面这句会报错，因为cc的id信息被设置为只读属性，不可以被重新哦</span></span><br><span class=\"line\">cc.<span class=\"property\">idInfo</span> = &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;xiao cai ji&quot;</span>, <span class=\"attr\">addr</span>: <span class=\"string\">&quot;beijing&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 这样修改就可以啦</span></span><br><span class=\"line\">cc.<span class=\"property\">idInfo</span>.<span class=\"property\">addr</span> = <span class=\"string\">&quot;beijing&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>然而事实上，在<code>TS</code>里我们依然有方法可以让只读属性被重新赋值。由于<code>TS</code>的类型检查机制，在检查两个对象类型是否兼容时，只针对类型，而不会去检测属性是否有 <code>readonly</code> 。例如，下面这两个对象类型是完全相互兼容的。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// id为只读属性，不允许重新赋值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 没有readonly属性，所有成员都可以被赋值</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意Person的属性是只读的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">person</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;gg&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">  <span class=\"attr\">idInfo</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">id</span>: <span class=\"string\">&quot;qaq&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">addr</span>: <span class=\"string\">&quot;zzZ&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 声明一个People类型的对象person，它的属性不是只读的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">people</span>: <span class=\"title class_\">People</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型兼容，具有只读属性的person可以被赋值给people</span></span><br><span class=\"line\"><span class=\"comment\">// 此时people是People类型，其属性可以修改；person是Person类型，其属性只读</span></span><br><span class=\"line\"><span class=\"comment\">// 熟悉JS引用类型的同学们都知道，people和person是同一个对象</span></span><br><span class=\"line\">people = person;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 修改people的属性，我们发现person也会被相应修改，因为他们实际是同一个对象</span></span><br><span class=\"line\">people.<span class=\"property\">name</span> = <span class=\"string\">&quot;pp&quot;</span>;</span><br><span class=\"line\">people.<span class=\"property\">age</span> = <span class=\"number\">20</span>;</span><br></pre></td></tr></table></figure>\n<p>从这个栗子中可以看到，我们可以通过一个<strong>不具有相应只读属性，且属性类型能够兼容</strong>的对象，来重写另一个对象的只读属性。因此，在<strong>使用只读属性时，一定要注意这种情况</strong>，以免引起超出意料的困扰。</p>\n<h2 id=\"二、索引签名\"><a href=\"#二、索引签名\" class=\"headerlink\" title=\"二、索引签名\"></a>二、<mark>索引签名</mark></h2><p>在上一篇文章<a href=\"https://juejin.cn/post/7070172611849748517\">TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇 </a>中，我们了解了函数签名。和这里的<strong>索引签名</strong>多多少少有些相像。</p>\n<p>我们在使用<strong><code>interface</code></strong>或者<strong><code>type alias</code></strong>定义某个对象类型时，以往的做法是列举出所有的属性名并规定它们的值的类型。但是有时候，我们不知道对象里会有哪些属性，无法逐个列出。此时，我们可以使用<mark><strong>索引签名</strong></mark>，来<strong>规定属性名的类型</strong>和对应属性值的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过索引签名，我们可以定义一个伪数组的</span></span><br><span class=\"line\"><span class=\"comment\">// 规定了属性名必须是number</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">StringArray</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">index</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 注意和真数组区分开来</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strArr1</span>: <span class=\"title class_\">StringArray</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;100分&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">5</span>: <span class=\"string\">&quot;95分&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错，因为属性名grades不是number类型，不符合StringArray类型的约束</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">strArr2</span>: <span class=\"title class_\">StringArray</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">grades</span>: <span class=\"string\">&quot;100分&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>当我们使用<code>number</code>类型作为属性名时，<code>JS</code>在把他放进对象之前<strong>会先将其转化为<code>string</code>类型</strong>。索引签名可以和指定属性名,以及属性修饰符混合使用，此时，对象中必须包含列举出的属性(可选属性除外)，而且可拓展符合索引签名的约束的属性。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"number\">50</span>?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"string\">&quot;满意100&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">6</span>: <span class=\"string\">&quot;我是由索引签名拓展的属性&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">yy</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">0</span>: <span class=\"string\">&quot;QAQ&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"string\">&quot;555~&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">50</span>: <span class=\"string\">&quot;0.0&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>索引签名可以不止一套，但是<strong>各个索引签名的返回值应该互相兼容</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  [<span class=\"attr\">y</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以<strong>在索引签名的签名加上<code>readonly</code>关键字，使被签名的属性变为只读属性。</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cc</span>: <span class=\"title class_\">Person</span> = &#123;</span><br><span class=\"line\">  <span class=\"number\">2</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"number\">5</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"number\">10</span>: <span class=\"string\">&quot;boi&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、类型拓展\"><a href=\"#三、类型拓展\" class=\"headerlink\" title=\"三、类型拓展\"></a>三、<mark>类型拓展</mark></h2><p>我们可以从已有的对象类型的配置中，生成一个全新的类型，使其不仅含有原来类型的所有属性，还能拥有自己独有的属性。这样可以方便地实现类型复用，避免过多地重复敲代码，提高我们的工作效率。在定义新类型时，<strong>使用 <code>interface</code> 和 <code>type</code> 关键字，实现类型拓展的方式会有差别</strong>。</p>\n<h3 id=\"1-类型继承\"><a href=\"#1-类型继承\" class=\"headerlink\" title=\"1. 类型继承\"></a>1. 类型继承</h3><p>使用<strong><code>interface</code></strong>关键字声明的对象类型，可以通过<strong><code>extends</code></strong>关键字来继承其它的对象类型，从而<strong>直接获得父类型的所有属性配置、属性签名，而不必重复列举一遍</strong>。<strong>可以同时继承多个对象类型</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> B &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// C类型继承A类型，包含name属性，不添加其它属性</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> C <span class=\"keyword\">extends</span> A &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// CC类型继承A，B类型，包含name, age, 以及自己列举的gender属性</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> CC <span class=\"keyword\">extends</span> A, B &#123;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-类型交叉\"><a href=\"#2-类型交叉\" class=\"headerlink\" title=\"2. 类型交叉\"></a>2. 类型交叉</h3><p>通过<strong><code>type</code></strong>关键字给一个对象类型起<strong>别名</strong>时，使用 <code>&amp;</code> 符号来连接多个类型，从而产生一个新类型，新的类型包含所有其它对象类型的属性，即类型交叉。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> B &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类型CC包含name和age属性</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">CC</span> = A &amp; B;</span><br></pre></td></tr></table></figure>\n<p>值得一提的是，如果 <code>&amp;</code> 连接的是简单联合类型，则产生的新类型是 <code>&amp;</code> 符号两边类型的公有类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"built_in\">string</span>[] | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// C是A和B共有的类型，number类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> C = A &amp; B;</span><br></pre></td></tr></table></figure>\n<p>这一点 和 <code>&amp;</code>在对象类型之间的使用看起来完全不同，起初我也有些疑惑。但是我们可以从本质上来思考，就不再有疑惑了。在关键字 type 定义的类型别名中，使用 <code>&amp;</code> 符号连接已有的类型可以产生一个新的类型，这个<strong>新类型需要同时满足 <code>&amp;</code> 符号两边的类型的约束</strong>。</p>\n<p>因此，在<strong>对象类型的栗子</strong>中，新类型<code>CC</code>既需要满足<code>A</code>类型的约束 (因此<code>CC</code>必须有<code>A</code>的所有属性)，又必须满足类型 B 的约束 (因此必须含有类型 B 的所有属性)，即<code>CC</code>具有<code>A</code>和<code>B</code>的所有属性。</p>\n<p>而在<strong>简单联合类型</strong>的栗子中，新类型<code>C</code>既要满足 A 的类型约束 (要么<code>C</code>是<code>number</code>, 要么是<code>string</code>)，又要满足类型<code>B</code>的约束 (要么<code>C</code>是字符串数组<code>string[]</code>，要么是<code>number</code>)，因此最终得到的<code>C</code>是<code>number</code>。</p>\n<h2 id=\"四、泛型对象\"><a href=\"#四、泛型对象\" class=\"headerlink\" title=\"四、泛型对象\"></a>四、<mark>泛型对象</mark></h2><p><strong>泛型</strong>：使用尖括号<code>&lt;&gt;</code>来声明类型参数 (可以有多个)来表示暂时未知的类型，在实际声明变量时传入相应的类型 (或者由<code>TS</code>自动推论) 来替换相应出现该类型参数的地方，从而将抽象的、未知的类型替换为具体的、已知的类型。一个类型参数指代一种类型，例如<code>&lt;T,K,U,...&gt;</code>分别指代一种暂时未知的类型。将泛型用于定义对象类型，便得到了<strong>泛型对象</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类型T代表一种暂时未知的类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">PersonInfo</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 传入类型变量string，这时候string就会在相应的地方替换原来的T</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p1</span>: <span class=\"title class_\">PersonInfo</span>&lt;<span class=\"built_in\">string</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p2</span>: <span class=\"title class_\">PersonInfo</span>&lt;<span class=\"built_in\">number</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p3</span>: <span class=\"title class_\">PersonInfo</span>&lt;<span class=\"string\">&quot;男&quot;</span> | <span class=\"string\">&quot;女&quot;</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"attr\">info</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>泛型对象常用于泛型函数，可参考<a href=\"https://juejin.cn/post/7070172611849748517\">TS 中的函数签名，函数重载，泛型函数，你都了解多少？Typescript 系列：(二)函数篇</a>。</p>\n<p><strong>泛型同样可在类型别名中使用</strong>。而类型别名除了定义对象类型之外，还能用泛型来定义各种其它类型。因此，我们可以<strong>使用泛型嵌套来定义更为复杂的类型结构</strong> (孩子已经哭了，难怪都说，玩会了泛型，<code>TS</code>就学完了一半)。本文主要介绍对象类型，关于泛型，以后再专门介绍。如下是官网的一个栗子。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OrNull</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">Type</span> | <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OneOrMany</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">Type</span> | <span class=\"title class_\">Type</span>[];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OneOrManyOrNull</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">OrNull</span>&lt;<span class=\"title class_\">OneOrMany</span>&lt;<span class=\"title class_\">Type</span>&gt;&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OneOrManyOrNullStrings</span> = <span class=\"title class_\">OneOrManyOrNull</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、数组类型\"><a href=\"#五、数组类型\" class=\"headerlink\" title=\"五、数组类型\"></a>五、数组类型</h2><p>我们知道，数组是一种特殊的对象类型。上面简单了解了下泛型，那么我们现在就能知道，原来所谓数值数组、字符串数组等 (<code>number[]</code>，<code>string[]</code> )是泛型数组<code>Array&lt;number&gt;</code>，<code>Array&lt;string&gt;</code>的简写。现代<code>JS</code>也提供了其它新类型的泛型结构，如<code>Map&lt;T, K&gt;</code>，<code>Set&lt;T&gt;</code>，<code>Promise&lt;T&gt;</code>等，类型参数的数量都取决于各类型的自身行为表现。</p>\n<h3 id=\"1-ReadonlyArray-只读数组\"><a href=\"#1-ReadonlyArray-只读数组\" class=\"headerlink\" title=\"1. ReadonlyArray 只读数组\"></a>1. <code>ReadonlyArray</code> 只读数组</h3><p>只读数组是<code>TS</code>提供的一种特殊的数组，它的任何成员都不能被修改。</p>\n<ul>\n<li>无法进行新增、删除、替换等操作，<code>push</code>、<code>pop</code>等修改自身的方法都无法使用。</li>\n<li>可以使用不修改自身的数组方法。例如使用<code>slice</code>方法，返回一个普通的数组</li>\n<li>代表一种类型，无法当作构造函数使用，不能使用<code>new</code>操作符。</li>\n<li>在声明一个只读数组类型的变量时需指定类型参数，只读数组里只能存放该类型的值。</li>\n<li>只读数组类型的变量本身可以接收普通数组的赋值。</li>\n<li>普通数组不能接收只读数组的赋值</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 指定类型参数number，即该只读数组里只</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">ReadonlyArray</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">123</span>];</span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\">a.<span class=\"title function_\">pop</span>();</span><br><span class=\"line\"><span class=\"comment\">// 可以使用slice方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> cc = a.<span class=\"title function_\">slice</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 该变量可以用普通重新赋值</span></span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> val = <span class=\"keyword\">new</span> <span class=\"title class_\">ReadonlyArray</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">aa</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt; = [<span class=\"number\">456</span>];</span><br><span class=\"line\"><span class=\"comment\">// 错误</span></span><br><span class=\"line\">aa = a;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Tuple-Types-元组\"><a href=\"#2-Tuple-Types-元组\" class=\"headerlink\" title=\"2. Tuple Types 元组\"></a>2. <code>Tuple Types</code> 元组</h3><p><mark><strong>元组</strong></mark>类型是另一种特殊的数组类型，<strong>一般来说</strong>它可以存储不同类型的成员，<strong>限定了数组的长度及每个成员的类型</strong>。(<strong>普通数组也可以通过指定联合类型的类型参数，从而存放不同类型的成员)</strong>。元组的成员是可以被修改，可以调用一系列的数组方法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, <span class=\"number\">1</span> | <span class=\"number\">2</span>];</span><br></pre></td></tr></table></figure>\n<p>这里得<code>UserInfo</code>便是一个元组类型，规定了元组里<strong>有且仅有</strong>三个成员，索引为<code>0</code>的成员是<code>string</code>类型，索引为<code>1</code>的成员是<code>number</code>类型，索引为<code>2</code>的成员 是字面量联合类型 <code>1 | 2</code> 。</p>\n<ul>\n<li>元组类型可以被解构。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">introduceUser</span>(<span class=\"params\">info: UserInfo</span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, age, gender] = info;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">`我是<span class=\"subst\">$&#123;name&#125;</span>，今年<span class=\"subst\">$&#123;age&#125;</span>岁啦`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>元组也可以指定可选成员</strong>：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三个成员可选</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, (<span class=\"number\">1</span> | <span class=\"number\">2</span>)?];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>元组中可使用剩余参数，来<strong>指定某个或某些索引位置的成员的类型和其它成员的类型</strong>。此时，元组没有长度限制。</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">FamilyMember</span> = <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"><span class=\"comment\">// 指定索引0处的类型为string，索引1处的类型为number，剩余类型为FamilyMember</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo1</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, ...<span class=\"title class_\">FamilyMember</span>[]];</span><br><span class=\"line\"><span class=\"comment\">// 同理</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo2</span> = [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>, ...<span class=\"title class_\">FamilyMember</span>[], <span class=\"built_in\">boolean</span>];</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UserInfo3</span> = [...<span class=\"title class_\">FamilyMember</span>[], <span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong><code>readonly</code></strong> 只读元组类型</p>\n<p>我们可以用类似 数组类型的简写方式 来声明一个只读元组：<strong><code>readonly [string, number]</code></strong>，使元组的成员变为只读成员，不可修改。<strong><code>readonly</code>关键字只能用于字面量数组或字面量元组类型之前，不可用于类型别名之前</strong>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">cc</span>: <span class=\"keyword\">readonly</span> [<span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>] = [<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>];</span><br><span class=\"line\"><span class=\"comment\">// 报错</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">yy</span>: <span class=\"keyword\">readonly</span> <span class=\"title class_\">UserInfo3</span> = [[<span class=\"string\">&quot;dd&quot;</span>], <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"comment\">// 用于字面量元组之前，ok</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">yy</span>: <span class=\"keyword\">readonly</span> [...<span class=\"title class_\">FamilyMember</span>[], <span class=\"built_in\">string</span>, <span class=\"built_in\">number</span>] = [[<span class=\"string\">&quot;dd&quot;</span>], <span class=\"string\">&quot;1&quot;</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错，只读属性不可修改</span></span><br><span class=\"line\">cc[<span class=\"number\">0</span>] = <span class=\"string\">&quot;yy&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>此外，如果我们对数组使用<mark><strong>常量断言</strong></mark>：<strong><code>as const</code></strong>，该数组的类型也会变为只读元组。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> yy = [<span class=\"string\">&quot;yy&quot;</span>, <span class=\"number\">18</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 报错，只读属性不可修改</span></span><br><span class=\"line\">yy[<span class=\"number\">0</span>] = <span class=\"string\">&quot;cc&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>ReadonlyArray</code>、<code>tuple</code>、<code>readonly tuple</code> 的主要区别。</p>\n<ul>\n<li><code>ReadonlyArray</code> 只读数组：不可修改数组成员，不可增删改，不会为每个数组成员单独指定类型，可以被重新赋值；</li>\n<li><code>tuple</code> 元组：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度；元组可以修改成员的值；可以被重新赋值；</li>\n<li><code>readonly tuple</code>：一般指定了长度和各个成员的类型，使用剩余参数法来声明元组类型时则没有限制长度，不可修改成员的值，不可被重新赋值；</li>\n</ul>\n</li>\n</ul>\n<p>关于对象类型就先分享到这里啦。如果觉得我的文章有不妥之处，欢迎在评论区留言指正。下一期聊聊<strong>泛型</strong>，不见不散。</p>\n"},{"title":"TypeScript系列  基础篇(五)  Classes 类","date":"2022-03-04T17:07:00.000Z","updated":"2022-03-04T17:07:00.000Z","keywords":["前端","TypeScript","TS","Class"],"archive":"TypeScript","swiper_index":50,"_content":"\n# TypeScript 系列 基础篇(五) Classes 类\n\n**类** 在 `JavaScript` 中出现于 `ES2015` 版本，`TS`对 类 进行了全面支持，还加入了一些其它语法来增强类的表达能力，本文将详细聊一聊`TS`中的类的知识，你知道的和不知道的，这里都有。\n\n## 一、类的成员\n\n### 1. 属性字段 (`Fields`)\n\n字段声明会为类添加创建一个**公共**的**可写**的**实例属性**。我们可以为字段添加类型注释，如果不添加，就会是 `any` 类型，当然这是我们不希望发生的。\n\n```typescript\nclass Person {\n  name: string;\n  age: number;\n  gender; // gender为 any 类型\n}\n```\n\n字段声明时可以赋初值，其类型会被 TS 自动推论，在实例化时会自动执行值的初始化。\n\n```typescript\nclass Person {\n  name = \"cc\"; // name为string类型\n  age = 18; // age 为 string 类型\n  gender: 1 | 2 = 2; // 如果不注释类型，则gender会被推论为number\n}\n\nconst cc = new Person();\ncc.name; // 'cc'\ncc.age; // 18\n```\n\n如果开启了严格属性初始化检查： **`strictPropertyInitialization`**，则**没有赋初值**的字段**必须在构造函数中初始化**，不能在其它的方法中初始化，TS 不会去检测其它方法内的初始化。\n\n```typescript\nclass Person {\n  name = \"cc\"; // name为string类型\n  age: number;\n  constructor() {\n    this.age = 18;\n  }\n}\n```\n\n事实上，开启该检测是为了防止属性值为空带来的意外错误。我们可以使用**非空断言**来明确该属性不会为空，这样也不会报错。\n\n```typescript\nclass Person {\n  name!: number; // 非空断言\n}\n```\n\n### 2. _`readonly`_ 只读属性\n\n添加了 **`readonly`** 修饰符的属性，将**不允许在构造函数以外的地方中进行重新赋值**。\n\n```typescript\nclass Person {\n  readonly name: string = \"cc\"; // 只读属性\n  constructor() {\n    this.name = \"yy\"; // 可以构造函数中赋值，因为构造函数相当于初始化\n  }\n  setName() {\n    this.name = \"hi\"; // 报错，只读属性不允许重新赋值\n  }\n}\n// 也不可在类以外进行赋值\nconst cc = new Person();\ncc.name = \"cc\"; // 报错，只读属性不允许重新赋值\n```\n\n### 3. `constructor` 构造函数\n\n构造函数接收实例化时传入的参数，可以提供参数默认值。在构造函数中进行类实例的初始化操作，可以分配属性值、调用类的方法等。\n\n```typescript\nclass Person {\n  name: string;\n  constructor(name = \"cc\") {\n    this.name = name;\n  }\n}\n```\n\n还记得我们在[Typescript 系列：(二)函数篇](https://juejin.cn/post/7070172611849748517)里讲的函数重载吗？构造函数自然也可以重载。注意构造函数的**重载签名**和**实现签名**是没有返回值类型的。\n\n```typescript\nclass Person {\n  name: string;\n  // 两套重载签名\n  constructor(name: number);\n  constructor(name: string, age: number);\n  // 实现签名\n  constructor(name: number | string, age?: number) {\n    // ...\n  }\n}\n```\n\n### 4. 调用 _`super( )`_\n\n我们知道，类可以通过 **`extends`** 关键字来继承一个基类。此时，我们在构造函数中使用 **`this`** 关键字**之前**需要先调用 **`super( )`** ，相当于调用了父类的构造函数。\n\n```typescript\nclass Person {\n  name: string;\n}\n\n// 错误，没有在构造函数中先调用super()，就使用了this\nclass User1 extends Person {\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n// 正确\nclass User2 extends Person {\n  constructor(name: string) {\n    super();\n  }\n}\n```\n\n### 5. `methods` 方法\n\n类里面的函数叫做方法。**声明一个方法不要用 `function` 关键字**。\n\n```typescript\nclass Person {\n  name: string;\n  constructor(name = \"cc\") {\n    this.name = name;\n  }\n  // setName方法\n  setName(name: string): void {\n    this.name = name;\n  }\n}\n```\n\n### 6. 存取器 `setters/getters`\n\n和 `JS` 里没什么差别。\n\n```typescript\nclass Person {\n  _name: string;\n  constructor(name = \"cc\") {\n    this._name = name;\n  }\n  // setter\n  set name(name: string): void {\n    this._name = name;\n  }\n  get name(): string {\n    return this._name;\n  }\n}\n```\n\n对于存取器，`TS`有几个特别的推论：\n\n- 如果有 `get` 而没有 `set`，则该属性会被推论为 `readonly` 只读属性；\n- 如果 `setter` 没有明确参数的类型，则会推论为 `getter` 的返回值的类型；\n- `getter` 和 `setter` 的可见性保持一致。\n\n### 7. 索引签名\n\n类 也可以使用索引签名，和在对象类型里使用差不多。\n\n```typescript\nclass Person {\n  [x: string]: string | number | ((s?: string) => string | number);\n\n  name = 1;\n  getName() {\n    return this.name;\n  }\n}\n```\n\n## 二、类的继承\n\n### 1. `implement` 语句\n\n使用 **`implements`** 语句检查类是否符合某接口规范。实现某个接口，则类中需要含有该接口的所有属性和方法才能通过检测。\n\n```typescript\ninterface Person {\n  name: string;\n  setName: (x: string) => void;\n}\n\n// People类 实现 Person 接口\nclass People implements Person {\n  name: string = \"cc\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n```\n\n可以同时实现多个接口：\n\n```typescript\ninterface Person {\n  name: string;\n  setName: (x: string) => void;\n}\n\ninterface Manager {\n  id: string;\n}\n\n// People类 实现 Person 接口\nclass People implements Person, Manager {\n  name: string = \"cc\";\n  id: string = \"001\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n```\n\n注意 **implements** 语句只是检测类是否符合接口规范。\n\n### 2. `extends` 语句\n\n- 通过 `extends` 语句可以让类继承一个基类，获得它所有的属性和方法，还能定义自己的属性和方法。\n\n```typescript\nclass Person {\n  name: string = \"cc\";\n}\n\nclass Manager extends Person {}\n\nlet cc = new Manager();\ncc.name; // 'cc'\n```\n\n- 重写父类方法，可以通过 `super.xx( )` 来调用父类的方法。子类的方法需要能兼容父类的方法，包括参数数量、类型，以及返回值。\n\n```typescript\nclass Person {\n  name: string = \"cc\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n\nclass Manager extends Person {\n  setName(name: string | number) {\n    if (typeof name === \"number\") {\n      this.name = String(name + 100);\n    } else {\n      super.setName();\n    }\n  }\n}\n\nlet cc = new Manager();\ncc.setName(99);\ncc.name; // '199'\n```\n\n- 字段类型声明\n\n在父类的构造函数执行完之后，才会开始子类的初始化，期间可能改写来自父类的属性或方法。当 子类的某个属性 是 父类相应属性 的子类型时，这个过程就会浪费性能。可以通过 **_`declare`_** 关键字来声明字段类型，使其不受运行时效果的影响。\n\n```typescript\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  bark: () => void;\n}\n\nclass AnimalHouse {\n  resident: Animal;\n  constructor(animal: Animal) {\n    this.resident = animal;\n  }\n}\n\nclass DogHouse extends AnimalHouse {\n  // 通过declare关键字，使resident属性的类型固定为Dog\n  declare resident: Dog;\n  constructor(dog: Dog) {\n    // 不要忘记调用super()\n    super();\n  }\n}\n```\n\n- 初始化顺序\n\n父类字段初始化 --> 父类构造函数执行 --> 子类字段初始化 --> 子类构造函数执行\n\n### 3. 继承内置类型\n\n继承内置类型，如`Array`、`Error`等，当在构造函数中调用`super( )`之后，`this`的原型指向会错误地指向`super`的调用者，即`Array`、`Error`等内置类型。`ES6`使用 **`new.target`** 来调整原型链，但是在 `ES5` 中却保证不了 `new.target` 的值。因此，我们在调用`super()`之后，要手动调整原型链，让`this`的原型指向我们新的类。 **`Object.setPrototypeOf( )`** 便是要用的方法 (不支持该方法的可以退一步使用`Object.prototype.__proto__` )。\n\n```typescript\nclass MsgError1 extends Error {\n  naame = 123;\n  constructor(m: string) {\n    super(m);\n  }\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n\n//\nlet m1 = new MsgError1(\"cc\");\n// 由于原型链错误，sayHello方法在MsgError的原型上，\n// 而m1的原型指向Error，索引没有sayHello方法\nm1.sayHello(); // 报错\n\nclass MsgError2 extends Error {\n  naame = 123;\n  constructor(m: string) {\n    super(m);\n    Object.setPrototypeOf(this, MsgError2.prototype);\n  }\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n\nlet m2 = new MsgError2(\"cc\");\nm2.sayHello(); // 正确\n```\n\n需要注意，这种问题会一直传递下去，也就是说，**以 `MsgError2` 为基类所创造的子类，也需要再次手动调整原型的指向**。此外，不支持`IE10`及更低的版本。\n\n## 三、成员的可见性 `Member Visibility`\n\n在 TS 中，实现了 `public`，`protected`，`private`等修饰符来实现成员的可见性。\n\n### 1. `public`\n\n**`public`** 修饰符用来定义公开成员，这也是默认的成员可见性，当没有写可见性修饰符时，就默认是 `public` 。被声明为`public`的成员，可在任何地方访问。太简单了就不给栗子了。\n\n## 2. `protected`\n\n被 **`protected`** 修饰的成员只能在类或者其子类中访问，无法通过实例来访问。\n\n```typescript\nclass Person {\n  protected name: string;\n  constructor(name: string) {\n    // 类中可以\n    this.name = name;\n  }\n  getName() {\n    return this.name;\n  }\n}\n\nconst cc = new Person(\"cc\");\ncc.name; // TS会报错，实例无法访问protected成员\n```\n\n在子类中，如果我们通过字段重新声明了基类中的 `protected` 成员，则会将其在子类中变为 `public` 成员，除非重新加上 `protected` 修饰符：\n\n```typescript\nclass Person {\n  protected name: string;\n  protected age: number;\n}\n\nclass Manager extends Person {\n  // 不加 protected 修饰符， 则name变为public，通过实例来访问\n  name: string;\n  // 而这个则依然是protected成员\n  protected age: number;\n  constructor(name: string, age: number) {\n    super();\n    this.name = name;\n    this.age = age;\n  }\n}\n\nconst cc = new Manager(\"cc\", 18);\ncc.name; // 'cc'\n// 报错，实例无法调用 protected\ncc.age;\n```\n\n### 3. `private`\n\n被 **`private`** 修饰的成员只能在类中访问，无法通过实例来访问，也无法在其子类中访问。\n\n```typescript\nclass Person {\n  private name: string;\n}\n\nclass Manager extends Person {\n  // 错误，private成员不能在子类中访问\n  name: string;\n  constructor(name: string, age: number) {\n    super();\n    // 同样错误，private成员不能在子类中访问\n    this.name = name;\n  }\n}\n\nconst cc = new Person(\"cc\", 18);\ncc.name; // 也错误，private成员不能通过实例来访问\n```\n\n但是在`TS`中支持在类中通过同类的其它实例获取该实例上的`private`成员：\n\n```typescript\nclass Person {\n  private name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  hasSameName(other: Person) {\n    // 可以访问其它同类实例的 private 成员name\n    return this.name === other.name;\n  }\n}\n\nconst cc = new Person(\"cc\");\nconst yy = new Person(\"yy\");\ncc.hasSameName(yy); // 不报错，得到false\n```\n\n需要注意，成员可见性仅在 `TS` 的类型检查时有效。一旦代码被编译为 `JS` 代码，则在`JS`中，可以通过类实例查看原本在`TS`是 `pretected` 或 `private` 的成员。另外 `JS` 的私有修饰符 \"`#`\" 可以实现在编译后依然是私有成员。因此，如果要实现通过私有化来保护成员，应使用闭包、`WeakMap`或私有字段 \"`#`\" 等手段。\n\n## 四、静态成员 `static`\n\n首先我们要明确一点，类本身也是一个对象。我们通过**_`static`_**修饰符可以将某个成员变成静态成员。**静态成员与类的实例无关，而是被挂到类对象本身，可以与实例成员重名，且静态方法中的 `this` 指向类对象本身，我们通过类对象本身来访问类成员**。\n\n```typescript\nclass Person {\n  // 这是实例成员\n  _name: string;\n  constructor(name: string) {\n    // 给实例成员name赋值\n    this._name = name;\n  }\n  // 静态属性 name\n  static _name: string = \"person\";\n  // 静态方法 其中的this指向类Person\n  static setName(name: string) {\n    this._name = name;\n    console.log(this); // class Person { // ... }\n  }\n}\n\nconst cc = new Person(\"cc\");\n// 访问实例成员_name\ncc._name; // 'cc'\n// 访问静态成员_name\nPerson._name; // 'person'\n```\n\n也许你会好奇我为什么用 `_name` 而不是` name`，事实上不是我不使用，而是不能使用。稍后你会得到答案。\n\n静态成员也可以使用 `public`、`protected`、`private`等修饰符。类似的，**`protected` 静态属性 只能由类或子类中的静态成员访问；`private`静态成员只能由 类 中的静态成员访问**。\n\n```typescript\nclass Person {\n  protected static _name = \"person\";\n}\n\nPerson._name; // 报错，不能访问protected成员\n```\n\n静态成员可以被子类继承：\n\n```typescript\nclass Person {\n  static _name = \"person\";\n  static setName(name: string) {\n    this._name = name;\n  }\n}\n\nclass Manager extends Person {}\n\nManager._name; // 'person'\nManager.setName(\"cc\");\nManager._name; // 'cc'\n```\n\n特殊的静态名字：**`name`** ，由于存在内置静态属性 **`Function.name`**，因此我们在给静态属性命名时，不能使用`name`，否则会发生冲突。\n\n```typescript\nclass Person {\n  // 错误，静态属性name与内置静态属性 Function.name 冲突\n  static name = \"person\";\n}\n```\n\n## 五、静态域\n\n我将类中的 `static blocks` 称为静态域，通过 **_`static { }`_**声明一块区域，在该区域编写的语句能够自动执行，且能访问私有属性 如 \"`#name`\"。因此，可以在静态域中书写静态成员做初始化逻辑。这里想不出什么好的栗子，就搬运了官网的：\n\n```typescript\nclass Foo {\n  static #count = 0;\n\n  get count()\n    return Foo.#count;\n  }\n  static {\n    try {\n      const lastInstances = loadLastInstances();\n      Foo.#count += lastInstances.length;\n    }\n    catch {}\n  }\n}\n```\n\n## 六、泛型类\n\n在执行`new`操作时，泛型类的类型参数也会由传入的参数来进行推论。\n\n```typescript\nclass Person<T> {\n  name: T;\n  constructor(name: T) {\n    this.name = name;\n  }\n  setName(name: T) {\n    this.name = name;\n  }\n}\n\nconst cc = new Person(\"cc\"); // T被推论\n```\n\n泛型类可以像泛型接口一样进行泛型约束以及指定类型参数的默认值。大家都能明白的吧，就不给栗子了。\n\n静态成员无法享用泛型：\n\n```typescript\nclass Person<T> {\n  // 错误，静态成员不可引用类型参数\n  static _name: T;\n}\n```\n\n这是因为每个静态成员都只有一个，而实例成员在每个实例上都存在一个。假若静态成员能享用泛型，那么我们`new`一个实例`a`，传入类型`string`，此时静态属性`_name`类型为`string`；我们`new` 一个实例`b`，传入类型`number`，那么此时静态属性\\_`name`的类型是啥呢？`string`亦或`number` ? 显然都不合理。所以静态成员无法使用类型参数。\n\n## 七、运行时的 `this`\n\n`Ts`中的`this`指向和 `JS` 保持一致，因此有时候我们需要防止成员丢失`this`上下文。\n\n### 1. 使用箭头函数\n\n```typescript\nclass Person {\n  name: string;\n  setName = (name: string) => {\n    this.name = name;\n  };\n}\n```\n\n但是这也需要权衡利弊：\n\n- 这样做能保证`setName`方法的`this`永远正确地指向实例本身；\n- 使用中这种方式定义的方法不会挂载原型上，而是会被添加到每一个实例上，因此会占用更多的内存；\n- 同样，其子类无法通过`super`,`setName`来调用父类的`setName`方法，因为无法在原型链上找到；\n\n### 2. 使用 `this` 参数\n\n如同在`TS`的函数中将`this`作为参数，为其指定类型一样，在类的方法中也可以如此这般。\n\n```typescript\nclass Person {\n  name: string;\n  // 为this指定类型为 Person，则只有Person实例才可以调用该方法\n  setName(this: Person, name: string) {\n    this.name = name;\n  }\n}\n```\n\n这种方式很好地弥补了箭头函数的不足，唯一的缺点就是习惯了 `JS` 思维的同学可能会试图通过其它对象来调用该方法，显然这样是不会成功的。\n\n## 八、 _把 `this` 作为 类型_\n\n**首先要说，这玩意儿非常有用**。在`TS`的类中，`this` 可以作为一种特殊的类型，由当前的类进行动态推论。\n\n```typescript\nclass Person {\n  name: string;\n  // 把 this 作为形参person的类型\n  setName(person: this) {\n    this.name = person.name;\n    return this;\n  }\n}\n\nconst a = new Person();\nconst b = a.setName(a); // b的类型为当前的类 Person\n```\n\n这里得`setName`返回了`this`，这个`this`是表示实例值，其类型被推论为 `this`，这个`this`表示类型。`this` 类型就会在`setName`调用时被动态推论为当前的类。这样的好处是在子类中可以也自动推论为子类。例如我们在`Person`类的实例中调用`setName`，返回值的类型就是`Person`；如果在`Person`的子类`Manager`的实例中调用`setName`，返回值的类型则是`Person`的子类`Manage`r：\n\n```typescript\nclass Person {\n  name: string;\n  // 把 this 作为形参person的类型\n  setName(person: this) {\n    this.name = person.name;\n    return this;\n  }\n}\n\nclass Manager extends Person {}\n\nconst y = new Person();\nconst yy = y.setName(y); // aa的类型为Person\n\nconst c = new Manager();\nconst cc = c.setName(c); // cc的类型为Manager\n```\n\n**基于 `this` 类型的 类型守卫**：和在函数中一样，我们可以在类或接口的方法的返回值的类型的位置使用**_`this is Type`_**来进行类型缩减。写个最简单的栗子吧，实在是懒癌犯了 `qwq`。\n\n```typescript\nclass Person {\n  name? = 'cc'\n}\n\nclass Manager extends Person {\n  // 类型守卫的 this 为类型\n  isPerson()this is Person {\n    // return 语句的 this 指代类实例\n    return this instanceof Person\n  }\n\n  // 可以利用 基于 this 类型的类型守卫 来进行类型缩减\n  hasName()this is {name: string} {\n    return this.name !== undefined\n  }\n}\n\nconst cc = new Person()\n// 利用类型守卫来进行类型缩减\nif(cc.hasName()){\n  // ...\n}\n```\n\n## 九、参数属性\n\n参数属性是`TS`提供的一个非常方便的语法。在构造函数的参数前加上 `public`、`protected`、`private`或者`readonly`等修饰符，就可以把普通参数变为参数属性。参数属性既是构造函数的参数，又会作为实例属性自动被添加到实例上，且在传参时自动进行赋值，无需在函数体内进行赋值操作。\n\n```typescript\nclass Person {\n  constructor(\n    public name: string,\n    protected age: number,\n    private gender: 1 | 2\n  ) {\n    // 不需要在这里再进行赋值\n  }\n  setAge(age: number) {\n    this.age = age;\n  }\n  getAge() {\n    return this.age;\n  }\n}\nconst cc = new Person(\"cc\", 18, 2);\ncc.name; // 'cc'\ncc.setAge(20);\ncc.getAge(); // 20\ncc.gender; // 报错，private属性不能通过实例\n```\n\n## 十、类表达式\n\n类似函数表达式，没啥说的，直接上栗子：\n\n```typescript\nconst Person = class {\n  name: string = \"cc\";\n};\n\nconst cc = new Person();\ncc.name; // 'cc'  cc的类型是Person\n```\n\n## 十一、_abstract_ 抽象类及其成员\n\n含有抽象成员的类为抽象类。抽象类和抽象成员都需要在前面加上 **`abstract`** 修饰符。抽象类不能使用 `new` 进行实例化，而是用来作为**基类**，声明一些抽象方法或抽象属性，其子类需要实现所有这些方法或属性。\n\n```typescript\nabstract class Person {\n  abstract name: string;\n  abstract setName(x: string): void;\n}\n\n// 子类必须包含父类的全部\nclass Manager extends Person {\n  name: string = \"manager\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n```\n\n## 十二、类成员之间的关系\n\n和其它类型一样，类之间也是通过结构来进行比较的，当拥有相同的成员，则可以相互替换；当一个类`A`中含有另一个类`B`的所有成员，尽管没有显示地通过 `extends` 继承，类 `A` 依然会被认为是类 `B` 的子类。\n\n```typescript\nclass Person {\n  name: string;\n}\n\nclass Manager {\n  name: string;\n  age: number;\n}\n// 不会报错\nconst person: Person = new Manager();\n```\n\n这看起来很直观简单，不过少数情况下会看起来有些 `emmm`，怪怪的。拿个官方栗子来：\n\n```typescript\nclass Empty {}\n\nfunction fn(x: Empty) {\n  // 啥也不做\n}\n\n// 以下这几个都没问题，也就是说，它们都是空类 Empty 的子类\n// bigint和symbol不是\nfn(window);\nfn({});\nfn(fn);\nfn(0);\nfn(undefined);\n```\n\n关于类的知识就分享到这里啦，下一篇 分享 `TS` 中的 **_模块_** 的内容，不见不散！\n","source":"_posts/TypeScript 系列/基础篇/TypeScript系列  基础篇(五)  Classes 类.md","raw":"---\ntitle: TypeScript系列  基础篇(五)  Classes 类\ndate: 2022-03-05 01:07\nupdated: 2022-03-05 01:07\nkeywords:\n  - 前端\n  - TypeScript\n  - TS\n  - Class\ntags:\n  - TypeScript\n  - 前端\narchive: TypeScript\nswiper_index: 50\n---\n\n# TypeScript 系列 基础篇(五) Classes 类\n\n**类** 在 `JavaScript` 中出现于 `ES2015` 版本，`TS`对 类 进行了全面支持，还加入了一些其它语法来增强类的表达能力，本文将详细聊一聊`TS`中的类的知识，你知道的和不知道的，这里都有。\n\n## 一、类的成员\n\n### 1. 属性字段 (`Fields`)\n\n字段声明会为类添加创建一个**公共**的**可写**的**实例属性**。我们可以为字段添加类型注释，如果不添加，就会是 `any` 类型，当然这是我们不希望发生的。\n\n```typescript\nclass Person {\n  name: string;\n  age: number;\n  gender; // gender为 any 类型\n}\n```\n\n字段声明时可以赋初值，其类型会被 TS 自动推论，在实例化时会自动执行值的初始化。\n\n```typescript\nclass Person {\n  name = \"cc\"; // name为string类型\n  age = 18; // age 为 string 类型\n  gender: 1 | 2 = 2; // 如果不注释类型，则gender会被推论为number\n}\n\nconst cc = new Person();\ncc.name; // 'cc'\ncc.age; // 18\n```\n\n如果开启了严格属性初始化检查： **`strictPropertyInitialization`**，则**没有赋初值**的字段**必须在构造函数中初始化**，不能在其它的方法中初始化，TS 不会去检测其它方法内的初始化。\n\n```typescript\nclass Person {\n  name = \"cc\"; // name为string类型\n  age: number;\n  constructor() {\n    this.age = 18;\n  }\n}\n```\n\n事实上，开启该检测是为了防止属性值为空带来的意外错误。我们可以使用**非空断言**来明确该属性不会为空，这样也不会报错。\n\n```typescript\nclass Person {\n  name!: number; // 非空断言\n}\n```\n\n### 2. _`readonly`_ 只读属性\n\n添加了 **`readonly`** 修饰符的属性，将**不允许在构造函数以外的地方中进行重新赋值**。\n\n```typescript\nclass Person {\n  readonly name: string = \"cc\"; // 只读属性\n  constructor() {\n    this.name = \"yy\"; // 可以构造函数中赋值，因为构造函数相当于初始化\n  }\n  setName() {\n    this.name = \"hi\"; // 报错，只读属性不允许重新赋值\n  }\n}\n// 也不可在类以外进行赋值\nconst cc = new Person();\ncc.name = \"cc\"; // 报错，只读属性不允许重新赋值\n```\n\n### 3. `constructor` 构造函数\n\n构造函数接收实例化时传入的参数，可以提供参数默认值。在构造函数中进行类实例的初始化操作，可以分配属性值、调用类的方法等。\n\n```typescript\nclass Person {\n  name: string;\n  constructor(name = \"cc\") {\n    this.name = name;\n  }\n}\n```\n\n还记得我们在[Typescript 系列：(二)函数篇](https://juejin.cn/post/7070172611849748517)里讲的函数重载吗？构造函数自然也可以重载。注意构造函数的**重载签名**和**实现签名**是没有返回值类型的。\n\n```typescript\nclass Person {\n  name: string;\n  // 两套重载签名\n  constructor(name: number);\n  constructor(name: string, age: number);\n  // 实现签名\n  constructor(name: number | string, age?: number) {\n    // ...\n  }\n}\n```\n\n### 4. 调用 _`super( )`_\n\n我们知道，类可以通过 **`extends`** 关键字来继承一个基类。此时，我们在构造函数中使用 **`this`** 关键字**之前**需要先调用 **`super( )`** ，相当于调用了父类的构造函数。\n\n```typescript\nclass Person {\n  name: string;\n}\n\n// 错误，没有在构造函数中先调用super()，就使用了this\nclass User1 extends Person {\n  constructor(name: string) {\n    this.name = name;\n  }\n}\n\n// 正确\nclass User2 extends Person {\n  constructor(name: string) {\n    super();\n  }\n}\n```\n\n### 5. `methods` 方法\n\n类里面的函数叫做方法。**声明一个方法不要用 `function` 关键字**。\n\n```typescript\nclass Person {\n  name: string;\n  constructor(name = \"cc\") {\n    this.name = name;\n  }\n  // setName方法\n  setName(name: string): void {\n    this.name = name;\n  }\n}\n```\n\n### 6. 存取器 `setters/getters`\n\n和 `JS` 里没什么差别。\n\n```typescript\nclass Person {\n  _name: string;\n  constructor(name = \"cc\") {\n    this._name = name;\n  }\n  // setter\n  set name(name: string): void {\n    this._name = name;\n  }\n  get name(): string {\n    return this._name;\n  }\n}\n```\n\n对于存取器，`TS`有几个特别的推论：\n\n- 如果有 `get` 而没有 `set`，则该属性会被推论为 `readonly` 只读属性；\n- 如果 `setter` 没有明确参数的类型，则会推论为 `getter` 的返回值的类型；\n- `getter` 和 `setter` 的可见性保持一致。\n\n### 7. 索引签名\n\n类 也可以使用索引签名，和在对象类型里使用差不多。\n\n```typescript\nclass Person {\n  [x: string]: string | number | ((s?: string) => string | number);\n\n  name = 1;\n  getName() {\n    return this.name;\n  }\n}\n```\n\n## 二、类的继承\n\n### 1. `implement` 语句\n\n使用 **`implements`** 语句检查类是否符合某接口规范。实现某个接口，则类中需要含有该接口的所有属性和方法才能通过检测。\n\n```typescript\ninterface Person {\n  name: string;\n  setName: (x: string) => void;\n}\n\n// People类 实现 Person 接口\nclass People implements Person {\n  name: string = \"cc\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n```\n\n可以同时实现多个接口：\n\n```typescript\ninterface Person {\n  name: string;\n  setName: (x: string) => void;\n}\n\ninterface Manager {\n  id: string;\n}\n\n// People类 实现 Person 接口\nclass People implements Person, Manager {\n  name: string = \"cc\";\n  id: string = \"001\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n```\n\n注意 **implements** 语句只是检测类是否符合接口规范。\n\n### 2. `extends` 语句\n\n- 通过 `extends` 语句可以让类继承一个基类，获得它所有的属性和方法，还能定义自己的属性和方法。\n\n```typescript\nclass Person {\n  name: string = \"cc\";\n}\n\nclass Manager extends Person {}\n\nlet cc = new Manager();\ncc.name; // 'cc'\n```\n\n- 重写父类方法，可以通过 `super.xx( )` 来调用父类的方法。子类的方法需要能兼容父类的方法，包括参数数量、类型，以及返回值。\n\n```typescript\nclass Person {\n  name: string = \"cc\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n\nclass Manager extends Person {\n  setName(name: string | number) {\n    if (typeof name === \"number\") {\n      this.name = String(name + 100);\n    } else {\n      super.setName();\n    }\n  }\n}\n\nlet cc = new Manager();\ncc.setName(99);\ncc.name; // '199'\n```\n\n- 字段类型声明\n\n在父类的构造函数执行完之后，才会开始子类的初始化，期间可能改写来自父类的属性或方法。当 子类的某个属性 是 父类相应属性 的子类型时，这个过程就会浪费性能。可以通过 **_`declare`_** 关键字来声明字段类型，使其不受运行时效果的影响。\n\n```typescript\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  bark: () => void;\n}\n\nclass AnimalHouse {\n  resident: Animal;\n  constructor(animal: Animal) {\n    this.resident = animal;\n  }\n}\n\nclass DogHouse extends AnimalHouse {\n  // 通过declare关键字，使resident属性的类型固定为Dog\n  declare resident: Dog;\n  constructor(dog: Dog) {\n    // 不要忘记调用super()\n    super();\n  }\n}\n```\n\n- 初始化顺序\n\n父类字段初始化 --> 父类构造函数执行 --> 子类字段初始化 --> 子类构造函数执行\n\n### 3. 继承内置类型\n\n继承内置类型，如`Array`、`Error`等，当在构造函数中调用`super( )`之后，`this`的原型指向会错误地指向`super`的调用者，即`Array`、`Error`等内置类型。`ES6`使用 **`new.target`** 来调整原型链，但是在 `ES5` 中却保证不了 `new.target` 的值。因此，我们在调用`super()`之后，要手动调整原型链，让`this`的原型指向我们新的类。 **`Object.setPrototypeOf( )`** 便是要用的方法 (不支持该方法的可以退一步使用`Object.prototype.__proto__` )。\n\n```typescript\nclass MsgError1 extends Error {\n  naame = 123;\n  constructor(m: string) {\n    super(m);\n  }\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n\n//\nlet m1 = new MsgError1(\"cc\");\n// 由于原型链错误，sayHello方法在MsgError的原型上，\n// 而m1的原型指向Error，索引没有sayHello方法\nm1.sayHello(); // 报错\n\nclass MsgError2 extends Error {\n  naame = 123;\n  constructor(m: string) {\n    super(m);\n    Object.setPrototypeOf(this, MsgError2.prototype);\n  }\n  sayHello() {\n    return \"hello \" + this.message;\n  }\n}\n\nlet m2 = new MsgError2(\"cc\");\nm2.sayHello(); // 正确\n```\n\n需要注意，这种问题会一直传递下去，也就是说，**以 `MsgError2` 为基类所创造的子类，也需要再次手动调整原型的指向**。此外，不支持`IE10`及更低的版本。\n\n## 三、成员的可见性 `Member Visibility`\n\n在 TS 中，实现了 `public`，`protected`，`private`等修饰符来实现成员的可见性。\n\n### 1. `public`\n\n**`public`** 修饰符用来定义公开成员，这也是默认的成员可见性，当没有写可见性修饰符时，就默认是 `public` 。被声明为`public`的成员，可在任何地方访问。太简单了就不给栗子了。\n\n## 2. `protected`\n\n被 **`protected`** 修饰的成员只能在类或者其子类中访问，无法通过实例来访问。\n\n```typescript\nclass Person {\n  protected name: string;\n  constructor(name: string) {\n    // 类中可以\n    this.name = name;\n  }\n  getName() {\n    return this.name;\n  }\n}\n\nconst cc = new Person(\"cc\");\ncc.name; // TS会报错，实例无法访问protected成员\n```\n\n在子类中，如果我们通过字段重新声明了基类中的 `protected` 成员，则会将其在子类中变为 `public` 成员，除非重新加上 `protected` 修饰符：\n\n```typescript\nclass Person {\n  protected name: string;\n  protected age: number;\n}\n\nclass Manager extends Person {\n  // 不加 protected 修饰符， 则name变为public，通过实例来访问\n  name: string;\n  // 而这个则依然是protected成员\n  protected age: number;\n  constructor(name: string, age: number) {\n    super();\n    this.name = name;\n    this.age = age;\n  }\n}\n\nconst cc = new Manager(\"cc\", 18);\ncc.name; // 'cc'\n// 报错，实例无法调用 protected\ncc.age;\n```\n\n### 3. `private`\n\n被 **`private`** 修饰的成员只能在类中访问，无法通过实例来访问，也无法在其子类中访问。\n\n```typescript\nclass Person {\n  private name: string;\n}\n\nclass Manager extends Person {\n  // 错误，private成员不能在子类中访问\n  name: string;\n  constructor(name: string, age: number) {\n    super();\n    // 同样错误，private成员不能在子类中访问\n    this.name = name;\n  }\n}\n\nconst cc = new Person(\"cc\", 18);\ncc.name; // 也错误，private成员不能通过实例来访问\n```\n\n但是在`TS`中支持在类中通过同类的其它实例获取该实例上的`private`成员：\n\n```typescript\nclass Person {\n  private name: string;\n  constructor(name: string) {\n    this.name = name;\n  }\n  hasSameName(other: Person) {\n    // 可以访问其它同类实例的 private 成员name\n    return this.name === other.name;\n  }\n}\n\nconst cc = new Person(\"cc\");\nconst yy = new Person(\"yy\");\ncc.hasSameName(yy); // 不报错，得到false\n```\n\n需要注意，成员可见性仅在 `TS` 的类型检查时有效。一旦代码被编译为 `JS` 代码，则在`JS`中，可以通过类实例查看原本在`TS`是 `pretected` 或 `private` 的成员。另外 `JS` 的私有修饰符 \"`#`\" 可以实现在编译后依然是私有成员。因此，如果要实现通过私有化来保护成员，应使用闭包、`WeakMap`或私有字段 \"`#`\" 等手段。\n\n## 四、静态成员 `static`\n\n首先我们要明确一点，类本身也是一个对象。我们通过**_`static`_**修饰符可以将某个成员变成静态成员。**静态成员与类的实例无关，而是被挂到类对象本身，可以与实例成员重名，且静态方法中的 `this` 指向类对象本身，我们通过类对象本身来访问类成员**。\n\n```typescript\nclass Person {\n  // 这是实例成员\n  _name: string;\n  constructor(name: string) {\n    // 给实例成员name赋值\n    this._name = name;\n  }\n  // 静态属性 name\n  static _name: string = \"person\";\n  // 静态方法 其中的this指向类Person\n  static setName(name: string) {\n    this._name = name;\n    console.log(this); // class Person { // ... }\n  }\n}\n\nconst cc = new Person(\"cc\");\n// 访问实例成员_name\ncc._name; // 'cc'\n// 访问静态成员_name\nPerson._name; // 'person'\n```\n\n也许你会好奇我为什么用 `_name` 而不是` name`，事实上不是我不使用，而是不能使用。稍后你会得到答案。\n\n静态成员也可以使用 `public`、`protected`、`private`等修饰符。类似的，**`protected` 静态属性 只能由类或子类中的静态成员访问；`private`静态成员只能由 类 中的静态成员访问**。\n\n```typescript\nclass Person {\n  protected static _name = \"person\";\n}\n\nPerson._name; // 报错，不能访问protected成员\n```\n\n静态成员可以被子类继承：\n\n```typescript\nclass Person {\n  static _name = \"person\";\n  static setName(name: string) {\n    this._name = name;\n  }\n}\n\nclass Manager extends Person {}\n\nManager._name; // 'person'\nManager.setName(\"cc\");\nManager._name; // 'cc'\n```\n\n特殊的静态名字：**`name`** ，由于存在内置静态属性 **`Function.name`**，因此我们在给静态属性命名时，不能使用`name`，否则会发生冲突。\n\n```typescript\nclass Person {\n  // 错误，静态属性name与内置静态属性 Function.name 冲突\n  static name = \"person\";\n}\n```\n\n## 五、静态域\n\n我将类中的 `static blocks` 称为静态域，通过 **_`static { }`_**声明一块区域，在该区域编写的语句能够自动执行，且能访问私有属性 如 \"`#name`\"。因此，可以在静态域中书写静态成员做初始化逻辑。这里想不出什么好的栗子，就搬运了官网的：\n\n```typescript\nclass Foo {\n  static #count = 0;\n\n  get count()\n    return Foo.#count;\n  }\n  static {\n    try {\n      const lastInstances = loadLastInstances();\n      Foo.#count += lastInstances.length;\n    }\n    catch {}\n  }\n}\n```\n\n## 六、泛型类\n\n在执行`new`操作时，泛型类的类型参数也会由传入的参数来进行推论。\n\n```typescript\nclass Person<T> {\n  name: T;\n  constructor(name: T) {\n    this.name = name;\n  }\n  setName(name: T) {\n    this.name = name;\n  }\n}\n\nconst cc = new Person(\"cc\"); // T被推论\n```\n\n泛型类可以像泛型接口一样进行泛型约束以及指定类型参数的默认值。大家都能明白的吧，就不给栗子了。\n\n静态成员无法享用泛型：\n\n```typescript\nclass Person<T> {\n  // 错误，静态成员不可引用类型参数\n  static _name: T;\n}\n```\n\n这是因为每个静态成员都只有一个，而实例成员在每个实例上都存在一个。假若静态成员能享用泛型，那么我们`new`一个实例`a`，传入类型`string`，此时静态属性`_name`类型为`string`；我们`new` 一个实例`b`，传入类型`number`，那么此时静态属性\\_`name`的类型是啥呢？`string`亦或`number` ? 显然都不合理。所以静态成员无法使用类型参数。\n\n## 七、运行时的 `this`\n\n`Ts`中的`this`指向和 `JS` 保持一致，因此有时候我们需要防止成员丢失`this`上下文。\n\n### 1. 使用箭头函数\n\n```typescript\nclass Person {\n  name: string;\n  setName = (name: string) => {\n    this.name = name;\n  };\n}\n```\n\n但是这也需要权衡利弊：\n\n- 这样做能保证`setName`方法的`this`永远正确地指向实例本身；\n- 使用中这种方式定义的方法不会挂载原型上，而是会被添加到每一个实例上，因此会占用更多的内存；\n- 同样，其子类无法通过`super`,`setName`来调用父类的`setName`方法，因为无法在原型链上找到；\n\n### 2. 使用 `this` 参数\n\n如同在`TS`的函数中将`this`作为参数，为其指定类型一样，在类的方法中也可以如此这般。\n\n```typescript\nclass Person {\n  name: string;\n  // 为this指定类型为 Person，则只有Person实例才可以调用该方法\n  setName(this: Person, name: string) {\n    this.name = name;\n  }\n}\n```\n\n这种方式很好地弥补了箭头函数的不足，唯一的缺点就是习惯了 `JS` 思维的同学可能会试图通过其它对象来调用该方法，显然这样是不会成功的。\n\n## 八、 _把 `this` 作为 类型_\n\n**首先要说，这玩意儿非常有用**。在`TS`的类中，`this` 可以作为一种特殊的类型，由当前的类进行动态推论。\n\n```typescript\nclass Person {\n  name: string;\n  // 把 this 作为形参person的类型\n  setName(person: this) {\n    this.name = person.name;\n    return this;\n  }\n}\n\nconst a = new Person();\nconst b = a.setName(a); // b的类型为当前的类 Person\n```\n\n这里得`setName`返回了`this`，这个`this`是表示实例值，其类型被推论为 `this`，这个`this`表示类型。`this` 类型就会在`setName`调用时被动态推论为当前的类。这样的好处是在子类中可以也自动推论为子类。例如我们在`Person`类的实例中调用`setName`，返回值的类型就是`Person`；如果在`Person`的子类`Manager`的实例中调用`setName`，返回值的类型则是`Person`的子类`Manage`r：\n\n```typescript\nclass Person {\n  name: string;\n  // 把 this 作为形参person的类型\n  setName(person: this) {\n    this.name = person.name;\n    return this;\n  }\n}\n\nclass Manager extends Person {}\n\nconst y = new Person();\nconst yy = y.setName(y); // aa的类型为Person\n\nconst c = new Manager();\nconst cc = c.setName(c); // cc的类型为Manager\n```\n\n**基于 `this` 类型的 类型守卫**：和在函数中一样，我们可以在类或接口的方法的返回值的类型的位置使用**_`this is Type`_**来进行类型缩减。写个最简单的栗子吧，实在是懒癌犯了 `qwq`。\n\n```typescript\nclass Person {\n  name? = 'cc'\n}\n\nclass Manager extends Person {\n  // 类型守卫的 this 为类型\n  isPerson()this is Person {\n    // return 语句的 this 指代类实例\n    return this instanceof Person\n  }\n\n  // 可以利用 基于 this 类型的类型守卫 来进行类型缩减\n  hasName()this is {name: string} {\n    return this.name !== undefined\n  }\n}\n\nconst cc = new Person()\n// 利用类型守卫来进行类型缩减\nif(cc.hasName()){\n  // ...\n}\n```\n\n## 九、参数属性\n\n参数属性是`TS`提供的一个非常方便的语法。在构造函数的参数前加上 `public`、`protected`、`private`或者`readonly`等修饰符，就可以把普通参数变为参数属性。参数属性既是构造函数的参数，又会作为实例属性自动被添加到实例上，且在传参时自动进行赋值，无需在函数体内进行赋值操作。\n\n```typescript\nclass Person {\n  constructor(\n    public name: string,\n    protected age: number,\n    private gender: 1 | 2\n  ) {\n    // 不需要在这里再进行赋值\n  }\n  setAge(age: number) {\n    this.age = age;\n  }\n  getAge() {\n    return this.age;\n  }\n}\nconst cc = new Person(\"cc\", 18, 2);\ncc.name; // 'cc'\ncc.setAge(20);\ncc.getAge(); // 20\ncc.gender; // 报错，private属性不能通过实例\n```\n\n## 十、类表达式\n\n类似函数表达式，没啥说的，直接上栗子：\n\n```typescript\nconst Person = class {\n  name: string = \"cc\";\n};\n\nconst cc = new Person();\ncc.name; // 'cc'  cc的类型是Person\n```\n\n## 十一、_abstract_ 抽象类及其成员\n\n含有抽象成员的类为抽象类。抽象类和抽象成员都需要在前面加上 **`abstract`** 修饰符。抽象类不能使用 `new` 进行实例化，而是用来作为**基类**，声明一些抽象方法或抽象属性，其子类需要实现所有这些方法或属性。\n\n```typescript\nabstract class Person {\n  abstract name: string;\n  abstract setName(x: string): void;\n}\n\n// 子类必须包含父类的全部\nclass Manager extends Person {\n  name: string = \"manager\";\n  setName(name: string) {\n    this.name = name;\n  }\n}\n```\n\n## 十二、类成员之间的关系\n\n和其它类型一样，类之间也是通过结构来进行比较的，当拥有相同的成员，则可以相互替换；当一个类`A`中含有另一个类`B`的所有成员，尽管没有显示地通过 `extends` 继承，类 `A` 依然会被认为是类 `B` 的子类。\n\n```typescript\nclass Person {\n  name: string;\n}\n\nclass Manager {\n  name: string;\n  age: number;\n}\n// 不会报错\nconst person: Person = new Manager();\n```\n\n这看起来很直观简单，不过少数情况下会看起来有些 `emmm`，怪怪的。拿个官方栗子来：\n\n```typescript\nclass Empty {}\n\nfunction fn(x: Empty) {\n  // 啥也不做\n}\n\n// 以下这几个都没问题，也就是说，它们都是空类 Empty 的子类\n// bigint和symbol不是\nfn(window);\nfn({});\nfn(fn);\nfn(0);\nfn(undefined);\n```\n\n关于类的知识就分享到这里啦，下一篇 分享 `TS` 中的 **_模块_** 的内容，不见不散！\n","slug":"TypeScript-系列-基础篇-TypeScript系列-基础篇-五-Classes-类","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cla5g9yol0003wgoia6xl8e21","content":"<h1 id=\"TypeScript-系列-基础篇-五-Classes-类\"><a href=\"#TypeScript-系列-基础篇-五-Classes-类\" class=\"headerlink\" title=\"TypeScript 系列 基础篇(五) Classes 类\"></a>TypeScript 系列 基础篇(五) Classes 类</h1><p><strong>类</strong> 在 <code>JavaScript</code> 中出现于 <code>ES2015</code> 版本，<code>TS</code>对 类 进行了全面支持，还加入了一些其它语法来增强类的表达能力，本文将详细聊一聊<code>TS</code>中的类的知识，你知道的和不知道的，这里都有。</p>\n<h2 id=\"一、类的成员\"><a href=\"#一、类的成员\" class=\"headerlink\" title=\"一、类的成员\"></a>一、类的成员</h2><h3 id=\"1-属性字段-Fields\"><a href=\"#1-属性字段-Fields\" class=\"headerlink\" title=\"1. 属性字段 (Fields)\"></a>1. 属性字段 (<code>Fields</code>)</h3><p>字段声明会为类添加创建一个<strong>公共</strong>的<strong>可写</strong>的<strong>实例属性</strong>。我们可以为字段添加类型注释，如果不添加，就会是 <code>any</code> 类型，当然这是我们不希望发生的。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  gender; <span class=\"comment\">// gender为 any 类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字段声明时可以赋初值，其类型会被 TS 自动推论，在实例化时会自动执行值的初始化。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// name为string类型</span></span><br><span class=\"line\">  age = <span class=\"number\">18</span>; <span class=\"comment\">// age 为 string 类型</span></span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span> = <span class=\"number\">2</span>; <span class=\"comment\">// 如果不注释类型，则gender会被推论为number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\">cc.<span class=\"property\">age</span>; <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n<p>如果开启了严格属性初始化检查： <strong><code>strictPropertyInitialization</code></strong>，则<strong>没有赋初值</strong>的字段<strong>必须在构造函数中初始化</strong>，不能在其它的方法中初始化，TS 不会去检测其它方法内的初始化。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// name为string类型</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，开启该检测是为了防止属性值为空带来的意外错误。我们可以使用<strong>非空断言</strong>来明确该属性不会为空，这样也不会报错。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">number</span>; <span class=\"comment\">// 非空断言</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-readonly-只读属性\"><a href=\"#2-readonly-只读属性\" class=\"headerlink\" title=\"2. readonly 只读属性\"></a>2. <em><code>readonly</code></em> 只读属性</h3><p>添加了 <strong><code>readonly</code></strong> 修饰符的属性，将<strong>不允许在构造函数以外的地方中进行重新赋值</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// 只读属性</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;yy&quot;</span>; <span class=\"comment\">// 可以构造函数中赋值，因为构造函数相当于初始化</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;hi&quot;</span>; <span class=\"comment\">// 报错，只读属性不允许重新赋值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 也不可在类以外进行赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span> = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// 报错，只读属性不允许重新赋值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-constructor-构造函数\"><a href=\"#3-constructor-构造函数\" class=\"headerlink\" title=\"3. constructor 构造函数\"></a>3. <code>constructor</code> 构造函数</h3><p>构造函数接收实例化时传入的参数，可以提供参数默认值。在构造函数中进行类实例的初始化操作，可以分配属性值、调用类的方法等。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&quot;cc&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还记得我们在<a href=\"https://juejin.cn/post/7070172611849748517\">Typescript 系列：(二)函数篇</a>里讲的函数重载吗？构造函数自然也可以重载。注意构造函数的<strong>重载签名</strong>和<strong>实现签名</strong>是没有返回值类型的。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 两套重载签名</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 实现签名</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>, age?: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-调用-super\"><a href=\"#4-调用-super\" class=\"headerlink\" title=\"4. 调用 super( )\"></a>4. 调用 <em><code>super( )</code></em></h3><p>我们知道，类可以通过 <strong><code>extends</code></strong> 关键字来继承一个基类。此时，我们在构造函数中使用 <strong><code>this</code></strong> 关键字<strong>之前</strong>需要先调用 <strong><code>super( )</code></strong> ，相当于调用了父类的构造函数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误，没有在构造函数中先调用super()，就使用了this</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User1</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-methods-方法\"><a href=\"#5-methods-方法\" class=\"headerlink\" title=\"5. methods 方法\"></a>5. <code>methods</code> 方法</h3><p>类里面的函数叫做方法。<strong>声明一个方法不要用 <code>function</code> 关键字</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&quot;cc&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// setName方法</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-存取器-setters-getters\"><a href=\"#6-存取器-setters-getters\" class=\"headerlink\" title=\"6. 存取器 setters/getters\"></a>6. 存取器 <code>setters/getters</code></h3><p>和 <code>JS</code> 里没什么差别。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&quot;cc&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// setter</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于存取器，<code>TS</code>有几个特别的推论：</p>\n<ul>\n<li>如果有 <code>get</code> 而没有 <code>set</code>，则该属性会被推论为 <code>readonly</code> 只读属性；</li>\n<li>如果 <code>setter</code> 没有明确参数的类型，则会推论为 <code>getter</code> 的返回值的类型；</li>\n<li><code>getter</code> 和 <code>setter</code> 的可见性保持一致。</li>\n</ul>\n<h3 id=\"7-索引签名\"><a href=\"#7-索引签名\" class=\"headerlink\" title=\"7. 索引签名\"></a>7. 索引签名</h3><p>类 也可以使用索引签名，和在对象类型里使用差不多。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | (<span class=\"function\">(<span class=\"params\">s?: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、类的继承\"><a href=\"#二、类的继承\" class=\"headerlink\" title=\"二、类的继承\"></a>二、类的继承</h2><h3 id=\"1-implement-语句\"><a href=\"#1-implement-语句\" class=\"headerlink\" title=\"1. implement 语句\"></a>1. <code>implement</code> 语句</h3><p>使用 <strong><code>implements</code></strong> 语句检查类是否符合某接口规范。实现某个接口，则类中需要含有该接口的所有属性和方法才能通过检测。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">setName</span>: <span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// People类 实现 Person 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以同时实现多个接口：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">setName</span>: <span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Manager</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// People类 实现 Person 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span>, <span class=\"title class_\">Manager</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;001&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 <strong>implements</strong> 语句只是检测类是否符合接口规范。</p>\n<h3 id=\"2-extends-语句\"><a href=\"#2-extends-语句\" class=\"headerlink\" title=\"2. extends 语句\"></a>2. <code>extends</code> 语句</h3><ul>\n<li>通过 <code>extends</code> 语句可以让类继承一个基类，获得它所有的属性和方法，还能定义自己的属性和方法。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>重写父类方法，可以通过 <code>super.xx( )</code> 来调用父类的方法。子类的方法需要能兼容父类的方法，包括参数数量、类型，以及返回值。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"title class_\">String</span>(name + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>.<span class=\"title function_\">setName</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\">cc.<span class=\"title function_\">setName</span>(<span class=\"number\">99</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;199&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>字段类型声明</li>\n</ul>\n<p>在父类的构造函数执行完之后，才会开始子类的初始化，期间可能改写来自父类的属性或方法。当 子类的某个属性 是 父类相应属性 的子类型时，这个过程就会浪费性能。可以通过 <strong><em><code>declare</code></em></strong> 关键字来声明字段类型，使其不受运行时效果的影响。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnimalHouse</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">resident</span>: <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">animal: Animal</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resident</span> = animal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DogHouse</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">AnimalHouse</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过declare关键字，使resident属性的类型固定为Dog</span></span><br><span class=\"line\">  <span class=\"keyword\">declare</span> <span class=\"attr\">resident</span>: <span class=\"title class_\">Dog</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">dog: Dog</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不要忘记调用super()</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始化顺序</li>\n</ul>\n<p>父类字段初始化 —&gt; 父类构造函数执行 —&gt; 子类字段初始化 —&gt; 子类构造函数执行</p>\n<h3 id=\"3-继承内置类型\"><a href=\"#3-继承内置类型\" class=\"headerlink\" title=\"3. 继承内置类型\"></a>3. 继承内置类型</h3><p>继承内置类型，如<code>Array</code>、<code>Error</code>等，当在构造函数中调用<code>super( )</code>之后，<code>this</code>的原型指向会错误地指向<code>super</code>的调用者，即<code>Array</code>、<code>Error</code>等内置类型。<code>ES6</code>使用 <strong><code>new.target</code></strong> 来调整原型链，但是在 <code>ES5</code> 中却保证不了 <code>new.target</code> 的值。因此，我们在调用<code>super()</code>之后，要手动调整原型链，让<code>this</code>的原型指向我们新的类。 <strong><code>Object.setPrototypeOf( )</code></strong> 便是要用的方法 (不支持该方法的可以退一步使用<code>Object.prototype.__proto__</code> )。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MsgError1</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span> &#123;</span><br><span class=\"line\">  naame = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">m: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> m1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MsgError1</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 由于原型链错误，sayHello方法在MsgError的原型上，</span></span><br><span class=\"line\"><span class=\"comment\">// 而m1的原型指向Error，索引没有sayHello方法</span></span><br><span class=\"line\">m1.<span class=\"title function_\">sayHello</span>(); <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MsgError2</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span> &#123;</span><br><span class=\"line\">  naame = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">m: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(m);</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">setPrototypeOf</span>(<span class=\"variable language_\">this</span>, <span class=\"title class_\">MsgError2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> m2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MsgError2</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">m2.<span class=\"title function_\">sayHello</span>(); <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，这种问题会一直传递下去，也就是说，<strong>以 <code>MsgError2</code> 为基类所创造的子类，也需要再次手动调整原型的指向</strong>。此外，不支持<code>IE10</code>及更低的版本。</p>\n<h2 id=\"三、成员的可见性-Member-Visibility\"><a href=\"#三、成员的可见性-Member-Visibility\" class=\"headerlink\" title=\"三、成员的可见性 Member Visibility\"></a>三、成员的可见性 <code>Member Visibility</code></h2><p>在 TS 中，实现了 <code>public</code>，<code>protected</code>，<code>private</code>等修饰符来实现成员的可见性。</p>\n<h3 id=\"1-public\"><a href=\"#1-public\" class=\"headerlink\" title=\"1. public\"></a>1. <code>public</code></h3><p><strong><code>public</code></strong> 修饰符用来定义公开成员，这也是默认的成员可见性，当没有写可见性修饰符时，就默认是 <code>public</code> 。被声明为<code>public</code>的成员，可在任何地方访问。太简单了就不给栗子了。</p>\n<h2 id=\"2-protected\"><a href=\"#2-protected\" class=\"headerlink\" title=\"2. protected\"></a>2. <code>protected</code></h2><p>被 <strong><code>protected</code></strong> 修饰的成员只能在类或者其子类中访问，无法通过实例来访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类中可以</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// TS会报错，实例无法访问protected成员</span></span><br></pre></td></tr></table></figure>\n<p>在子类中，如果我们通过字段重新声明了基类中的 <code>protected</code> 成员，则会将其在子类中变为 <code>public</code> 成员，除非重新加上 <code>protected</code> 修饰符：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不加 protected 修饰符， 则name变为public，通过实例来访问</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 而这个则依然是protected成员</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 报错，实例无法调用 protected</span></span><br><span class=\"line\">cc.<span class=\"property\">age</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-private\"><a href=\"#3-private\" class=\"headerlink\" title=\"3. private\"></a>3. <code>private</code></h3><p>被 <strong><code>private</code></strong> 修饰的成员只能在类中访问，无法通过实例来访问，也无法在其子类中访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误，private成员不能在子类中访问</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 同样错误，private成员不能在子类中访问</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// 也错误，private成员不能通过实例来访问</span></span><br></pre></td></tr></table></figure>\n<p>但是在<code>TS</code>中支持在类中通过同类的其它实例获取该实例上的<code>private</code>成员：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">hasSameName</span>(<span class=\"params\">other: Person</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以访问其它同类实例的 private 成员name</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> === other.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> yy = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;yy&quot;</span>);</span><br><span class=\"line\">cc.<span class=\"title function_\">hasSameName</span>(yy); <span class=\"comment\">// 不报错，得到false</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，成员可见性仅在 <code>TS</code> 的类型检查时有效。一旦代码被编译为 <code>JS</code> 代码，则在<code>JS</code>中，可以通过类实例查看原本在<code>TS</code>是 <code>pretected</code> 或 <code>private</code> 的成员。另外 <code>JS</code> 的私有修饰符 “<code>#</code>“ 可以实现在编译后依然是私有成员。因此，如果要实现通过私有化来保护成员，应使用闭包、<code>WeakMap</code>或私有字段 “<code>#</code>“ 等手段。</p>\n<h2 id=\"四、静态成员-static\"><a href=\"#四、静态成员-static\" class=\"headerlink\" title=\"四、静态成员 static\"></a>四、静态成员 <code>static</code></h2><p>首先我们要明确一点，类本身也是一个对象。我们通过<strong><em><code>static</code></em></strong>修饰符可以将某个成员变成静态成员。<strong>静态成员与类的实例无关，而是被挂到类对象本身，可以与实例成员重名，且静态方法中的 <code>this</code> 指向类对象本身，我们通过类对象本身来访问类成员</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这是实例成员</span></span><br><span class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给实例成员name赋值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 静态属性 name</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 静态方法 其中的this指向类Person</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// class Person &#123; // ... &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 访问实例成员_name</span></span><br><span class=\"line\">cc.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 访问静态成员_name</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;person&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>也许你会好奇我为什么用 <code>_name</code> 而不是<code>name</code>，事实上不是我不使用，而是不能使用。稍后你会得到答案。</p>\n<p>静态成员也可以使用 <code>public</code>、<code>protected</code>、<code>private</code>等修饰符。类似的，<strong><code>protected</code> 静态属性 只能由类或子类中的静态成员访问；<code>private</code>静态成员只能由 类 中的静态成员访问</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> _name = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// 报错，不能访问protected成员</span></span><br></pre></td></tr></table></figure>\n<p>静态成员可以被子类继承：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> _name = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;person&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>特殊的静态名字：<strong><code>name</code></strong> ，由于存在内置静态属性 <strong><code>Function.name</code></strong>，因此我们在给静态属性命名时，不能使用<code>name</code>，否则会发生冲突。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误，静态属性name与内置静态属性 Function.name 冲突</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> name = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、静态域\"><a href=\"#五、静态域\" class=\"headerlink\" title=\"五、静态域\"></a>五、静态域</h2><p>我将类中的 <code>static blocks</code> 称为静态域，通过 <strong><em><code>static &#123; &#125;</code></em></strong>声明一块区域，在该区域编写的语句能够自动执行，且能访问私有属性 如 “<code>#name</code>“。因此，可以在静态域中书写静态成员做初始化逻辑。这里想不出什么好的栗子，就搬运了官网的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> #count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">count</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Foo</span>.#count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastInstances = <span class=\"title function_\">loadLastInstances</span>();</span><br><span class=\"line\">      <span class=\"title class_\">Foo</span>.#count += lastInstances.<span class=\"property\">length</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、泛型类\"><a href=\"#六、泛型类\" class=\"headerlink\" title=\"六、泛型类\"></a>六、泛型类</h2><p>在执行<code>new</code>操作时，泛型类的类型参数也会由传入的参数来进行推论。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: T;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>); <span class=\"comment\">// T被推论</span></span><br></pre></td></tr></table></figure>\n<p>泛型类可以像泛型接口一样进行泛型约束以及指定类型参数的默认值。大家都能明白的吧，就不给栗子了。</p>\n<p>静态成员无法享用泛型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误，静态成员不可引用类型参数</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">_name</span>: T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是因为每个静态成员都只有一个，而实例成员在每个实例上都存在一个。假若静态成员能享用泛型，那么我们<code>new</code>一个实例<code>a</code>，传入类型<code>string</code>，此时静态属性<code>_name</code>类型为<code>string</code>；我们<code>new</code> 一个实例<code>b</code>，传入类型<code>number</code>，那么此时静态属性_<code>name</code>的类型是啥呢？<code>string</code>亦或<code>number</code> ? 显然都不合理。所以静态成员无法使用类型参数。</p>\n<h2 id=\"七、运行时的-this\"><a href=\"#七、运行时的-this\" class=\"headerlink\" title=\"七、运行时的 this\"></a>七、运行时的 <code>this</code></h2><p><code>Ts</code>中的<code>this</code>指向和 <code>JS</code> 保持一致，因此有时候我们需要防止成员丢失<code>this</code>上下文。</p>\n<h3 id=\"1-使用箭头函数\"><a href=\"#1-使用箭头函数\" class=\"headerlink\" title=\"1. 使用箭头函数\"></a>1. 使用箭头函数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  setName = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这也需要权衡利弊：</p>\n<ul>\n<li>这样做能保证<code>setName</code>方法的<code>this</code>永远正确地指向实例本身；</li>\n<li>使用中这种方式定义的方法不会挂载原型上，而是会被添加到每一个实例上，因此会占用更多的内存；</li>\n<li>同样，其子类无法通过<code>super</code>,<code>setName</code>来调用父类的<code>setName</code>方法，因为无法在原型链上找到；</li>\n</ul>\n<h3 id=\"2-使用-this-参数\"><a href=\"#2-使用-this-参数\" class=\"headerlink\" title=\"2. 使用 this 参数\"></a>2. 使用 <code>this</code> 参数</h3><p>如同在<code>TS</code>的函数中将<code>this</code>作为参数，为其指定类型一样，在类的方法中也可以如此这般。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 为this指定类型为 Person，则只有Person实例才可以调用该方法</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\"><span class=\"variable language_\">this</span>: Person, name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式很好地弥补了箭头函数的不足，唯一的缺点就是习惯了 <code>JS</code> 思维的同学可能会试图通过其它对象来调用该方法，显然这样是不会成功的。</p>\n<h2 id=\"八、-把-this-作为-类型\"><a href=\"#八、-把-this-作为-类型\" class=\"headerlink\" title=\"八、 把 this 作为 类型\"></a>八、 <em>把 <code>this</code> 作为 类型</em></h2><p><strong>首先要说，这玩意儿非常有用</strong>。在<code>TS</code>的类中，<code>this</code> 可以作为一种特殊的类型，由当前的类进行动态推论。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 把 this 作为形参person的类型</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">person: <span class=\"variable language_\">this</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = person.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = a.<span class=\"title function_\">setName</span>(a); <span class=\"comment\">// b的类型为当前的类 Person</span></span><br></pre></td></tr></table></figure>\n<p>这里得<code>setName</code>返回了<code>this</code>，这个<code>this</code>是表示实例值，其类型被推论为 <code>this</code>，这个<code>this</code>表示类型。<code>this</code> 类型就会在<code>setName</code>调用时被动态推论为当前的类。这样的好处是在子类中可以也自动推论为子类。例如我们在<code>Person</code>类的实例中调用<code>setName</code>，返回值的类型就是<code>Person</code>；如果在<code>Person</code>的子类<code>Manager</code>的实例中调用<code>setName</code>，返回值的类型则是<code>Person</code>的子类<code>Manage</code>r：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 把 this 作为形参person的类型</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">person: <span class=\"variable language_\">this</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = person.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> yy = y.<span class=\"title function_\">setName</span>(y); <span class=\"comment\">// aa的类型为Person</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = c.<span class=\"title function_\">setName</span>(c); <span class=\"comment\">// cc的类型为Manager</span></span><br></pre></td></tr></table></figure>\n<p><strong>基于 <code>this</code> 类型的 类型守卫</strong>：和在函数中一样，我们可以在类或接口的方法的返回值的类型的位置使用<strong><em><code>this is Type</code></em></strong>来进行类型缩减。写个最简单的栗子吧，实在是懒癌犯了 <code>qwq</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name? = <span class=\"string\">&#x27;cc&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类型守卫的 this 为类型</span></span><br><span class=\"line\">  <span class=\"title function_\">isPerson</span>()<span class=\"variable language_\">this</span> is <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return 语句的 this 指代类实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 可以利用 基于 this 类型的类型守卫 来进行类型缩减</span></span><br><span class=\"line\">  <span class=\"title function_\">hasName</span>()<span class=\"variable language_\">this</span> is &#123;<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"comment\">// 利用类型守卫来进行类型缩减</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cc.<span class=\"title function_\">hasName</span>())&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、参数属性\"><a href=\"#九、参数属性\" class=\"headerlink\" title=\"九、参数属性\"></a>九、参数属性</h2><p>参数属性是<code>TS</code>提供的一个非常方便的语法。在构造函数的参数前加上 <code>public</code>、<code>protected</code>、<code>private</code>或者<code>readonly</code>等修饰符，就可以把普通参数变为参数属性。参数属性既是构造函数的参数，又会作为实例属性自动被添加到实例上，且在传参时自动进行赋值，无需在函数体内进行赋值操作。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">protected</span> age: <span class=\"built_in\">number</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> gender: <span class=\"number\">1</span> | <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要在这里再进行赋值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setAge</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getAge</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\">cc.<span class=\"title function_\">setAge</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">cc.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 20</span></span><br><span class=\"line\">cc.<span class=\"property\">gender</span>; <span class=\"comment\">// 报错，private属性不能通过实例</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十、类表达式\"><a href=\"#十、类表达式\" class=\"headerlink\" title=\"十、类表达式\"></a>十、类表达式</h2><p>类似函数表达式，没啥说的，直接上栗子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;  cc的类型是Person</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、abstract-抽象类及其成员\"><a href=\"#十一、abstract-抽象类及其成员\" class=\"headerlink\" title=\"十一、abstract 抽象类及其成员\"></a>十一、<em>abstract</em> 抽象类及其成员</h2><p>含有抽象成员的类为抽象类。抽象类和抽象成员都需要在前面加上 <strong><code>abstract</code></strong> 修饰符。抽象类不能使用 <code>new</code> 进行实例化，而是用来作为<strong>基类</strong>，声明一些抽象方法或抽象属性，其子类需要实现所有这些方法或属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">setName</span>(<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类必须包含父类的全部</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;manager&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、类成员之间的关系\"><a href=\"#十二、类成员之间的关系\" class=\"headerlink\" title=\"十二、类成员之间的关系\"></a>十二、类成员之间的关系</h2><p>和其它类型一样，类之间也是通过结构来进行比较的，当拥有相同的成员，则可以相互替换；当一个类<code>A</code>中含有另一个类<code>B</code>的所有成员，尽管没有显示地通过 <code>extends</code> 继承，类 <code>A</code> 依然会被认为是类 <code>B</code> 的子类。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>: <span class=\"title class_\">Person</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br></pre></td></tr></table></figure>\n<p>这看起来很直观简单，不过少数情况下会看起来有些 <code>emmm</code>，怪怪的。拿个官方栗子来：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Empty</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x: Empty</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 啥也不做</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下这几个都没问题，也就是说，它们都是空类 Empty 的子类</span></span><br><span class=\"line\"><span class=\"comment\">// bigint和symbol不是</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"variable language_\">window</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(&#123;&#125;);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(fn);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>关于类的知识就分享到这里啦，下一篇 分享 <code>TS</code> 中的 <strong><em>模块</em></strong> 的内容，不见不散！</p>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"TypeScript-系列-基础篇-五-Classes-类\"><a href=\"#TypeScript-系列-基础篇-五-Classes-类\" class=\"headerlink\" title=\"TypeScript 系列 基础篇(五) Classes 类\"></a>TypeScript 系列 基础篇(五) Classes 类</h1><p><strong>类</strong> 在 <code>JavaScript</code> 中出现于 <code>ES2015</code> 版本，<code>TS</code>对 类 进行了全面支持，还加入了一些其它语法来增强类的表达能力，本文将详细聊一聊<code>TS</code>中的类的知识，你知道的和不知道的，这里都有。</p>\n<h2 id=\"一、类的成员\"><a href=\"#一、类的成员\" class=\"headerlink\" title=\"一、类的成员\"></a>一、类的成员</h2><h3 id=\"1-属性字段-Fields\"><a href=\"#1-属性字段-Fields\" class=\"headerlink\" title=\"1. 属性字段 (Fields)\"></a>1. 属性字段 (<code>Fields</code>)</h3><p>字段声明会为类添加创建一个<strong>公共</strong>的<strong>可写</strong>的<strong>实例属性</strong>。我们可以为字段添加类型注释，如果不添加，就会是 <code>any</code> 类型，当然这是我们不希望发生的。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  gender; <span class=\"comment\">// gender为 any 类型</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>字段声明时可以赋初值，其类型会被 TS 自动推论，在实例化时会自动执行值的初始化。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// name为string类型</span></span><br><span class=\"line\">  age = <span class=\"number\">18</span>; <span class=\"comment\">// age 为 string 类型</span></span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span> = <span class=\"number\">2</span>; <span class=\"comment\">// 如果不注释类型，则gender会被推论为number</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\">cc.<span class=\"property\">age</span>; <span class=\"comment\">// 18</span></span><br></pre></td></tr></table></figure>\n<p>如果开启了严格属性初始化检查： <strong><code>strictPropertyInitialization</code></strong>，则<strong>没有赋初值</strong>的字段<strong>必须在构造函数中初始化</strong>，不能在其它的方法中初始化，TS 不会去检测其它方法内的初始化。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// name为string类型</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = <span class=\"number\">18</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>事实上，开启该检测是为了防止属性值为空带来的意外错误。我们可以使用<strong>非空断言</strong>来明确该属性不会为空，这样也不会报错。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name!: <span class=\"built_in\">number</span>; <span class=\"comment\">// 非空断言</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-readonly-只读属性\"><a href=\"#2-readonly-只读属性\" class=\"headerlink\" title=\"2. readonly 只读属性\"></a>2. <em><code>readonly</code></em> 只读属性</h3><p>添加了 <strong><code>readonly</code></strong> 修饰符的属性，将<strong>不允许在构造函数以外的地方中进行重新赋值</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// 只读属性</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;yy&quot;</span>; <span class=\"comment\">// 可以构造函数中赋值，因为构造函数相当于初始化</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&quot;hi&quot;</span>; <span class=\"comment\">// 报错，只读属性不允许重新赋值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 也不可在类以外进行赋值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span> = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// 报错，只读属性不允许重新赋值</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-constructor-构造函数\"><a href=\"#3-constructor-构造函数\" class=\"headerlink\" title=\"3. constructor 构造函数\"></a>3. <code>constructor</code> 构造函数</h3><p>构造函数接收实例化时传入的参数，可以提供参数默认值。在构造函数中进行类实例的初始化操作，可以分配属性值、调用类的方法等。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&quot;cc&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还记得我们在<a href=\"https://juejin.cn/post/7070172611849748517\">Typescript 系列：(二)函数篇</a>里讲的函数重载吗？构造函数自然也可以重载。注意构造函数的<strong>重载签名</strong>和<strong>实现签名</strong>是没有返回值类型的。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 两套重载签名</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>);</span><br><span class=\"line\">  <span class=\"comment\">// 实现签名</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>, age?: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-调用-super\"><a href=\"#4-调用-super\" class=\"headerlink\" title=\"4. 调用 super( )\"></a>4. 调用 <em><code>super( )</code></em></h3><p>我们知道，类可以通过 <strong><code>extends</code></strong> 关键字来继承一个基类。此时，我们在构造函数中使用 <strong><code>this</code></strong> 关键字<strong>之前</strong>需要先调用 <strong><code>super( )</code></strong> ，相当于调用了父类的构造函数。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误，没有在构造函数中先调用super()，就使用了this</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User1</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User2</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-methods-方法\"><a href=\"#5-methods-方法\" class=\"headerlink\" title=\"5. methods 方法\"></a>5. <code>methods</code> 方法</h3><p>类里面的函数叫做方法。<strong>声明一个方法不要用 <code>function</code> 关键字</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&quot;cc&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// setName方法</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-存取器-setters-getters\"><a href=\"#6-存取器-setters-getters\" class=\"headerlink\" title=\"6. 存取器 setters/getters\"></a>6. 存取器 <code>setters/getters</code></h3><p>和 <code>JS</code> 里没什么差别。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name = <span class=\"string\">&quot;cc&quot;</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// setter</span></span><br><span class=\"line\">  <span class=\"keyword\">set</span> <span class=\"title function_\">name</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">name</span>(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于存取器，<code>TS</code>有几个特别的推论：</p>\n<ul>\n<li>如果有 <code>get</code> 而没有 <code>set</code>，则该属性会被推论为 <code>readonly</code> 只读属性；</li>\n<li>如果 <code>setter</code> 没有明确参数的类型，则会推论为 <code>getter</code> 的返回值的类型；</li>\n<li><code>getter</code> 和 <code>setter</code> 的可见性保持一致。</li>\n</ul>\n<h3 id=\"7-索引签名\"><a href=\"#7-索引签名\" class=\"headerlink\" title=\"7. 索引签名\"></a>7. 索引签名</h3><p>类 也可以使用索引签名，和在对象类型里使用差不多。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | (<span class=\"function\">(<span class=\"params\">s?: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"二、类的继承\"><a href=\"#二、类的继承\" class=\"headerlink\" title=\"二、类的继承\"></a>二、类的继承</h2><h3 id=\"1-implement-语句\"><a href=\"#1-implement-语句\" class=\"headerlink\" title=\"1. implement 语句\"></a>1. <code>implement</code> 语句</h3><p>使用 <strong><code>implements</code></strong> 语句检查类是否符合某接口规范。实现某个接口，则类中需要含有该接口的所有属性和方法才能通过检测。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">setName</span>: <span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// People类 实现 Person 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以同时实现多个接口：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">setName</span>: <span class=\"function\">(<span class=\"params\">x: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Manager</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// People类 实现 Person 接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">People</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Person</span>, <span class=\"title class_\">Manager</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">id</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;001&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 <strong>implements</strong> 语句只是检测类是否符合接口规范。</p>\n<h3 id=\"2-extends-语句\"><a href=\"#2-extends-语句\" class=\"headerlink\" title=\"2. extends 语句\"></a>2. <code>extends</code> 语句</h3><ul>\n<li>通过 <code>extends</code> 语句可以让类继承一个基类，获得它所有的属性和方法，还能定义自己的属性和方法。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>重写父类方法，可以通过 <code>super.xx( )</code> 来调用父类的方法。子类的方法需要能兼容父类的方法，包括参数数量、类型，以及返回值。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">&quot;number&quot;</span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"title class_\">String</span>(name + <span class=\"number\">100</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>.<span class=\"title function_\">setName</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\">cc.<span class=\"title function_\">setName</span>(<span class=\"number\">99</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;199&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>字段类型声明</li>\n</ul>\n<p>在父类的构造函数执行完之后，才会开始子类的初始化，期间可能改写来自父类的属性或方法。当 子类的某个属性 是 父类相应属性 的子类型时，这个过程就会浪费性能。可以通过 <strong><em><code>declare</code></em></strong> 关键字来声明字段类型，使其不受运行时效果的影响。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AnimalHouse</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">resident</span>: <span class=\"title class_\">Animal</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">animal: Animal</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">resident</span> = animal;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DogHouse</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">AnimalHouse</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 通过declare关键字，使resident属性的类型固定为Dog</span></span><br><span class=\"line\">  <span class=\"keyword\">declare</span> <span class=\"attr\">resident</span>: <span class=\"title class_\">Dog</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">dog: Dog</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不要忘记调用super()</span></span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始化顺序</li>\n</ul>\n<p>父类字段初始化 —&gt; 父类构造函数执行 —&gt; 子类字段初始化 —&gt; 子类构造函数执行</p>\n<h3 id=\"3-继承内置类型\"><a href=\"#3-继承内置类型\" class=\"headerlink\" title=\"3. 继承内置类型\"></a>3. 继承内置类型</h3><p>继承内置类型，如<code>Array</code>、<code>Error</code>等，当在构造函数中调用<code>super( )</code>之后，<code>this</code>的原型指向会错误地指向<code>super</code>的调用者，即<code>Array</code>、<code>Error</code>等内置类型。<code>ES6</code>使用 <strong><code>new.target</code></strong> 来调整原型链，但是在 <code>ES5</code> 中却保证不了 <code>new.target</code> 的值。因此，我们在调用<code>super()</code>之后，要手动调整原型链，让<code>this</code>的原型指向我们新的类。 <strong><code>Object.setPrototypeOf( )</code></strong> 便是要用的方法 (不支持该方法的可以退一步使用<code>Object.prototype.__proto__</code> )。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MsgError1</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span> &#123;</span><br><span class=\"line\">  naame = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">m: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(m);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> m1 = <span class=\"keyword\">new</span> <span class=\"title class_\">MsgError1</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 由于原型链错误，sayHello方法在MsgError的原型上，</span></span><br><span class=\"line\"><span class=\"comment\">// 而m1的原型指向Error，索引没有sayHello方法</span></span><br><span class=\"line\">m1.<span class=\"title function_\">sayHello</span>(); <span class=\"comment\">// 报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MsgError2</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Error</span> &#123;</span><br><span class=\"line\">  naame = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">m: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(m);</span><br><span class=\"line\">    <span class=\"title class_\">Object</span>.<span class=\"title function_\">setPrototypeOf</span>(<span class=\"variable language_\">this</span>, <span class=\"title class_\">MsgError2</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">sayHello</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">message</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> m2 = <span class=\"keyword\">new</span> <span class=\"title class_\">MsgError2</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">m2.<span class=\"title function_\">sayHello</span>(); <span class=\"comment\">// 正确</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，这种问题会一直传递下去，也就是说，<strong>以 <code>MsgError2</code> 为基类所创造的子类，也需要再次手动调整原型的指向</strong>。此外，不支持<code>IE10</code>及更低的版本。</p>\n<h2 id=\"三、成员的可见性-Member-Visibility\"><a href=\"#三、成员的可见性-Member-Visibility\" class=\"headerlink\" title=\"三、成员的可见性 Member Visibility\"></a>三、成员的可见性 <code>Member Visibility</code></h2><p>在 TS 中，实现了 <code>public</code>，<code>protected</code>，<code>private</code>等修饰符来实现成员的可见性。</p>\n<h3 id=\"1-public\"><a href=\"#1-public\" class=\"headerlink\" title=\"1. public\"></a>1. <code>public</code></h3><p><strong><code>public</code></strong> 修饰符用来定义公开成员，这也是默认的成员可见性，当没有写可见性修饰符时，就默认是 <code>public</code> 。被声明为<code>public</code>的成员，可在任何地方访问。太简单了就不给栗子了。</p>\n<h2 id=\"2-protected\"><a href=\"#2-protected\" class=\"headerlink\" title=\"2. protected\"></a>2. <code>protected</code></h2><p>被 <strong><code>protected</code></strong> 修饰的成员只能在类或者其子类中访问，无法通过实例来访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 类中可以</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getName</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// TS会报错，实例无法访问protected成员</span></span><br></pre></td></tr></table></figure>\n<p>在子类中，如果我们通过字段重新声明了基类中的 <code>protected</code> 成员，则会将其在子类中变为 <code>public</code> 成员，除非重新加上 <code>protected</code> 修饰符：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不加 protected 修饰符， 则name变为public，通过实例来访问</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 而这个则依然是protected成员</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 报错，实例无法调用 protected</span></span><br><span class=\"line\">cc.<span class=\"property\">age</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-private\"><a href=\"#3-private\" class=\"headerlink\" title=\"3. private\"></a>3. <code>private</code></h3><p>被 <strong><code>private</code></strong> 修饰的成员只能在类中访问，无法通过实例来访问，也无法在其子类中访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误，private成员不能在子类中访问</span></span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 同样错误，private成员不能在子类中访问</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// 也错误，private成员不能通过实例来访问</span></span><br></pre></td></tr></table></figure>\n<p>但是在<code>TS</code>中支持在类中通过同类的其它实例获取该实例上的<code>private</code>成员：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">hasSameName</span>(<span class=\"params\">other: Person</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 可以访问其它同类实例的 private 成员name</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> === other.<span class=\"property\">name</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> yy = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;yy&quot;</span>);</span><br><span class=\"line\">cc.<span class=\"title function_\">hasSameName</span>(yy); <span class=\"comment\">// 不报错，得到false</span></span><br></pre></td></tr></table></figure>\n<p>需要注意，成员可见性仅在 <code>TS</code> 的类型检查时有效。一旦代码被编译为 <code>JS</code> 代码，则在<code>JS</code>中，可以通过类实例查看原本在<code>TS</code>是 <code>pretected</code> 或 <code>private</code> 的成员。另外 <code>JS</code> 的私有修饰符 “<code>#</code>“ 可以实现在编译后依然是私有成员。因此，如果要实现通过私有化来保护成员，应使用闭包、<code>WeakMap</code>或私有字段 “<code>#</code>“ 等手段。</p>\n<h2 id=\"四、静态成员-static\"><a href=\"#四、静态成员-static\" class=\"headerlink\" title=\"四、静态成员 static\"></a>四、静态成员 <code>static</code></h2><p>首先我们要明确一点，类本身也是一个对象。我们通过<strong><em><code>static</code></em></strong>修饰符可以将某个成员变成静态成员。<strong>静态成员与类的实例无关，而是被挂到类对象本身，可以与实例成员重名，且静态方法中的 <code>this</code> 指向类对象本身，我们通过类对象本身来访问类成员</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这是实例成员</span></span><br><span class=\"line\">  <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 给实例成员name赋值</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 静态属性 name</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">_name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 静态方法 其中的this指向类Person</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>); <span class=\"comment\">// class Person &#123; // ... &#125;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 访问实例成员_name</span></span><br><span class=\"line\">cc.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// 访问静态成员_name</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;person&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>也许你会好奇我为什么用 <code>_name</code> 而不是<code>name</code>，事实上不是我不使用，而是不能使用。稍后你会得到答案。</p>\n<p>静态成员也可以使用 <code>public</code>、<code>protected</code>、<code>private</code>等修饰符。类似的，<strong><code>protected</code> 静态属性 只能由类或子类中的静态成员访问；<code>private</code>静态成员只能由 类 中的静态成员访问</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> _name = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// 报错，不能访问protected成员</span></span><br></pre></td></tr></table></figure>\n<p>静态成员可以被子类继承：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> _name = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">_name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;person&#x27;</span></span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"title function_\">setName</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"title class_\">Manager</span>.<span class=\"property\">_name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>特殊的静态名字：<strong><code>name</code></strong> ，由于存在内置静态属性 <strong><code>Function.name</code></strong>，因此我们在给静态属性命名时，不能使用<code>name</code>，否则会发生冲突。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误，静态属性name与内置静态属性 Function.name 冲突</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> name = <span class=\"string\">&quot;person&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、静态域\"><a href=\"#五、静态域\" class=\"headerlink\" title=\"五、静态域\"></a>五、静态域</h2><p>我将类中的 <code>static blocks</code> 称为静态域，通过 <strong><em><code>static &#123; &#125;</code></em></strong>声明一块区域，在该区域编写的语句能够自动执行，且能访问私有属性 如 “<code>#name</code>“。因此，可以在静态域中书写静态成员做初始化逻辑。这里想不出什么好的栗子，就搬运了官网的：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Foo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> #count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> <span class=\"title function_\">count</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Foo</span>.#count;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> lastInstances = <span class=\"title function_\">loadLastInstances</span>();</span><br><span class=\"line\">      <span class=\"title class_\">Foo</span>.#count += lastInstances.<span class=\"property\">length</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">catch</span> &#123;&#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"六、泛型类\"><a href=\"#六、泛型类\" class=\"headerlink\" title=\"六、泛型类\"></a>六、泛型类</h2><p>在执行<code>new</code>操作时，泛型类的类型参数也会由传入的参数来进行推论。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: T;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: T</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>); <span class=\"comment\">// T被推论</span></span><br></pre></td></tr></table></figure>\n<p>泛型类可以像泛型接口一样进行泛型约束以及指定类型参数的默认值。大家都能明白的吧，就不给栗子了。</p>\n<p>静态成员无法享用泛型：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 错误，静态成员不可引用类型参数</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"attr\">_name</span>: T;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是因为每个静态成员都只有一个，而实例成员在每个实例上都存在一个。假若静态成员能享用泛型，那么我们<code>new</code>一个实例<code>a</code>，传入类型<code>string</code>，此时静态属性<code>_name</code>类型为<code>string</code>；我们<code>new</code> 一个实例<code>b</code>，传入类型<code>number</code>，那么此时静态属性_<code>name</code>的类型是啥呢？<code>string</code>亦或<code>number</code> ? 显然都不合理。所以静态成员无法使用类型参数。</p>\n<h2 id=\"七、运行时的-this\"><a href=\"#七、运行时的-this\" class=\"headerlink\" title=\"七、运行时的 this\"></a>七、运行时的 <code>this</code></h2><p><code>Ts</code>中的<code>this</code>指向和 <code>JS</code> 保持一致，因此有时候我们需要防止成员丢失<code>this</code>上下文。</p>\n<h3 id=\"1-使用箭头函数\"><a href=\"#1-使用箭头函数\" class=\"headerlink\" title=\"1. 使用箭头函数\"></a>1. 使用箭头函数</h3><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  setName = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是这也需要权衡利弊：</p>\n<ul>\n<li>这样做能保证<code>setName</code>方法的<code>this</code>永远正确地指向实例本身；</li>\n<li>使用中这种方式定义的方法不会挂载原型上，而是会被添加到每一个实例上，因此会占用更多的内存；</li>\n<li>同样，其子类无法通过<code>super</code>,<code>setName</code>来调用父类的<code>setName</code>方法，因为无法在原型链上找到；</li>\n</ul>\n<h3 id=\"2-使用-this-参数\"><a href=\"#2-使用-this-参数\" class=\"headerlink\" title=\"2. 使用 this 参数\"></a>2. 使用 <code>this</code> 参数</h3><p>如同在<code>TS</code>的函数中将<code>this</code>作为参数，为其指定类型一样，在类的方法中也可以如此这般。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 为this指定类型为 Person，则只有Person实例才可以调用该方法</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\"><span class=\"variable language_\">this</span>: Person, name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种方式很好地弥补了箭头函数的不足，唯一的缺点就是习惯了 <code>JS</code> 思维的同学可能会试图通过其它对象来调用该方法，显然这样是不会成功的。</p>\n<h2 id=\"八、-把-this-作为-类型\"><a href=\"#八、-把-this-作为-类型\" class=\"headerlink\" title=\"八、 把 this 作为 类型\"></a>八、 <em>把 <code>this</code> 作为 类型</em></h2><p><strong>首先要说，这玩意儿非常有用</strong>。在<code>TS</code>的类中，<code>this</code> 可以作为一种特殊的类型，由当前的类进行动态推论。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 把 this 作为形参person的类型</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">person: <span class=\"variable language_\">this</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = person.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> b = a.<span class=\"title function_\">setName</span>(a); <span class=\"comment\">// b的类型为当前的类 Person</span></span><br></pre></td></tr></table></figure>\n<p>这里得<code>setName</code>返回了<code>this</code>，这个<code>this</code>是表示实例值，其类型被推论为 <code>this</code>，这个<code>this</code>表示类型。<code>this</code> 类型就会在<code>setName</code>调用时被动态推论为当前的类。这样的好处是在子类中可以也自动推论为子类。例如我们在<code>Person</code>类的实例中调用<code>setName</code>，返回值的类型就是<code>Person</code>；如果在<code>Person</code>的子类<code>Manager</code>的实例中调用<code>setName</code>，返回值的类型则是<code>Person</code>的子类<code>Manage</code>r：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 把 this 作为形参person的类型</span></span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">person: <span class=\"variable language_\">this</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = person.<span class=\"property\">name</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> y = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> yy = y.<span class=\"title function_\">setName</span>(y); <span class=\"comment\">// aa的类型为Person</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = c.<span class=\"title function_\">setName</span>(c); <span class=\"comment\">// cc的类型为Manager</span></span><br></pre></td></tr></table></figure>\n<p><strong>基于 <code>this</code> 类型的 类型守卫</strong>：和在函数中一样，我们可以在类或接口的方法的返回值的类型的位置使用<strong><em><code>this is Type</code></em></strong>来进行类型缩减。写个最简单的栗子吧，实在是懒癌犯了 <code>qwq</code>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  name? = <span class=\"string\">&#x27;cc&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类型守卫的 this 为类型</span></span><br><span class=\"line\">  <span class=\"title function_\">isPerson</span>()<span class=\"variable language_\">this</span> is <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return 语句的 this 指代类实例</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Person</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 可以利用 基于 this 类型的类型守卫 来进行类型缩减</span></span><br><span class=\"line\">  <span class=\"title function_\">hasName</span>()<span class=\"variable language_\">this</span> is &#123;<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>&#125; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> !== <span class=\"literal\">undefined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>()</span><br><span class=\"line\"><span class=\"comment\">// 利用类型守卫来进行类型缩减</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cc.<span class=\"title function_\">hasName</span>())&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"九、参数属性\"><a href=\"#九、参数属性\" class=\"headerlink\" title=\"九、参数属性\"></a>九、参数属性</h2><p>参数属性是<code>TS</code>提供的一个非常方便的语法。在构造函数的参数前加上 <code>public</code>、<code>protected</code>、<code>private</code>或者<code>readonly</code>等修饰符，就可以把普通参数变为参数属性。参数属性既是构造函数的参数，又会作为实例属性自动被添加到实例上，且在传参时自动进行赋值，无需在函数体内进行赋值操作。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">protected</span> age: <span class=\"built_in\">number</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> gender: <span class=\"number\">1</span> | <span class=\"number\">2</span></span></span><br><span class=\"line\"><span class=\"params\">  </span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 不需要在这里再进行赋值</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">setAge</span>(<span class=\"params\">age: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">getAge</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;</span></span><br><span class=\"line\">cc.<span class=\"title function_\">setAge</span>(<span class=\"number\">20</span>);</span><br><span class=\"line\">cc.<span class=\"title function_\">getAge</span>(); <span class=\"comment\">// 20</span></span><br><span class=\"line\">cc.<span class=\"property\">gender</span>; <span class=\"comment\">// 报错，private属性不能通过实例</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十、类表达式\"><a href=\"#十、类表达式\" class=\"headerlink\" title=\"十、类表达式\"></a>十、类表达式</h2><p>类似函数表达式，没啥说的，直接上栗子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">Person</span> = <span class=\"keyword\">class</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> cc = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\">cc.<span class=\"property\">name</span>; <span class=\"comment\">// &#x27;cc&#x27;  cc的类型是Person</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"十一、abstract-抽象类及其成员\"><a href=\"#十一、abstract-抽象类及其成员\" class=\"headerlink\" title=\"十一、abstract 抽象类及其成员\"></a>十一、<em>abstract</em> 抽象类及其成员</h2><p>含有抽象成员的类为抽象类。抽象类和抽象成员都需要在前面加上 <strong><code>abstract</code></strong> 修饰符。抽象类不能使用 <code>new</code> 进行实例化，而是用来作为<strong>基类</strong>，声明一些抽象方法或抽象属性，其子类需要实现所有这些方法或属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"title function_\">setName</span>(<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类必须包含父类的全部</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;manager&quot;</span>;</span><br><span class=\"line\">  <span class=\"title function_\">setName</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"十二、类成员之间的关系\"><a href=\"#十二、类成员之间的关系\" class=\"headerlink\" title=\"十二、类成员之间的关系\"></a>十二、类成员之间的关系</h2><p>和其它类型一样，类之间也是通过结构来进行比较的，当拥有相同的成员，则可以相互替换；当一个类<code>A</code>中含有另一个类<code>B</code>的所有成员，尽管没有显示地通过 <code>extends</code> 继承，类 <code>A</code> 依然会被认为是类 <code>B</code> 的子类。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Manager</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">person</span>: <span class=\"title class_\">Person</span> = <span class=\"keyword\">new</span> <span class=\"title class_\">Manager</span>();</span><br></pre></td></tr></table></figure>\n<p>这看起来很直观简单，不过少数情况下会看起来有些 <code>emmm</code>，怪怪的。拿个官方栗子来：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Empty</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">x: Empty</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 啥也不做</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以下这几个都没问题，也就是说，它们都是空类 Empty 的子类</span></span><br><span class=\"line\"><span class=\"comment\">// bigint和symbol不是</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"variable language_\">window</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(&#123;&#125;);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(fn);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"literal\">undefined</span>);</span><br></pre></td></tr></table></figure>\n<p>关于类的知识就分享到这里啦，下一篇 分享 <code>TS</code> 中的 <strong><em>模块</em></strong> 的内容，不见不散！</p>\n"},{"title":"TypeScript系列基础篇(四) 类型操纵","date":"2022-03-03T12:39:00.000Z","updated":"2022-03-03T12:39:00.000Z","keywords":["前端","TypeScript","TS","类型"],"archive":"TypeScript","swiper_index":50,"_content":"\n# TypeScript 系列基础篇(四) 类型操纵\n\n定义一个类型，我们通常使用**`interface`**和 **`type`**关键字来进行规定，有时候也会直接使用字面量类型，这些过程足以应付大部分场景。但是有些时候，我们希望掌握**从已经存在的值或者类型中提取或派生出新的类型**的技巧，这就是我们今天要来了解的**`Type Manipulation` 类型操纵**。相信我，掌握这些技巧后，你也能被各种类型玩出百般花样。\n\n## 一、使用 **_`keyof`_** 操作符\n\n使用 **`keyof`** 操作符，可以获取一个 **对象类型** 的属性名 (字符串或者数值)，并将其组合成一个联合类型。注意得到的是一个类型，因此**应使用`type`关键字**，而不能使用`var`, `let`, `const`等声明值变量的关键字。\n\n- 一般情况下，`keyof`操作会得到字面量联合类型；\n\n```typescript\n// Person类型有三个属性，属性名分别为\"name\",\"age\",100\ninterface Person {\n  name: string;\n  age: number;\n  100: string[];\n}\n\n// 对Person类型使用keyof操作符，可以将其属性名组合成一个字面量联合类型\ntype NewType = keyof Person; // NewType为 \"name\" | \"age\" | 100\n```\n\n- 如果被操作的对象类型有着`string`类型或者`number`类型的**索引签名**，那么`keyof`操作会得到`string`或者`number`类型，而不是字面量类型。\n\n  - `number`类型的索引签名，`keyof`会得到 `number` 类型；\n  - `string`类型的索引签名，`keyof`会得到 `string | number` 类型；\n\n```typescript\n// 索引签名规定索引必须为number类型，属性值是string类型\ninterface Person {\n  [x: number]: string;\n}\n// Type1为number类型\ntype Type1 = keyof Person;\n\n// 但是如果是string类型的索引签名\ninterface People {\n  [x: string]: string;\n}\n// Type2为 string | number\ntype Type2 = keyof People;\n```\n\n由于`JavaScript`中对象的 `key` 会被强制转换成 `string` 类型。因此，我们即使用数值型的`key`，最后也等同于转化之后的字符串 `key` ，**即 `obj[0]` 和 `obj[\"0\"]` 完全一样**。因此，**`string`类型的索引签名，对象实例可以由 `number` 类型的`key`，因为会被强制转化为`string`。所以`keyof`操作得到的是 `string | number`类型**。\n\n## 二、使用 _`typeof`_ 操作符\n\n在`JavaScript`中，**`typeof`**操作符常用于基本数据类型的判断。而`TS`在类型上下文中也加入了 **`typeof`** 操作符，用于获取一个变量或属性的类型。不同于我们平常的用法，当`typeof`出现在类型上下文中时，得到的类型也可以是一个对象类型。\n\n```typescript\nlet a = 100;\nconst obj = {\n  name: \"cc\",\n  age: 18,\n};\ntype T = typeof a; // T为number\ntype K = typeof obj.name; // K为string\n\ntype U = typeof obj; // U为 {name: string, age: number}\n```\n\n**`typeof`**用在这些简单类型的值上，不得不说有点累赘。但是对于复杂类型的值，用`typeof`就可以很方便地表达多种类型。例如，可以用`TS`提供的泛型类型**`ReturnType`**来获取一个**函数类型**的**返回值的类型**(指定`ReturnType`的类型参数为某个函数类型，得到该函数类型的返回值的类型)。\n\n```typescript\n// 泛型函数类型表达式，设置泛型类型参数默认值\ntype Fn<T = number> = (x: T) => T;\n// 不指定类型参数，则泛型T为number\ntype Type1 = ReturnType<Fn>; // Type1为number\n// 指定泛型类型参数T为string\ntype Type2 = ReturnType<Fn<string>>; // Type2为string\n```\n\n注意 **`ReturnType`** 接收的泛型类型参数应该是一个类型，而不是一个值。在类型上下文中可以使用`typeof`关键字将通过**表示值的变量或属性**来表达一个类型。\n\n```typescript\n// fn是\"值\"\nfunction fn(a: number) {\n  return a + 1;\n}\n// 错误，ReturnType的泛型类型参数应该是一个类型，而不是一个值\ntype Type1 = ReturnType<fn>;\n// 使用typeof 关键字表达fn的类型, ok\ntype Type2 = returnType<typeof fn>; // Type2为number\n```\n\n注意，**`typeof`关键字在类型上下文中，永远只能用于变量名和属性名后面**。在平常用于判断类型时，则不受此限制。**类型上下文**：接收一个类型作为参数或者声明、表达、生成一个类型的上下文，如`interface`、`type`等关键字以及泛型参数的上下文。\n\n## 三、索引访问类型\n\n在**对象实例**中，我们可以通过索引来访问某个属性值。同样的，在**对象类型**中，我们也可以通过索引访问某个属性的类型，此时的索引应该是一个类型，而不是一个值，用方括号的形式接收该索引。索引可以是联合类型、字面量类型、类型别名、乃至`keyof`操作符表达的类型\n\n```typescript\n// 定义一个对象类型\ninterface Person {\n  name: string;\n  age: number;\n}\n\n// 通过方括号索引获得某个属性的类型，索引为字面量类型\"name\"\ntype Name = Person[\"name\"]; // name\n// 错误，不可以用 . 的方式访问\ntype Age = Person.age;\n\n// 索引为字面量联合类型 \"name\" | \"age\"\ntype NameOrAge1 = Person[\"name\" | \"age\"]; // string | number\n\n// 索引为类型别名\ntype M = \"name\" | \"age\";\ntype NameOrAge2 = Person[M]; // string | number\n\n// 索引为用keyof表达的类型\ntype NameOrAge3 = Person[keyof Person]; // string | number\n```\n\n无法访问对象类型中没有的属性。\n\n```typescript\n// 定义一个对象类型\ninterface Person {\n  name: string;\n  age: number;\n}\n// 错误，Person类型中没有gender属性/方法\ntype T = Person[\"gender\"];\n```\n\n前面说到，接收的索引应该是一个类型。所以，当我们的对象类型具有索引签名时，则也可以接收**`string`**、**`number`**。另外，在数组类型中，也可以用`number`作为索引来访问。\n\n```typescript\ninterface Person {\n  [x: number]: string[];\n  [x: string]: string[];\n}\n\n// 使用number作为索引\ntype A = Person[number]; // string[]\n// 使用string作为索引\ntype B = Person[string]; // string[]\n\nconst arr = [1, 2, \"cc\"];\ntype C = typeof arr[number]; // number | string\n```\n\n## 四、条件类型\n\n类似我们常用的三元表达式，**条件类型表达式**：**_`Type1 extends Type2 ? TrueType : FalseType`_**；当`Type2`是`Type1`的子类型时，表达式得到`TrueType`，否则得到`FalseType`。这看起来好像没啥用，然而，\n\n- **条件类型表达式的强劲之处在于用于泛型**。\n\n```typescript\ntype MyType<T> = T extends { info: unknown } ? T[\"info\"] : never;\n\nlet a: MyType<{ name: string; info: number }>; // a为number类型的值\nlet b: MyType<Array<string>>; // b为never类型的值\n```\n\n对条件类型的泛型类型参数使用`extends`关键字可以约束其类型：\n\n- **在条件类型中进行推论**\n\n在条件类型表达式的中使用 **_`infer`_**关键字推论泛型类型参数或函数类型的返回值的类型，并用一个形式类型指代，这个形式类型可用于条件类型表达式中指代推论得出的实际类型。\n\n```typescript\n// 在条件类型表达式的Array泛型中使用infer关键字，\n// 推论Array成员的类型为Item类型\ntype MyType<Type> = Type extends Array<infer Item> ? Item : Type;\n\nlet a: MyType<string[]>; // a为string类型的变量\n```\n\n- **分布式条件类型**\n\n当我们为泛型指定的类型参数为联合类型时，条件类型的作用会分布于联合类型的每一个单独的子类型上。\n\n```typescript\ntype GetArrType<T> = T extends any ? T[] : never;\n\n// T[]的作用会分布到strig和number上，形成string[] | number[]\ntype StrOrNumArr = GetArrType<string | number>; // string[] | number[]\n```\n\n## 五、映射类型\n\n### 1. 基本使用\n\n映射类型是一种泛型，往往**建立在索引签名之上**，即以索引签名的形式，利用指定的泛型类型参数`T`的所有属性类型的联合(一般使用 `keyof` 关键字来遍历出`T`的所有属性类型)，作为新的对象类型的索引签名，并为其指定新的返回值类型。好吧，这太绕了。说白了，就是**给对象类型 A 的所有属性/方法指定新的返回值的类型，从而得到一个新的对象类型**。**关键字 `in` 后面是一个与类型参数`T`有关的联合类型**。还是有些绕？那就来看一个栗子吧：\n\n```typescript\ntype OptionsFlags<Type> = {\n  // 索引签名的形式，这里的Property时类型参数，可以随便命名,T、K啥的都可以\n  [Property in keyof Type]: boolean;\n};\n\n// 我们尝试定义一个对象类型\ninterface Person {\n  name: string;\n  age: number;\n  gender: 1 | 2;\n}\n\n// 将Person类型传递给OptionsFlag，得到新的类型\ntype NewType = OptionsFlags<Person>;\n/*\nNewType为 {\n  name: boolean,\n  age: boolean,\n  gender: boolean\n}\n*/\n```\n\n这下我们就能明白了，文字说再多都是虚的，还得是代码。通过映射类型的方式得到新的类型，新类型继承了所有原来的属性(包括方法)，并指定了新的返回值 (当然可以使用条件类型表达式)。\n\n### 2.映射修饰符\n\n既然已经了解了映射类型的基本使用，现在来看看有哪些类型修饰符，它们又分别是用来做什么的。在上一篇文章[今天来聊聊 TS 中的那些对象类型----TypeScript 系列：(三) 对象类型](https://juejin.cn/post/7070434381013188615)中，我们了解了对象属性的属性修饰符 `?` 和 `readonly`，事实上，映射修饰符也是这两小只。\n\n- **`readonly` 修饰符**\n\n  我们知道，通过映射类型，我们可以继承原有对象类型的所有属性，并它们指定新的返回值的类型。那么，我们如何为新的对象类型的属性添加为只读属性呢？或者如果原有的类型中存在只读属性，如何在新的类型中移除只读限制呢？很简单，在签名的` [ ]` 之前使用 **`+readonly`** 、**`-readonly`** 号即可，+ 号也可以省略。\n\n```typescript\n// Person类型中有只读\ninterface Person {\n  name: string;\n  age: number;\n  readonly id: string;\n}\n// 定义一个映射类型MapperA\ntype MapperA<T> = {\n  [P in keyof T]: string[];\n};\n\n// 给Mapper传入Person类型\ntype PeopleA = MapperA<Person>;\n/*\nPersonA为 {\n  name: string[],\n  age: string[],\n  readonly id: string[]\n}\n*/\n\n// 使用 - 移除新类型id的readonly限制\ntype MapperB<T> = {\n  -readonly [K in keyof T]: string[];\n};\ntype PeopleB = MapperB<Person>;\n/*\nPeopleB为 {\n  name: string[],\n  age: string[],\n  id: string[]\n}\n*/\n\n// 使用 + 给新的对象类型的所有属性添加只读限制\ntype MapperC<T> = {\n  +readonly [K in keyof T]: string[];\n};\ntype PeopleC = MapperC<Person>;\n\n// + 号通常省略\ntype PeopleCC = MapperC<Person>;\n/*\nPeopleC、PeopleCC都为  {\n  readonly name: string[];\n  readonly age: string[];\n  readonly id: string[];\n}\n*/\n```\n\n- **`?` 可选修饰符**\n\n同样，在映射类型产生新类型时，可选修饰符也会保留。我们可以**在签名的 `[ ]` 后用 `-?`来移除可选性**。\n\n```typescript\ntype NewType<T> = {\n  [P in keyof T]-?: string;\n};\n```\n\n### 3. `key`的重映射\n\n**使用 `as` 可以在新的对象类型中对原有的 `key` 进行重映射**。直接`show code`吧，来一道官方栗子：\n\n```typescript\ntype Getters<Type> = {\n  // 这句代码可以分为三个部分\n  [Property in keyof Type as `get${Capitalize<\n    string & Property\n  >}`]: () => Type[Property];\n};\n\ninterface Person {\n  name: string;\n  age: number;\n  gender: 1 | 2;\n  100: string;\n}\n\ntype GetPerson = Getters<Person>;\n/*\nGetPerson为 {\n  getName: () => string;\n  getAge: () => number;\n  getGender: () => 1 | 2;\n}\n*/\n```\n\n在上面的栗子中，我们把那句代码分为三个部分, \"`as`\" 之前的`A`部分, \"`as`\" ~ \"`:`\" 之间的`B`部分，\"`:`\"之后的`C`部分。`A` 和 `C`两部分结合起来，就是我们之前了解到的映射类型。所以，难点在于理解 `B` 部分的内容。这里涉及到了**模板字面量类型**，类似与模板字符串，(下一节有详细介绍)。**`Capitalize`**是`TS`提供的首字母大写的泛型类型。类型参数`Property`指代`keyof`每一次遍历到的类型`Type`的`key`，使用 `as` 将 新的对象类型中对应的 `key` 重命名为 模板字面量类型 `get + Property`类型(即原来的对象类型的对应的`key`)中属于`string`类型的`key` (即排除`number`索引) 首字母大写的 。\n\n还可以利用`TS`提供**`Exclude<P, B>`的泛型类型**来排除 B 类型。\n\n```typescript\n// 新类型中移除了\"kind\"属性\ntype RemoveKindField<Type> = {\n  [Property in keyof Type as Exclude<Property, \"kind\">]: Type[Property];\n};\n```\n\n还记得一开始我们说的**关键字 `in` 后面是一个与类型参数`T`有关的联合类型**吗？事实上，这个联合类型不是仅仅只能用简单类型的联合，而可以是一切类型的联合，只需要通过 `as` 来把 `key` 重新映射为`string`或`number`或两者的字面量类型即可。\n\n```typescript\ntype EventConfig<Events extends { kind: string }> = {\n  [E in Events as E[\"kind\"]]: (event: E) => void;\n};\n```\n\n上面是一个官网的栗子。`Events`是一个具`kind`属性的对象类型的联合类型，`E `代表这个联合类型中的每一个具有`kind`属性的对象类型，也是新对象的`key`，通过` as` 关键字将 `E` 重映射为索引访问类型 `E[\"kind\"]`，也就是`string`类型。因此，最后得到的是一个 `key` 为`string`类型的方法签名(函数的调用签名)。\n\n(不得不说，各种类型操纵方法结合起来，是真能玩出花来。虽然明白比尔写的是啥，但我这脑瓜子实在是设计不出来这么优雅的类型。)\n\n## 六、模板字面量类型\n\n这是本文要分享的最后一种类型操纵方式了，毕竟没把泛型加进来讲，因为我之前的文章里介绍过了。\n\n- 利用字符串模板的形式，可以得到模板字面量类型。注意类型是用`type`来定义。\n\n```typescript\ntype Name = \"cc\"; // 类型，不是值，不要使用let、var、const等\ntype TemplateType = `I am ${Name}`; // 'I am cc'类型，不是值\n```\n\n- 如果模板用的类型是联合类型，则会分别对联合类型的每一个类型进行处理\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype TemplateType = `love${Name}`; // 'lovecc' | 'loveyy'\n```\n\n- 如果模板本身也是联合类型，则会分别对模板的每一个类型和使用的类型进行处理\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype Gender = 1 | 2;\ntype TemplateType = `love${Name | Gender}`;\n/*\n则TemplateType为 lovecc | loveyy | love1 | love2\n*/\n```\n\n- 如果有多个模板，则是将每个模板的情况和其它模板的情况进行组合\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype Gender = 1 | 2;\ntype Age = 18 | 20;\ntype TemplateType = `${Age}love${Name | Gender}`;\n/*\n则TemplateType为\n18lovecc | 18loveyy | 18love1 | 18love2\n | 20lovecc | 20loveyy | 20love1 | 20love2\n*/\n```\n\n- 用在函数签名中，才能体会到模版字面量类型有多强大\n\n```typescript\ntype PropEventSource<Type> = {\n  // 调用签名，通过模板字面量类型指定了第一个参数的类型\n  on(\n    eventName: `${string & keyof Type}Changed`,\n    callback: (newValue: any) => void\n  ): void;\n};\n```\n\n- 模板字面量类型的推论\n\n把`on( )`设计为泛型函数，使`TS`自己进行类型推论。不说了，都是泪。直接上官方示例代码吧。一层一层的泛型，不思考的话实在不容易看懂。\n\n```typescript\ntype PropEventSource<Type> = {\n  on<Key extends string & keyof Type>(\n    eventName: `${Key}Changed`,\n    callback: (newValue: Type[Key]) => void\n  ): void;\n};\n```\n\n## 七、内置的字符串操纵类型\n\n### 1. `Uppercase <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为大写**的新类型。不改变原来的类型。如果是`string`类型而不是字面量类型，则生成的类型依然是`string`，不要求其值的首字母大写（一下几个内置方法都是如此）。\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype UpperName = Uppercase<Name>; // 'CC' | 'YY'\n```\n\n### 2. `Lowercase <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为小写**的新类型。不改变原来的类型。\n\n```typescript\ntype Name = \"CC\" | \"YY\";\ntype UpperName = Uppercase<Name>; // 'cc' | 'yy'\n```\n\n### 3. `Capitalize <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为大写**的新类型。不改变原来的类型。\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype UpperName = Uppercase<Name>; // 'Cc' | 'Yy'\n```\n\n### 4. `Uncapitalize <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为小写**的新类型。不改变原来的类型。\n\n```typescript\ntype Name = \"CC\" | \"YY\";\ntype UpperName = Uppercase<Name>; // 'cC' | 'yY'\n```\n\n好了，本篇就到此为止了，各种类型已经把我玩出花来了。下一篇，我们将一起学习 **`class`** ，不见不散！\n","source":"_posts/TypeScript 系列/基础篇/TypeScript系列  基础篇(四)  类型操纵.md","raw":"---\ntitle: TypeScript系列基础篇(四) 类型操纵\ndate: 2022-03-03 20:39\nupdated: 2022-03-03 20:39\nkeywords:\n  - 前端\n  - TypeScript\n  - TS\n  - 类型\ntags:\n  - TypeScript\n  - 前端\narchive: TypeScript\nswiper_index: 50\n---\n\n# TypeScript 系列基础篇(四) 类型操纵\n\n定义一个类型，我们通常使用**`interface`**和 **`type`**关键字来进行规定，有时候也会直接使用字面量类型，这些过程足以应付大部分场景。但是有些时候，我们希望掌握**从已经存在的值或者类型中提取或派生出新的类型**的技巧，这就是我们今天要来了解的**`Type Manipulation` 类型操纵**。相信我，掌握这些技巧后，你也能被各种类型玩出百般花样。\n\n## 一、使用 **_`keyof`_** 操作符\n\n使用 **`keyof`** 操作符，可以获取一个 **对象类型** 的属性名 (字符串或者数值)，并将其组合成一个联合类型。注意得到的是一个类型，因此**应使用`type`关键字**，而不能使用`var`, `let`, `const`等声明值变量的关键字。\n\n- 一般情况下，`keyof`操作会得到字面量联合类型；\n\n```typescript\n// Person类型有三个属性，属性名分别为\"name\",\"age\",100\ninterface Person {\n  name: string;\n  age: number;\n  100: string[];\n}\n\n// 对Person类型使用keyof操作符，可以将其属性名组合成一个字面量联合类型\ntype NewType = keyof Person; // NewType为 \"name\" | \"age\" | 100\n```\n\n- 如果被操作的对象类型有着`string`类型或者`number`类型的**索引签名**，那么`keyof`操作会得到`string`或者`number`类型，而不是字面量类型。\n\n  - `number`类型的索引签名，`keyof`会得到 `number` 类型；\n  - `string`类型的索引签名，`keyof`会得到 `string | number` 类型；\n\n```typescript\n// 索引签名规定索引必须为number类型，属性值是string类型\ninterface Person {\n  [x: number]: string;\n}\n// Type1为number类型\ntype Type1 = keyof Person;\n\n// 但是如果是string类型的索引签名\ninterface People {\n  [x: string]: string;\n}\n// Type2为 string | number\ntype Type2 = keyof People;\n```\n\n由于`JavaScript`中对象的 `key` 会被强制转换成 `string` 类型。因此，我们即使用数值型的`key`，最后也等同于转化之后的字符串 `key` ，**即 `obj[0]` 和 `obj[\"0\"]` 完全一样**。因此，**`string`类型的索引签名，对象实例可以由 `number` 类型的`key`，因为会被强制转化为`string`。所以`keyof`操作得到的是 `string | number`类型**。\n\n## 二、使用 _`typeof`_ 操作符\n\n在`JavaScript`中，**`typeof`**操作符常用于基本数据类型的判断。而`TS`在类型上下文中也加入了 **`typeof`** 操作符，用于获取一个变量或属性的类型。不同于我们平常的用法，当`typeof`出现在类型上下文中时，得到的类型也可以是一个对象类型。\n\n```typescript\nlet a = 100;\nconst obj = {\n  name: \"cc\",\n  age: 18,\n};\ntype T = typeof a; // T为number\ntype K = typeof obj.name; // K为string\n\ntype U = typeof obj; // U为 {name: string, age: number}\n```\n\n**`typeof`**用在这些简单类型的值上，不得不说有点累赘。但是对于复杂类型的值，用`typeof`就可以很方便地表达多种类型。例如，可以用`TS`提供的泛型类型**`ReturnType`**来获取一个**函数类型**的**返回值的类型**(指定`ReturnType`的类型参数为某个函数类型，得到该函数类型的返回值的类型)。\n\n```typescript\n// 泛型函数类型表达式，设置泛型类型参数默认值\ntype Fn<T = number> = (x: T) => T;\n// 不指定类型参数，则泛型T为number\ntype Type1 = ReturnType<Fn>; // Type1为number\n// 指定泛型类型参数T为string\ntype Type2 = ReturnType<Fn<string>>; // Type2为string\n```\n\n注意 **`ReturnType`** 接收的泛型类型参数应该是一个类型，而不是一个值。在类型上下文中可以使用`typeof`关键字将通过**表示值的变量或属性**来表达一个类型。\n\n```typescript\n// fn是\"值\"\nfunction fn(a: number) {\n  return a + 1;\n}\n// 错误，ReturnType的泛型类型参数应该是一个类型，而不是一个值\ntype Type1 = ReturnType<fn>;\n// 使用typeof 关键字表达fn的类型, ok\ntype Type2 = returnType<typeof fn>; // Type2为number\n```\n\n注意，**`typeof`关键字在类型上下文中，永远只能用于变量名和属性名后面**。在平常用于判断类型时，则不受此限制。**类型上下文**：接收一个类型作为参数或者声明、表达、生成一个类型的上下文，如`interface`、`type`等关键字以及泛型参数的上下文。\n\n## 三、索引访问类型\n\n在**对象实例**中，我们可以通过索引来访问某个属性值。同样的，在**对象类型**中，我们也可以通过索引访问某个属性的类型，此时的索引应该是一个类型，而不是一个值，用方括号的形式接收该索引。索引可以是联合类型、字面量类型、类型别名、乃至`keyof`操作符表达的类型\n\n```typescript\n// 定义一个对象类型\ninterface Person {\n  name: string;\n  age: number;\n}\n\n// 通过方括号索引获得某个属性的类型，索引为字面量类型\"name\"\ntype Name = Person[\"name\"]; // name\n// 错误，不可以用 . 的方式访问\ntype Age = Person.age;\n\n// 索引为字面量联合类型 \"name\" | \"age\"\ntype NameOrAge1 = Person[\"name\" | \"age\"]; // string | number\n\n// 索引为类型别名\ntype M = \"name\" | \"age\";\ntype NameOrAge2 = Person[M]; // string | number\n\n// 索引为用keyof表达的类型\ntype NameOrAge3 = Person[keyof Person]; // string | number\n```\n\n无法访问对象类型中没有的属性。\n\n```typescript\n// 定义一个对象类型\ninterface Person {\n  name: string;\n  age: number;\n}\n// 错误，Person类型中没有gender属性/方法\ntype T = Person[\"gender\"];\n```\n\n前面说到，接收的索引应该是一个类型。所以，当我们的对象类型具有索引签名时，则也可以接收**`string`**、**`number`**。另外，在数组类型中，也可以用`number`作为索引来访问。\n\n```typescript\ninterface Person {\n  [x: number]: string[];\n  [x: string]: string[];\n}\n\n// 使用number作为索引\ntype A = Person[number]; // string[]\n// 使用string作为索引\ntype B = Person[string]; // string[]\n\nconst arr = [1, 2, \"cc\"];\ntype C = typeof arr[number]; // number | string\n```\n\n## 四、条件类型\n\n类似我们常用的三元表达式，**条件类型表达式**：**_`Type1 extends Type2 ? TrueType : FalseType`_**；当`Type2`是`Type1`的子类型时，表达式得到`TrueType`，否则得到`FalseType`。这看起来好像没啥用，然而，\n\n- **条件类型表达式的强劲之处在于用于泛型**。\n\n```typescript\ntype MyType<T> = T extends { info: unknown } ? T[\"info\"] : never;\n\nlet a: MyType<{ name: string; info: number }>; // a为number类型的值\nlet b: MyType<Array<string>>; // b为never类型的值\n```\n\n对条件类型的泛型类型参数使用`extends`关键字可以约束其类型：\n\n- **在条件类型中进行推论**\n\n在条件类型表达式的中使用 **_`infer`_**关键字推论泛型类型参数或函数类型的返回值的类型，并用一个形式类型指代，这个形式类型可用于条件类型表达式中指代推论得出的实际类型。\n\n```typescript\n// 在条件类型表达式的Array泛型中使用infer关键字，\n// 推论Array成员的类型为Item类型\ntype MyType<Type> = Type extends Array<infer Item> ? Item : Type;\n\nlet a: MyType<string[]>; // a为string类型的变量\n```\n\n- **分布式条件类型**\n\n当我们为泛型指定的类型参数为联合类型时，条件类型的作用会分布于联合类型的每一个单独的子类型上。\n\n```typescript\ntype GetArrType<T> = T extends any ? T[] : never;\n\n// T[]的作用会分布到strig和number上，形成string[] | number[]\ntype StrOrNumArr = GetArrType<string | number>; // string[] | number[]\n```\n\n## 五、映射类型\n\n### 1. 基本使用\n\n映射类型是一种泛型，往往**建立在索引签名之上**，即以索引签名的形式，利用指定的泛型类型参数`T`的所有属性类型的联合(一般使用 `keyof` 关键字来遍历出`T`的所有属性类型)，作为新的对象类型的索引签名，并为其指定新的返回值类型。好吧，这太绕了。说白了，就是**给对象类型 A 的所有属性/方法指定新的返回值的类型，从而得到一个新的对象类型**。**关键字 `in` 后面是一个与类型参数`T`有关的联合类型**。还是有些绕？那就来看一个栗子吧：\n\n```typescript\ntype OptionsFlags<Type> = {\n  // 索引签名的形式，这里的Property时类型参数，可以随便命名,T、K啥的都可以\n  [Property in keyof Type]: boolean;\n};\n\n// 我们尝试定义一个对象类型\ninterface Person {\n  name: string;\n  age: number;\n  gender: 1 | 2;\n}\n\n// 将Person类型传递给OptionsFlag，得到新的类型\ntype NewType = OptionsFlags<Person>;\n/*\nNewType为 {\n  name: boolean,\n  age: boolean,\n  gender: boolean\n}\n*/\n```\n\n这下我们就能明白了，文字说再多都是虚的，还得是代码。通过映射类型的方式得到新的类型，新类型继承了所有原来的属性(包括方法)，并指定了新的返回值 (当然可以使用条件类型表达式)。\n\n### 2.映射修饰符\n\n既然已经了解了映射类型的基本使用，现在来看看有哪些类型修饰符，它们又分别是用来做什么的。在上一篇文章[今天来聊聊 TS 中的那些对象类型----TypeScript 系列：(三) 对象类型](https://juejin.cn/post/7070434381013188615)中，我们了解了对象属性的属性修饰符 `?` 和 `readonly`，事实上，映射修饰符也是这两小只。\n\n- **`readonly` 修饰符**\n\n  我们知道，通过映射类型，我们可以继承原有对象类型的所有属性，并它们指定新的返回值的类型。那么，我们如何为新的对象类型的属性添加为只读属性呢？或者如果原有的类型中存在只读属性，如何在新的类型中移除只读限制呢？很简单，在签名的` [ ]` 之前使用 **`+readonly`** 、**`-readonly`** 号即可，+ 号也可以省略。\n\n```typescript\n// Person类型中有只读\ninterface Person {\n  name: string;\n  age: number;\n  readonly id: string;\n}\n// 定义一个映射类型MapperA\ntype MapperA<T> = {\n  [P in keyof T]: string[];\n};\n\n// 给Mapper传入Person类型\ntype PeopleA = MapperA<Person>;\n/*\nPersonA为 {\n  name: string[],\n  age: string[],\n  readonly id: string[]\n}\n*/\n\n// 使用 - 移除新类型id的readonly限制\ntype MapperB<T> = {\n  -readonly [K in keyof T]: string[];\n};\ntype PeopleB = MapperB<Person>;\n/*\nPeopleB为 {\n  name: string[],\n  age: string[],\n  id: string[]\n}\n*/\n\n// 使用 + 给新的对象类型的所有属性添加只读限制\ntype MapperC<T> = {\n  +readonly [K in keyof T]: string[];\n};\ntype PeopleC = MapperC<Person>;\n\n// + 号通常省略\ntype PeopleCC = MapperC<Person>;\n/*\nPeopleC、PeopleCC都为  {\n  readonly name: string[];\n  readonly age: string[];\n  readonly id: string[];\n}\n*/\n```\n\n- **`?` 可选修饰符**\n\n同样，在映射类型产生新类型时，可选修饰符也会保留。我们可以**在签名的 `[ ]` 后用 `-?`来移除可选性**。\n\n```typescript\ntype NewType<T> = {\n  [P in keyof T]-?: string;\n};\n```\n\n### 3. `key`的重映射\n\n**使用 `as` 可以在新的对象类型中对原有的 `key` 进行重映射**。直接`show code`吧，来一道官方栗子：\n\n```typescript\ntype Getters<Type> = {\n  // 这句代码可以分为三个部分\n  [Property in keyof Type as `get${Capitalize<\n    string & Property\n  >}`]: () => Type[Property];\n};\n\ninterface Person {\n  name: string;\n  age: number;\n  gender: 1 | 2;\n  100: string;\n}\n\ntype GetPerson = Getters<Person>;\n/*\nGetPerson为 {\n  getName: () => string;\n  getAge: () => number;\n  getGender: () => 1 | 2;\n}\n*/\n```\n\n在上面的栗子中，我们把那句代码分为三个部分, \"`as`\" 之前的`A`部分, \"`as`\" ~ \"`:`\" 之间的`B`部分，\"`:`\"之后的`C`部分。`A` 和 `C`两部分结合起来，就是我们之前了解到的映射类型。所以，难点在于理解 `B` 部分的内容。这里涉及到了**模板字面量类型**，类似与模板字符串，(下一节有详细介绍)。**`Capitalize`**是`TS`提供的首字母大写的泛型类型。类型参数`Property`指代`keyof`每一次遍历到的类型`Type`的`key`，使用 `as` 将 新的对象类型中对应的 `key` 重命名为 模板字面量类型 `get + Property`类型(即原来的对象类型的对应的`key`)中属于`string`类型的`key` (即排除`number`索引) 首字母大写的 。\n\n还可以利用`TS`提供**`Exclude<P, B>`的泛型类型**来排除 B 类型。\n\n```typescript\n// 新类型中移除了\"kind\"属性\ntype RemoveKindField<Type> = {\n  [Property in keyof Type as Exclude<Property, \"kind\">]: Type[Property];\n};\n```\n\n还记得一开始我们说的**关键字 `in` 后面是一个与类型参数`T`有关的联合类型**吗？事实上，这个联合类型不是仅仅只能用简单类型的联合，而可以是一切类型的联合，只需要通过 `as` 来把 `key` 重新映射为`string`或`number`或两者的字面量类型即可。\n\n```typescript\ntype EventConfig<Events extends { kind: string }> = {\n  [E in Events as E[\"kind\"]]: (event: E) => void;\n};\n```\n\n上面是一个官网的栗子。`Events`是一个具`kind`属性的对象类型的联合类型，`E `代表这个联合类型中的每一个具有`kind`属性的对象类型，也是新对象的`key`，通过` as` 关键字将 `E` 重映射为索引访问类型 `E[\"kind\"]`，也就是`string`类型。因此，最后得到的是一个 `key` 为`string`类型的方法签名(函数的调用签名)。\n\n(不得不说，各种类型操纵方法结合起来，是真能玩出花来。虽然明白比尔写的是啥，但我这脑瓜子实在是设计不出来这么优雅的类型。)\n\n## 六、模板字面量类型\n\n这是本文要分享的最后一种类型操纵方式了，毕竟没把泛型加进来讲，因为我之前的文章里介绍过了。\n\n- 利用字符串模板的形式，可以得到模板字面量类型。注意类型是用`type`来定义。\n\n```typescript\ntype Name = \"cc\"; // 类型，不是值，不要使用let、var、const等\ntype TemplateType = `I am ${Name}`; // 'I am cc'类型，不是值\n```\n\n- 如果模板用的类型是联合类型，则会分别对联合类型的每一个类型进行处理\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype TemplateType = `love${Name}`; // 'lovecc' | 'loveyy'\n```\n\n- 如果模板本身也是联合类型，则会分别对模板的每一个类型和使用的类型进行处理\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype Gender = 1 | 2;\ntype TemplateType = `love${Name | Gender}`;\n/*\n则TemplateType为 lovecc | loveyy | love1 | love2\n*/\n```\n\n- 如果有多个模板，则是将每个模板的情况和其它模板的情况进行组合\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype Gender = 1 | 2;\ntype Age = 18 | 20;\ntype TemplateType = `${Age}love${Name | Gender}`;\n/*\n则TemplateType为\n18lovecc | 18loveyy | 18love1 | 18love2\n | 20lovecc | 20loveyy | 20love1 | 20love2\n*/\n```\n\n- 用在函数签名中，才能体会到模版字面量类型有多强大\n\n```typescript\ntype PropEventSource<Type> = {\n  // 调用签名，通过模板字面量类型指定了第一个参数的类型\n  on(\n    eventName: `${string & keyof Type}Changed`,\n    callback: (newValue: any) => void\n  ): void;\n};\n```\n\n- 模板字面量类型的推论\n\n把`on( )`设计为泛型函数，使`TS`自己进行类型推论。不说了，都是泪。直接上官方示例代码吧。一层一层的泛型，不思考的话实在不容易看懂。\n\n```typescript\ntype PropEventSource<Type> = {\n  on<Key extends string & keyof Type>(\n    eventName: `${Key}Changed`,\n    callback: (newValue: Type[Key]) => void\n  ): void;\n};\n```\n\n## 七、内置的字符串操纵类型\n\n### 1. `Uppercase <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为大写**的新类型。不改变原来的类型。如果是`string`类型而不是字面量类型，则生成的类型依然是`string`，不要求其值的首字母大写（一下几个内置方法都是如此）。\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype UpperName = Uppercase<Name>; // 'CC' | 'YY'\n```\n\n### 2. `Lowercase <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为小写**的新类型。不改变原来的类型。\n\n```typescript\ntype Name = \"CC\" | \"YY\";\ntype UpperName = Uppercase<Name>; // 'cc' | 'yy'\n```\n\n### 3. `Capitalize <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为大写**的新类型。不改变原来的类型。\n\n```typescript\ntype Name = \"cc\" | \"yy\";\ntype UpperName = Uppercase<Name>; // 'Cc' | 'Yy'\n```\n\n### 4. `Uncapitalize <StringType>`\n\n产生一个**将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为小写**的新类型。不改变原来的类型。\n\n```typescript\ntype Name = \"CC\" | \"YY\";\ntype UpperName = Uppercase<Name>; // 'cC' | 'yY'\n```\n\n好了，本篇就到此为止了，各种类型已经把我玩出花来了。下一篇，我们将一起学习 **`class`** ，不见不散！\n","slug":"TypeScript-系列-基础篇-TypeScript系列-基础篇-四-类型操纵","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cla5g9yop0006wgoi292dei8b","content":"<h1 id=\"TypeScript-系列基础篇-四-类型操纵\"><a href=\"#TypeScript-系列基础篇-四-类型操纵\" class=\"headerlink\" title=\"TypeScript 系列基础篇(四) 类型操纵\"></a>TypeScript 系列基础篇(四) 类型操纵</h1><p>定义一个类型，我们通常使用<strong><code>interface</code></strong>和 <strong><code>type</code></strong>关键字来进行规定，有时候也会直接使用字面量类型，这些过程足以应付大部分场景。但是有些时候，我们希望掌握<strong>从已经存在的值或者类型中提取或派生出新的类型</strong>的技巧，这就是我们今天要来了解的<strong><code>Type Manipulation</code> 类型操纵</strong>。相信我，掌握这些技巧后，你也能被各种类型玩出百般花样。</p>\n<h2 id=\"一、使用-keyof-操作符\"><a href=\"#一、使用-keyof-操作符\" class=\"headerlink\" title=\"一、使用 keyof 操作符\"></a>一、使用 <strong><em><code>keyof</code></em></strong> 操作符</h2><p>使用 <strong><code>keyof</code></strong> 操作符，可以获取一个 <strong>对象类型</strong> 的属性名 (字符串或者数值)，并将其组合成一个联合类型。注意得到的是一个类型，因此<strong>应使用<code>type</code>关键字</strong>，而不能使用<code>var</code>, <code>let</code>, <code>const</code>等声明值变量的关键字。</p>\n<ul>\n<li>一般情况下，<code>keyof</code>操作会得到字面量联合类型；</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person类型有三个属性，属性名分别为&quot;name&quot;,&quot;age&quot;,100</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对Person类型使用keyof操作符，可以将其属性名组合成一个字面量联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = keyof <span class=\"title class_\">Person</span>; <span class=\"comment\">// NewType为 &quot;name&quot; | &quot;age&quot; | 100</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>如果被操作的对象类型有着<code>string</code>类型或者<code>number</code>类型的<strong>索引签名</strong>，那么<code>keyof</code>操作会得到<code>string</code>或者<code>number</code>类型，而不是字面量类型。</p>\n<ul>\n<li><code>number</code>类型的索引签名，<code>keyof</code>会得到 <code>number</code> 类型；</li>\n<li><code>string</code>类型的索引签名，<code>keyof</code>会得到 <code>string | number</code> 类型；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 索引签名规定索引必须为number类型，属性值是string类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Type1为number类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type1</span> = keyof <span class=\"title class_\">Person</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 但是如果是string类型的索引签名</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Type2为 string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type2</span> = keyof <span class=\"title class_\">People</span>;</span><br></pre></td></tr></table></figure>\n<p>由于<code>JavaScript</code>中对象的 <code>key</code> 会被强制转换成 <code>string</code> 类型。因此，我们即使用数值型的<code>key</code>，最后也等同于转化之后的字符串 <code>key</code> ，<strong>即 <code>obj[0]</code> 和 <code>obj[&quot;0&quot;]</code> 完全一样</strong>。因此，<strong><code>string</code>类型的索引签名，对象实例可以由 <code>number</code> 类型的<code>key</code>，因为会被强制转化为<code>string</code>。所以<code>keyof</code>操作得到的是 <code>string | number</code>类型</strong>。</p>\n<h2 id=\"二、使用-typeof-操作符\"><a href=\"#二、使用-typeof-操作符\" class=\"headerlink\" title=\"二、使用 typeof 操作符\"></a>二、使用 <em><code>typeof</code></em> 操作符</h2><p>在<code>JavaScript</code>中，<strong><code>typeof</code></strong>操作符常用于基本数据类型的判断。而<code>TS</code>在类型上下文中也加入了 <strong><code>typeof</code></strong> 操作符，用于获取一个变量或属性的类型。不同于我们平常的用法，当<code>typeof</code>出现在类型上下文中时，得到的类型也可以是一个对象类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> T = <span class=\"keyword\">typeof</span> a; <span class=\"comment\">// T为number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> K = <span class=\"keyword\">typeof</span> obj.<span class=\"property\">name</span>; <span class=\"comment\">// K为string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> U = <span class=\"keyword\">typeof</span> obj; <span class=\"comment\">// U为 &#123;name: string, age: number&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>typeof</code></strong>用在这些简单类型的值上，不得不说有点累赘。但是对于复杂类型的值，用<code>typeof</code>就可以很方便地表达多种类型。例如，可以用<code>TS</code>提供的泛型类型<strong><code>ReturnType</code></strong>来获取一个<strong>函数类型</strong>的<strong>返回值的类型</strong>(指定<code>ReturnType</code>的类型参数为某个函数类型，得到该函数类型的返回值的类型)。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型函数类型表达式，设置泛型类型参数默认值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn</span>&lt;T = <span class=\"built_in\">number</span>&gt; = <span class=\"function\">(<span class=\"params\">x: T</span>) =&gt;</span> T;</span><br><span class=\"line\"><span class=\"comment\">// 不指定类型参数，则泛型T为number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type1</span> = <span class=\"title class_\">ReturnType</span>&lt;<span class=\"title class_\">Fn</span>&gt;; <span class=\"comment\">// Type1为number</span></span><br><span class=\"line\"><span class=\"comment\">// 指定泛型类型参数T为string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type2</span> = <span class=\"title class_\">ReturnType</span>&lt;<span class=\"title class_\">Fn</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;; <span class=\"comment\">// Type2为string</span></span><br></pre></td></tr></table></figure>\n<p>注意 <strong><code>ReturnType</code></strong> 接收的泛型类型参数应该是一个类型，而不是一个值。在类型上下文中可以使用<code>typeof</code>关键字将通过<strong>表示值的变量或属性</strong>来表达一个类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fn是&quot;值&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 错误，ReturnType的泛型类型参数应该是一个类型，而不是一个值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type1</span> = <span class=\"title class_\">ReturnType</span>&lt;fn&gt;;</span><br><span class=\"line\"><span class=\"comment\">// 使用typeof 关键字表达fn的类型, ok</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type2</span> = returnType&lt;<span class=\"keyword\">typeof</span> fn&gt;; <span class=\"comment\">// Type2为number</span></span><br></pre></td></tr></table></figure>\n<p>注意，<strong><code>typeof</code>关键字在类型上下文中，永远只能用于变量名和属性名后面</strong>。在平常用于判断类型时，则不受此限制。<strong>类型上下文</strong>：接收一个类型作为参数或者声明、表达、生成一个类型的上下文，如<code>interface</code>、<code>type</code>等关键字以及泛型参数的上下文。</p>\n<h2 id=\"三、索引访问类型\"><a href=\"#三、索引访问类型\" class=\"headerlink\" title=\"三、索引访问类型\"></a>三、索引访问类型</h2><p>在<strong>对象实例</strong>中，我们可以通过索引来访问某个属性值。同样的，在<strong>对象类型</strong>中，我们也可以通过索引访问某个属性的类型，此时的索引应该是一个类型，而不是一个值，用方括号的形式接收该索引。索引可以是联合类型、字面量类型、类型别名、乃至<code>keyof</code>操作符表达的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过方括号索引获得某个属性的类型，索引为字面量类型&quot;name&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"title class_\">Person</span>[<span class=\"string\">&quot;name&quot;</span>]; <span class=\"comment\">// name</span></span><br><span class=\"line\"><span class=\"comment\">// 错误，不可以用 . 的方式访问</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Age</span> = <span class=\"title class_\">Person</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引为字面量联合类型 &quot;name&quot; | &quot;age&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrAge1</span> = <span class=\"title class_\">Person</span>[<span class=\"string\">&quot;name&quot;</span> | <span class=\"string\">&quot;age&quot;</span>]; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引为类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> M = <span class=\"string\">&quot;name&quot;</span> | <span class=\"string\">&quot;age&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrAge2</span> = <span class=\"title class_\">Person</span>[M]; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引为用keyof表达的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrAge3</span> = <span class=\"title class_\">Person</span>[keyof <span class=\"title class_\">Person</span>]; <span class=\"comment\">// string | number</span></span><br></pre></td></tr></table></figure>\n<p>无法访问对象类型中没有的属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 错误，Person类型中没有gender属性/方法</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T = <span class=\"title class_\">Person</span>[<span class=\"string\">&quot;gender&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p>前面说到，接收的索引应该是一个类型。所以，当我们的对象类型具有索引签名时，则也可以接收<strong><code>string</code></strong>、<strong><code>number</code></strong>。另外，在数组类型中，也可以用<code>number</code>作为索引来访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用number作为索引</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">Person</span>[<span class=\"built_in\">number</span>]; <span class=\"comment\">// string[]</span></span><br><span class=\"line\"><span class=\"comment\">// 使用string作为索引</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"title class_\">Person</span>[<span class=\"built_in\">string</span>]; <span class=\"comment\">// string[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;cc&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">type</span> C = <span class=\"keyword\">typeof</span> arr[<span class=\"built_in\">number</span>]; <span class=\"comment\">// number | string</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"四、条件类型\"><a href=\"#四、条件类型\" class=\"headerlink\" title=\"四、条件类型\"></a>四、条件类型</h2><p>类似我们常用的三元表达式，<strong>条件类型表达式</strong>：<strong><em><code>Type1 extends Type2 ? TrueType : FalseType</code></em></strong>；当<code>Type2</code>是<code>Type1</code>的子类型时，表达式得到<code>TrueType</code>，否则得到<code>FalseType</code>。这看起来好像没啥用，然而，</p>\n<ul>\n<li><strong>条件类型表达式的强劲之处在于用于泛型</strong>。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> &#123; <span class=\"attr\">info</span>: <span class=\"built_in\">unknown</span> &#125; ? T[<span class=\"string\">&quot;info&quot;</span>] : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">MyType</span>&lt;&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">info</span>: <span class=\"built_in\">number</span> &#125;&gt;; <span class=\"comment\">// a为number类型的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">MyType</span>&lt;<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;; <span class=\"comment\">// b为never类型的值</span></span><br></pre></td></tr></table></figure>\n<p>对条件类型的泛型类型参数使用<code>extends</code>关键字可以约束其类型：</p>\n<ul>\n<li><strong>在条件类型中进行推论</strong></li>\n</ul>\n<p>在条件类型表达式的中使用 <strong><em><code>infer</code></em></strong>关键字推论泛型类型参数或函数类型的返回值的类型，并用一个形式类型指代，这个形式类型可用于条件类型表达式中指代推论得出的实际类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在条件类型表达式的Array泛型中使用infer关键字，</span></span><br><span class=\"line\"><span class=\"comment\">// 推论Array成员的类型为Item类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">Type</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Array</span>&lt;infer <span class=\"title class_\">Item</span>&gt; ? <span class=\"title class_\">Item</span> : <span class=\"title class_\">Type</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">MyType</span>&lt;<span class=\"built_in\">string</span>[]&gt;; <span class=\"comment\">// a为string类型的变量</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>分布式条件类型</strong></li>\n</ul>\n<p>当我们为泛型指定的类型参数为联合类型时，条件类型的作用会分布于联合类型的每一个单独的子类型上。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetArrType</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span> ? T[] : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// T[]的作用会分布到strig和number上，形成string[] | number[]</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StrOrNumArr</span> = <span class=\"title class_\">GetArrType</span>&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;; <span class=\"comment\">// string[] | number[]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、映射类型\"><a href=\"#五、映射类型\" class=\"headerlink\" title=\"五、映射类型\"></a>五、映射类型</h2><h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1. 基本使用\"></a>1. 基本使用</h3><p>映射类型是一种泛型，往往<strong>建立在索引签名之上</strong>，即以索引签名的形式，利用指定的泛型类型参数<code>T</code>的所有属性类型的联合(一般使用 <code>keyof</code> 关键字来遍历出<code>T</code>的所有属性类型)，作为新的对象类型的索引签名，并为其指定新的返回值类型。好吧，这太绕了。说白了，就是<strong>给对象类型 A 的所有属性/方法指定新的返回值的类型，从而得到一个新的对象类型</strong>。<strong>关键字 <code>in</code> 后面是一个与类型参数<code>T</code>有关的联合类型</strong>。还是有些绕？那就来看一个栗子吧：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OptionsFlags</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 索引签名的形式，这里的Property时类型参数，可以随便命名,T、K啥的都可以</span></span><br><span class=\"line\">  [<span class=\"title class_\">Property</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Type</span>]: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们尝试定义一个对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Person类型传递给OptionsFlag，得到新的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"title class_\">OptionsFlags</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NewType为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: boolean,</span></span><br><span class=\"line\"><span class=\"comment\">  age: boolean,</span></span><br><span class=\"line\"><span class=\"comment\">  gender: boolean</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>这下我们就能明白了，文字说再多都是虚的，还得是代码。通过映射类型的方式得到新的类型，新类型继承了所有原来的属性(包括方法)，并指定了新的返回值 (当然可以使用条件类型表达式)。</p>\n<h3 id=\"2-映射修饰符\"><a href=\"#2-映射修饰符\" class=\"headerlink\" title=\"2.映射修饰符\"></a>2.映射修饰符</h3><p>既然已经了解了映射类型的基本使用，现在来看看有哪些类型修饰符，它们又分别是用来做什么的。在上一篇文章<a href=\"https://juejin.cn/post/7070434381013188615\">今天来聊聊 TS 中的那些对象类型——TypeScript 系列：(三) 对象类型</a>中，我们了解了对象属性的属性修饰符 <code>?</code> 和 <code>readonly</code>，事实上，映射修饰符也是这两小只。</p>\n<ul>\n<li><p><strong><code>readonly</code> 修饰符</strong></p>\n<p>我们知道，通过映射类型，我们可以继承原有对象类型的所有属性，并它们指定新的返回值的类型。那么，我们如何为新的对象类型的属性添加为只读属性呢？或者如果原有的类型中存在只读属性，如何在新的类型中移除只读限制呢？很简单，在签名的<code>[ ]</code> 之前使用 <strong><code>+readonly</code></strong> 、<strong><code>-readonly</code></strong> 号即可，+ 号也可以省略。</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person类型中有只读</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个映射类型MapperA</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MapperA</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给Mapper传入Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleA</span> = <span class=\"title class_\">MapperA</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PersonA为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  age: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  readonly id: string[]</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 - 移除新类型id的readonly限制</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MapperB</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  -<span class=\"keyword\">readonly</span> [K <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleB</span> = <span class=\"title class_\">MapperB</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PeopleB为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  age: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  id: string[]</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 + 给新的对象类型的所有属性添加只读限制</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MapperC</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  +<span class=\"keyword\">readonly</span> [K <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleC</span> = <span class=\"title class_\">MapperC</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// + 号通常省略</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleCC</span> = <span class=\"title class_\">MapperC</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PeopleC、PeopleCC都为  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  readonly name: string[];</span></span><br><span class=\"line\"><span class=\"comment\">  readonly age: string[];</span></span><br><span class=\"line\"><span class=\"comment\">  readonly id: string[];</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><code>?</code> 可选修饰符</strong></li>\n</ul>\n<p>同样，在映射类型产生新类型时，可选修饰符也会保留。我们可以<strong>在签名的 <code>[ ]</code> 后用 <code>-?</code>来移除可选性</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]-?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-key的重映射\"><a href=\"#3-key的重映射\" class=\"headerlink\" title=\"3. key的重映射\"></a>3. <code>key</code>的重映射</h3><p><strong>使用 <code>as</code> 可以在新的对象类型中对原有的 <code>key</code> 进行重映射</strong>。直接<code>show code</code>吧，来一道官方栗子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Getters</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这句代码可以分为三个部分</span></span><br><span class=\"line\">  [<span class=\"title class_\">Property</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Type</span> <span class=\"keyword\">as</span> <span class=\"string\">`get<span class=\"subst\">$&#123;Capitalize&lt;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    <span class=\"built_in\">string</span> &amp; Property</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">  &gt;&#125;</span>`</span>]: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Type</span>[<span class=\"title class_\">Property</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetPerson</span> = <span class=\"title class_\">Getters</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">GetPerson为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  getName: () =&gt; string;</span></span><br><span class=\"line\"><span class=\"comment\">  getAge: () =&gt; number;</span></span><br><span class=\"line\"><span class=\"comment\">  getGender: () =&gt; 1 | 2;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>在上面的栗子中，我们把那句代码分为三个部分, “<code>as</code>“ 之前的<code>A</code>部分, “<code>as</code>“ ~ “<code>:</code>“ 之间的<code>B</code>部分，”<code>:</code>“之后的<code>C</code>部分。<code>A</code> 和 <code>C</code>两部分结合起来，就是我们之前了解到的映射类型。所以，难点在于理解 <code>B</code> 部分的内容。这里涉及到了<strong>模板字面量类型</strong>，类似与模板字符串，(下一节有详细介绍)。<strong><code>Capitalize</code></strong>是<code>TS</code>提供的首字母大写的泛型类型。类型参数<code>Property</code>指代<code>keyof</code>每一次遍历到的类型<code>Type</code>的<code>key</code>，使用 <code>as</code> 将 新的对象类型中对应的 <code>key</code> 重命名为 模板字面量类型 <code>get + Property</code>类型(即原来的对象类型的对应的<code>key</code>)中属于<code>string</code>类型的<code>key</code> (即排除<code>number</code>索引) 首字母大写的 。</p>\n<p>还可以利用<code>TS</code>提供<strong><code>Exclude&lt;P, B&gt;</code>的泛型类型</strong>来排除 B 类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新类型中移除了&quot;kind&quot;属性</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">RemoveKindField</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  [<span class=\"title class_\">Property</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Type</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Exclude</span>&lt;<span class=\"title class_\">Property</span>, <span class=\"string\">&quot;kind&quot;</span>&gt;]: <span class=\"title class_\">Type</span>[<span class=\"title class_\">Property</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>还记得一开始我们说的<strong>关键字 <code>in</code> 后面是一个与类型参数<code>T</code>有关的联合类型</strong>吗？事实上，这个联合类型不是仅仅只能用简单类型的联合，而可以是一切类型的联合，只需要通过 <code>as</code> 来把 <code>key</code> 重新映射为<code>string</code>或<code>number</code>或两者的字面量类型即可。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EventConfig</span>&lt;<span class=\"title class_\">Events</span> <span class=\"keyword\">extends</span> &#123; <span class=\"attr\">kind</span>: <span class=\"built_in\">string</span> &#125;&gt; = &#123;</span><br><span class=\"line\">  [E <span class=\"keyword\">in</span> <span class=\"title class_\">Events</span> <span class=\"keyword\">as</span> E[<span class=\"string\">&quot;kind&quot;</span>]]: <span class=\"function\">(<span class=\"params\">event: E</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面是一个官网的栗子。<code>Events</code>是一个具<code>kind</code>属性的对象类型的联合类型，<code>E</code>代表这个联合类型中的每一个具有<code>kind</code>属性的对象类型，也是新对象的<code>key</code>，通过<code>as</code> 关键字将 <code>E</code> 重映射为索引访问类型 <code>E[&quot;kind&quot;]</code>，也就是<code>string</code>类型。因此，最后得到的是一个 <code>key</code> 为<code>string</code>类型的方法签名(函数的调用签名)。</p>\n<p>(不得不说，各种类型操纵方法结合起来，是真能玩出花来。虽然明白比尔写的是啥，但我这脑瓜子实在是设计不出来这么优雅的类型。)</p>\n<h2 id=\"六、模板字面量类型\"><a href=\"#六、模板字面量类型\" class=\"headerlink\" title=\"六、模板字面量类型\"></a>六、模板字面量类型</h2><p>这是本文要分享的最后一种类型操纵方式了，毕竟没把泛型加进来讲，因为我之前的文章里介绍过了。</p>\n<ul>\n<li>利用字符串模板的形式，可以得到模板字面量类型。注意类型是用<code>type</code>来定义。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// 类型，不是值，不要使用let、var、const等</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`I am <span class=\"subst\">$&#123;Name&#125;</span>`</span>; <span class=\"comment\">// &#x27;I am cc&#x27;类型，不是值</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果模板用的类型是联合类型，则会分别对联合类型的每一个类型进行处理</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`love<span class=\"subst\">$&#123;Name&#125;</span>`</span>; <span class=\"comment\">// &#x27;lovecc&#x27; | &#x27;loveyy&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果模板本身也是联合类型，则会分别对模板的每一个类型和使用的类型进行处理</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Gender</span> = <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`love<span class=\"subst\">$&#123;Name | Gender&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">则TemplateType为 lovecc | loveyy | love1 | love2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果有多个模板，则是将每个模板的情况和其它模板的情况进行组合</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Gender</span> = <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Age</span> = <span class=\"number\">18</span> | <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`<span class=\"subst\">$&#123;Age&#125;</span>love<span class=\"subst\">$&#123;Name | Gender&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">则TemplateType为</span></span><br><span class=\"line\"><span class=\"comment\">18lovecc | 18loveyy | 18love1 | 18love2</span></span><br><span class=\"line\"><span class=\"comment\"> | 20lovecc | 20loveyy | 20love1 | 20love2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用在函数签名中，才能体会到模版字面量类型有多强大</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PropEventSource</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用签名，通过模板字面量类型指定了第一个参数的类型</span></span><br><span class=\"line\">  <span class=\"title function_\">on</span>(</span><br><span class=\"line\">    <span class=\"attr\">eventName</span>: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">string</span> &amp; keyof Type&#125;</span>Changed`</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">newValue: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">  ): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模板字面量类型的推论</li>\n</ul>\n<p>把<code>on( )</code>设计为泛型函数，使<code>TS</code>自己进行类型推论。不说了，都是泪。直接上官方示例代码吧。一层一层的泛型，不思考的话实在不容易看懂。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PropEventSource</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  on&lt;<span class=\"title class_\">Key</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span> &amp; keyof <span class=\"title class_\">Type</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">eventName</span>: <span class=\"string\">`<span class=\"subst\">$&#123;Key&#125;</span>Changed`</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">newValue: Type[Key]</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">  ): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、内置的字符串操纵类型\"><a href=\"#七、内置的字符串操纵类型\" class=\"headerlink\" title=\"七、内置的字符串操纵类型\"></a>七、内置的字符串操纵类型</h2><h3 id=\"1-Uppercase-lt-StringType-gt\"><a href=\"#1-Uppercase-lt-StringType-gt\" class=\"headerlink\" title=\"1. Uppercase &lt;StringType&gt;\"></a>1. <code>Uppercase &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为大写</strong>的新类型。不改变原来的类型。如果是<code>string</code>类型而不是字面量类型，则生成的类型依然是<code>string</code>，不要求其值的首字母大写（一下几个内置方法都是如此）。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;CC&#x27; | &#x27;YY&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Lowercase-lt-StringType-gt\"><a href=\"#2-Lowercase-lt-StringType-gt\" class=\"headerlink\" title=\"2. Lowercase &lt;StringType&gt;\"></a>2. <code>Lowercase &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为小写</strong>的新类型。不改变原来的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;CC&quot;</span> | <span class=\"string\">&quot;YY&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;cc&#x27; | &#x27;yy&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Capitalize-lt-StringType-gt\"><a href=\"#3-Capitalize-lt-StringType-gt\" class=\"headerlink\" title=\"3. Capitalize &lt;StringType&gt;\"></a>3. <code>Capitalize &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为大写</strong>的新类型。不改变原来的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;Cc&#x27; | &#x27;Yy&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Uncapitalize-lt-StringType-gt\"><a href=\"#4-Uncapitalize-lt-StringType-gt\" class=\"headerlink\" title=\"4. Uncapitalize &lt;StringType&gt;\"></a>4. <code>Uncapitalize &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为小写</strong>的新类型。不改变原来的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;CC&quot;</span> | <span class=\"string\">&quot;YY&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;cC&#x27; | &#x27;yY&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>好了，本篇就到此为止了，各种类型已经把我玩出花来了。下一篇，我们将一起学习 <strong><code>class</code></strong> ，不见不散！</p>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"TypeScript-系列基础篇-四-类型操纵\"><a href=\"#TypeScript-系列基础篇-四-类型操纵\" class=\"headerlink\" title=\"TypeScript 系列基础篇(四) 类型操纵\"></a>TypeScript 系列基础篇(四) 类型操纵</h1><p>定义一个类型，我们通常使用<strong><code>interface</code></strong>和 <strong><code>type</code></strong>关键字来进行规定，有时候也会直接使用字面量类型，这些过程足以应付大部分场景。但是有些时候，我们希望掌握<strong>从已经存在的值或者类型中提取或派生出新的类型</strong>的技巧，这就是我们今天要来了解的<strong><code>Type Manipulation</code> 类型操纵</strong>。相信我，掌握这些技巧后，你也能被各种类型玩出百般花样。</p>\n<h2 id=\"一、使用-keyof-操作符\"><a href=\"#一、使用-keyof-操作符\" class=\"headerlink\" title=\"一、使用 keyof 操作符\"></a>一、使用 <strong><em><code>keyof</code></em></strong> 操作符</h2><p>使用 <strong><code>keyof</code></strong> 操作符，可以获取一个 <strong>对象类型</strong> 的属性名 (字符串或者数值)，并将其组合成一个联合类型。注意得到的是一个类型，因此<strong>应使用<code>type</code>关键字</strong>，而不能使用<code>var</code>, <code>let</code>, <code>const</code>等声明值变量的关键字。</p>\n<ul>\n<li>一般情况下，<code>keyof</code>操作会得到字面量联合类型；</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person类型有三个属性，属性名分别为&quot;name&quot;,&quot;age&quot;,100</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 对Person类型使用keyof操作符，可以将其属性名组合成一个字面量联合类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = keyof <span class=\"title class_\">Person</span>; <span class=\"comment\">// NewType为 &quot;name&quot; | &quot;age&quot; | 100</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>如果被操作的对象类型有着<code>string</code>类型或者<code>number</code>类型的<strong>索引签名</strong>，那么<code>keyof</code>操作会得到<code>string</code>或者<code>number</code>类型，而不是字面量类型。</p>\n<ul>\n<li><code>number</code>类型的索引签名，<code>keyof</code>会得到 <code>number</code> 类型；</li>\n<li><code>string</code>类型的索引签名，<code>keyof</code>会得到 <code>string | number</code> 类型；</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 索引签名规定索引必须为number类型，属性值是string类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Type1为number类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type1</span> = keyof <span class=\"title class_\">Person</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 但是如果是string类型的索引签名</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">People</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Type2为 string | number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type2</span> = keyof <span class=\"title class_\">People</span>;</span><br></pre></td></tr></table></figure>\n<p>由于<code>JavaScript</code>中对象的 <code>key</code> 会被强制转换成 <code>string</code> 类型。因此，我们即使用数值型的<code>key</code>，最后也等同于转化之后的字符串 <code>key</code> ，<strong>即 <code>obj[0]</code> 和 <code>obj[&quot;0&quot;]</code> 完全一样</strong>。因此，<strong><code>string</code>类型的索引签名，对象实例可以由 <code>number</code> 类型的<code>key</code>，因为会被强制转化为<code>string</code>。所以<code>keyof</code>操作得到的是 <code>string | number</code>类型</strong>。</p>\n<h2 id=\"二、使用-typeof-操作符\"><a href=\"#二、使用-typeof-操作符\" class=\"headerlink\" title=\"二、使用 typeof 操作符\"></a>二、使用 <em><code>typeof</code></em> 操作符</h2><p>在<code>JavaScript</code>中，<strong><code>typeof</code></strong>操作符常用于基本数据类型的判断。而<code>TS</code>在类型上下文中也加入了 <strong><code>typeof</code></strong> 操作符，用于获取一个变量或属性的类型。不同于我们平常的用法，当<code>typeof</code>出现在类型上下文中时，得到的类型也可以是一个对象类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> T = <span class=\"keyword\">typeof</span> a; <span class=\"comment\">// T为number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> K = <span class=\"keyword\">typeof</span> obj.<span class=\"property\">name</span>; <span class=\"comment\">// K为string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> U = <span class=\"keyword\">typeof</span> obj; <span class=\"comment\">// U为 &#123;name: string, age: number&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong><code>typeof</code></strong>用在这些简单类型的值上，不得不说有点累赘。但是对于复杂类型的值，用<code>typeof</code>就可以很方便地表达多种类型。例如，可以用<code>TS</code>提供的泛型类型<strong><code>ReturnType</code></strong>来获取一个<strong>函数类型</strong>的<strong>返回值的类型</strong>(指定<code>ReturnType</code>的类型参数为某个函数类型，得到该函数类型的返回值的类型)。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 泛型函数类型表达式，设置泛型类型参数默认值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn</span>&lt;T = <span class=\"built_in\">number</span>&gt; = <span class=\"function\">(<span class=\"params\">x: T</span>) =&gt;</span> T;</span><br><span class=\"line\"><span class=\"comment\">// 不指定类型参数，则泛型T为number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type1</span> = <span class=\"title class_\">ReturnType</span>&lt;<span class=\"title class_\">Fn</span>&gt;; <span class=\"comment\">// Type1为number</span></span><br><span class=\"line\"><span class=\"comment\">// 指定泛型类型参数T为string</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type2</span> = <span class=\"title class_\">ReturnType</span>&lt;<span class=\"title class_\">Fn</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;; <span class=\"comment\">// Type2为string</span></span><br></pre></td></tr></table></figure>\n<p>注意 <strong><code>ReturnType</code></strong> 接收的泛型类型参数应该是一个类型，而不是一个值。在类型上下文中可以使用<code>typeof</code>关键字将通过<strong>表示值的变量或属性</strong>来表达一个类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fn是&quot;值&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">a: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 错误，ReturnType的泛型类型参数应该是一个类型，而不是一个值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type1</span> = <span class=\"title class_\">ReturnType</span>&lt;fn&gt;;</span><br><span class=\"line\"><span class=\"comment\">// 使用typeof 关键字表达fn的类型, ok</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Type2</span> = returnType&lt;<span class=\"keyword\">typeof</span> fn&gt;; <span class=\"comment\">// Type2为number</span></span><br></pre></td></tr></table></figure>\n<p>注意，<strong><code>typeof</code>关键字在类型上下文中，永远只能用于变量名和属性名后面</strong>。在平常用于判断类型时，则不受此限制。<strong>类型上下文</strong>：接收一个类型作为参数或者声明、表达、生成一个类型的上下文，如<code>interface</code>、<code>type</code>等关键字以及泛型参数的上下文。</p>\n<h2 id=\"三、索引访问类型\"><a href=\"#三、索引访问类型\" class=\"headerlink\" title=\"三、索引访问类型\"></a>三、索引访问类型</h2><p>在<strong>对象实例</strong>中，我们可以通过索引来访问某个属性值。同样的，在<strong>对象类型</strong>中，我们也可以通过索引访问某个属性的类型，此时的索引应该是一个类型，而不是一个值，用方括号的形式接收该索引。索引可以是联合类型、字面量类型、类型别名、乃至<code>keyof</code>操作符表达的类型</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过方括号索引获得某个属性的类型，索引为字面量类型&quot;name&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"title class_\">Person</span>[<span class=\"string\">&quot;name&quot;</span>]; <span class=\"comment\">// name</span></span><br><span class=\"line\"><span class=\"comment\">// 错误，不可以用 . 的方式访问</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Age</span> = <span class=\"title class_\">Person</span>.<span class=\"property\">age</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引为字面量联合类型 &quot;name&quot; | &quot;age&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrAge1</span> = <span class=\"title class_\">Person</span>[<span class=\"string\">&quot;name&quot;</span> | <span class=\"string\">&quot;age&quot;</span>]; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引为类型别名</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> M = <span class=\"string\">&quot;name&quot;</span> | <span class=\"string\">&quot;age&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrAge2</span> = <span class=\"title class_\">Person</span>[M]; <span class=\"comment\">// string | number</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 索引为用keyof表达的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NameOrAge3</span> = <span class=\"title class_\">Person</span>[keyof <span class=\"title class_\">Person</span>]; <span class=\"comment\">// string | number</span></span><br></pre></td></tr></table></figure>\n<p>无法访问对象类型中没有的属性。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 错误，Person类型中没有gender属性/方法</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> T = <span class=\"title class_\">Person</span>[<span class=\"string\">&quot;gender&quot;</span>];</span><br></pre></td></tr></table></figure>\n<p>前面说到，接收的索引应该是一个类型。所以，当我们的对象类型具有索引签名时，则也可以接收<strong><code>string</code></strong>、<strong><code>number</code></strong>。另外，在数组类型中，也可以用<code>number</code>作为索引来访问。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">number</span>]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">  [<span class=\"attr\">x</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用number作为索引</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> A = <span class=\"title class_\">Person</span>[<span class=\"built_in\">number</span>]; <span class=\"comment\">// string[]</span></span><br><span class=\"line\"><span class=\"comment\">// 使用string作为索引</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> B = <span class=\"title class_\">Person</span>[<span class=\"built_in\">string</span>]; <span class=\"comment\">// string[]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"string\">&quot;cc&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">type</span> C = <span class=\"keyword\">typeof</span> arr[<span class=\"built_in\">number</span>]; <span class=\"comment\">// number | string</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"四、条件类型\"><a href=\"#四、条件类型\" class=\"headerlink\" title=\"四、条件类型\"></a>四、条件类型</h2><p>类似我们常用的三元表达式，<strong>条件类型表达式</strong>：<strong><em><code>Type1 extends Type2 ? TrueType : FalseType</code></em></strong>；当<code>Type2</code>是<code>Type1</code>的子类型时，表达式得到<code>TrueType</code>，否则得到<code>FalseType</code>。这看起来好像没啥用，然而，</p>\n<ul>\n<li><strong>条件类型表达式的强劲之处在于用于泛型</strong>。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> &#123; <span class=\"attr\">info</span>: <span class=\"built_in\">unknown</span> &#125; ? T[<span class=\"string\">&quot;info&quot;</span>] : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">MyType</span>&lt;&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">info</span>: <span class=\"built_in\">number</span> &#125;&gt;; <span class=\"comment\">// a为number类型的值</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">MyType</span>&lt;<span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;&gt;; <span class=\"comment\">// b为never类型的值</span></span><br></pre></td></tr></table></figure>\n<p>对条件类型的泛型类型参数使用<code>extends</code>关键字可以约束其类型：</p>\n<ul>\n<li><strong>在条件类型中进行推论</strong></li>\n</ul>\n<p>在条件类型表达式的中使用 <strong><em><code>infer</code></em></strong>关键字推论泛型类型参数或函数类型的返回值的类型，并用一个形式类型指代，这个形式类型可用于条件类型表达式中指代推论得出的实际类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在条件类型表达式的Array泛型中使用infer关键字，</span></span><br><span class=\"line\"><span class=\"comment\">// 推论Array成员的类型为Item类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span>&lt;<span class=\"title class_\">Type</span>&gt; = <span class=\"title class_\">Type</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Array</span>&lt;infer <span class=\"title class_\">Item</span>&gt; ? <span class=\"title class_\">Item</span> : <span class=\"title class_\">Type</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">MyType</span>&lt;<span class=\"built_in\">string</span>[]&gt;; <span class=\"comment\">// a为string类型的变量</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>分布式条件类型</strong></li>\n</ul>\n<p>当我们为泛型指定的类型参数为联合类型时，条件类型的作用会分布于联合类型的每一个单独的子类型上。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetArrType</span>&lt;T&gt; = T <span class=\"keyword\">extends</span> <span class=\"built_in\">any</span> ? T[] : <span class=\"built_in\">never</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// T[]的作用会分布到strig和number上，形成string[] | number[]</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StrOrNumArr</span> = <span class=\"title class_\">GetArrType</span>&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;; <span class=\"comment\">// string[] | number[]</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、映射类型\"><a href=\"#五、映射类型\" class=\"headerlink\" title=\"五、映射类型\"></a>五、映射类型</h2><h3 id=\"1-基本使用\"><a href=\"#1-基本使用\" class=\"headerlink\" title=\"1. 基本使用\"></a>1. 基本使用</h3><p>映射类型是一种泛型，往往<strong>建立在索引签名之上</strong>，即以索引签名的形式，利用指定的泛型类型参数<code>T</code>的所有属性类型的联合(一般使用 <code>keyof</code> 关键字来遍历出<code>T</code>的所有属性类型)，作为新的对象类型的索引签名，并为其指定新的返回值类型。好吧，这太绕了。说白了，就是<strong>给对象类型 A 的所有属性/方法指定新的返回值的类型，从而得到一个新的对象类型</strong>。<strong>关键字 <code>in</code> 后面是一个与类型参数<code>T</code>有关的联合类型</strong>。还是有些绕？那就来看一个栗子吧：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">OptionsFlags</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 索引签名的形式，这里的Property时类型参数，可以随便命名,T、K啥的都可以</span></span><br><span class=\"line\">  [<span class=\"title class_\">Property</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Type</span>]: <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我们尝试定义一个对象类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将Person类型传递给OptionsFlag，得到新的类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span> = <span class=\"title class_\">OptionsFlags</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">NewType为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: boolean,</span></span><br><span class=\"line\"><span class=\"comment\">  age: boolean,</span></span><br><span class=\"line\"><span class=\"comment\">  gender: boolean</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>这下我们就能明白了，文字说再多都是虚的，还得是代码。通过映射类型的方式得到新的类型，新类型继承了所有原来的属性(包括方法)，并指定了新的返回值 (当然可以使用条件类型表达式)。</p>\n<h3 id=\"2-映射修饰符\"><a href=\"#2-映射修饰符\" class=\"headerlink\" title=\"2.映射修饰符\"></a>2.映射修饰符</h3><p>既然已经了解了映射类型的基本使用，现在来看看有哪些类型修饰符，它们又分别是用来做什么的。在上一篇文章<a href=\"https://juejin.cn/post/7070434381013188615\">今天来聊聊 TS 中的那些对象类型——TypeScript 系列：(三) 对象类型</a>中，我们了解了对象属性的属性修饰符 <code>?</code> 和 <code>readonly</code>，事实上，映射修饰符也是这两小只。</p>\n<ul>\n<li><p><strong><code>readonly</code> 修饰符</strong></p>\n<p>我们知道，通过映射类型，我们可以继承原有对象类型的所有属性，并它们指定新的返回值的类型。那么，我们如何为新的对象类型的属性添加为只读属性呢？或者如果原有的类型中存在只读属性，如何在新的类型中移除只读限制呢？很简单，在签名的<code>[ ]</code> 之前使用 <strong><code>+readonly</code></strong> 、<strong><code>-readonly</code></strong> 号即可，+ 号也可以省略。</p>\n</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person类型中有只读</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"keyword\">readonly</span> <span class=\"attr\">id</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个映射类型MapperA</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MapperA</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给Mapper传入Person类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleA</span> = <span class=\"title class_\">MapperA</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PersonA为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  age: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  readonly id: string[]</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 - 移除新类型id的readonly限制</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MapperB</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  -<span class=\"keyword\">readonly</span> [K <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleB</span> = <span class=\"title class_\">MapperB</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PeopleB为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  age: string[],</span></span><br><span class=\"line\"><span class=\"comment\">  id: string[]</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 + 给新的对象类型的所有属性添加只读限制</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MapperC</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  +<span class=\"keyword\">readonly</span> [K <span class=\"keyword\">in</span> keyof T]: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleC</span> = <span class=\"title class_\">MapperC</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// + 号通常省略</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PeopleCC</span> = <span class=\"title class_\">MapperC</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">PeopleC、PeopleCC都为  &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  readonly name: string[];</span></span><br><span class=\"line\"><span class=\"comment\">  readonly age: string[];</span></span><br><span class=\"line\"><span class=\"comment\">  readonly id: string[];</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong><code>?</code> 可选修饰符</strong></li>\n</ul>\n<p>同样，在映射类型产生新类型时，可选修饰符也会保留。我们可以<strong>在签名的 <code>[ ]</code> 后用 <code>-?</code>来移除可选性</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NewType</span>&lt;T&gt; = &#123;</span><br><span class=\"line\">  [P <span class=\"keyword\">in</span> keyof T]-?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-key的重映射\"><a href=\"#3-key的重映射\" class=\"headerlink\" title=\"3. key的重映射\"></a>3. <code>key</code>的重映射</h3><p><strong>使用 <code>as</code> 可以在新的对象类型中对原有的 <code>key</code> 进行重映射</strong>。直接<code>show code</code>吧，来一道官方栗子：</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Getters</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 这句代码可以分为三个部分</span></span><br><span class=\"line\">  [<span class=\"title class_\">Property</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Type</span> <span class=\"keyword\">as</span> <span class=\"string\">`get<span class=\"subst\">$&#123;Capitalize&lt;</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">    <span class=\"built_in\">string</span> &amp; Property</span></span></span><br><span class=\"line\"><span class=\"subst\"><span class=\"string\">  &gt;&#125;</span>`</span>]: <span class=\"function\">() =&gt;</span> <span class=\"title class_\">Type</span>[<span class=\"title class_\">Property</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"number\">100</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">GetPerson</span> = <span class=\"title class_\">Getters</span>&lt;<span class=\"title class_\">Person</span>&gt;;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">GetPerson为 &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  getName: () =&gt; string;</span></span><br><span class=\"line\"><span class=\"comment\">  getAge: () =&gt; number;</span></span><br><span class=\"line\"><span class=\"comment\">  getGender: () =&gt; 1 | 2;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>在上面的栗子中，我们把那句代码分为三个部分, “<code>as</code>“ 之前的<code>A</code>部分, “<code>as</code>“ ~ “<code>:</code>“ 之间的<code>B</code>部分，”<code>:</code>“之后的<code>C</code>部分。<code>A</code> 和 <code>C</code>两部分结合起来，就是我们之前了解到的映射类型。所以，难点在于理解 <code>B</code> 部分的内容。这里涉及到了<strong>模板字面量类型</strong>，类似与模板字符串，(下一节有详细介绍)。<strong><code>Capitalize</code></strong>是<code>TS</code>提供的首字母大写的泛型类型。类型参数<code>Property</code>指代<code>keyof</code>每一次遍历到的类型<code>Type</code>的<code>key</code>，使用 <code>as</code> 将 新的对象类型中对应的 <code>key</code> 重命名为 模板字面量类型 <code>get + Property</code>类型(即原来的对象类型的对应的<code>key</code>)中属于<code>string</code>类型的<code>key</code> (即排除<code>number</code>索引) 首字母大写的 。</p>\n<p>还可以利用<code>TS</code>提供<strong><code>Exclude&lt;P, B&gt;</code>的泛型类型</strong>来排除 B 类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新类型中移除了&quot;kind&quot;属性</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">RemoveKindField</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  [<span class=\"title class_\">Property</span> <span class=\"keyword\">in</span> keyof <span class=\"title class_\">Type</span> <span class=\"keyword\">as</span> <span class=\"title class_\">Exclude</span>&lt;<span class=\"title class_\">Property</span>, <span class=\"string\">&quot;kind&quot;</span>&gt;]: <span class=\"title class_\">Type</span>[<span class=\"title class_\">Property</span>];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>还记得一开始我们说的<strong>关键字 <code>in</code> 后面是一个与类型参数<code>T</code>有关的联合类型</strong>吗？事实上，这个联合类型不是仅仅只能用简单类型的联合，而可以是一切类型的联合，只需要通过 <code>as</code> 来把 <code>key</code> 重新映射为<code>string</code>或<code>number</code>或两者的字面量类型即可。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">EventConfig</span>&lt;<span class=\"title class_\">Events</span> <span class=\"keyword\">extends</span> &#123; <span class=\"attr\">kind</span>: <span class=\"built_in\">string</span> &#125;&gt; = &#123;</span><br><span class=\"line\">  [E <span class=\"keyword\">in</span> <span class=\"title class_\">Events</span> <span class=\"keyword\">as</span> E[<span class=\"string\">&quot;kind&quot;</span>]]: <span class=\"function\">(<span class=\"params\">event: E</span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>上面是一个官网的栗子。<code>Events</code>是一个具<code>kind</code>属性的对象类型的联合类型，<code>E</code>代表这个联合类型中的每一个具有<code>kind</code>属性的对象类型，也是新对象的<code>key</code>，通过<code>as</code> 关键字将 <code>E</code> 重映射为索引访问类型 <code>E[&quot;kind&quot;]</code>，也就是<code>string</code>类型。因此，最后得到的是一个 <code>key</code> 为<code>string</code>类型的方法签名(函数的调用签名)。</p>\n<p>(不得不说，各种类型操纵方法结合起来，是真能玩出花来。虽然明白比尔写的是啥，但我这脑瓜子实在是设计不出来这么优雅的类型。)</p>\n<h2 id=\"六、模板字面量类型\"><a href=\"#六、模板字面量类型\" class=\"headerlink\" title=\"六、模板字面量类型\"></a>六、模板字面量类型</h2><p>这是本文要分享的最后一种类型操纵方式了，毕竟没把泛型加进来讲，因为我之前的文章里介绍过了。</p>\n<ul>\n<li>利用字符串模板的形式，可以得到模板字面量类型。注意类型是用<code>type</code>来定义。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span>; <span class=\"comment\">// 类型，不是值，不要使用let、var、const等</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`I am <span class=\"subst\">$&#123;Name&#125;</span>`</span>; <span class=\"comment\">// &#x27;I am cc&#x27;类型，不是值</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果模板用的类型是联合类型，则会分别对联合类型的每一个类型进行处理</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`love<span class=\"subst\">$&#123;Name&#125;</span>`</span>; <span class=\"comment\">// &#x27;lovecc&#x27; | &#x27;loveyy&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果模板本身也是联合类型，则会分别对模板的每一个类型和使用的类型进行处理</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Gender</span> = <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`love<span class=\"subst\">$&#123;Name | Gender&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">则TemplateType为 lovecc | loveyy | love1 | love2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果有多个模板，则是将每个模板的情况和其它模板的情况进行组合</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Gender</span> = <span class=\"number\">1</span> | <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Age</span> = <span class=\"number\">18</span> | <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TemplateType</span> = <span class=\"string\">`<span class=\"subst\">$&#123;Age&#125;</span>love<span class=\"subst\">$&#123;Name | Gender&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">则TemplateType为</span></span><br><span class=\"line\"><span class=\"comment\">18lovecc | 18loveyy | 18love1 | 18love2</span></span><br><span class=\"line\"><span class=\"comment\"> | 20lovecc | 20loveyy | 20love1 | 20love2</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>用在函数签名中，才能体会到模版字面量类型有多强大</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PropEventSource</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 调用签名，通过模板字面量类型指定了第一个参数的类型</span></span><br><span class=\"line\">  <span class=\"title function_\">on</span>(</span><br><span class=\"line\">    <span class=\"attr\">eventName</span>: <span class=\"string\">`<span class=\"subst\">$&#123;<span class=\"built_in\">string</span> &amp; keyof Type&#125;</span>Changed`</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">newValue: <span class=\"built_in\">any</span></span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">  ): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>模板字面量类型的推论</li>\n</ul>\n<p>把<code>on( )</code>设计为泛型函数，使<code>TS</code>自己进行类型推论。不说了，都是泪。直接上官方示例代码吧。一层一层的泛型，不思考的话实在不容易看懂。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">PropEventSource</span>&lt;<span class=\"title class_\">Type</span>&gt; = &#123;</span><br><span class=\"line\">  on&lt;<span class=\"title class_\">Key</span> <span class=\"keyword\">extends</span> <span class=\"built_in\">string</span> &amp; keyof <span class=\"title class_\">Type</span>&gt;(</span><br><span class=\"line\">    <span class=\"attr\">eventName</span>: <span class=\"string\">`<span class=\"subst\">$&#123;Key&#125;</span>Changed`</span>,</span><br><span class=\"line\">    <span class=\"attr\">callback</span>: <span class=\"function\">(<span class=\"params\">newValue: Type[Key]</span>) =&gt;</span> <span class=\"built_in\">void</span></span><br><span class=\"line\">  ): <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"七、内置的字符串操纵类型\"><a href=\"#七、内置的字符串操纵类型\" class=\"headerlink\" title=\"七、内置的字符串操纵类型\"></a>七、内置的字符串操纵类型</h2><h3 id=\"1-Uppercase-lt-StringType-gt\"><a href=\"#1-Uppercase-lt-StringType-gt\" class=\"headerlink\" title=\"1. Uppercase &lt;StringType&gt;\"></a>1. <code>Uppercase &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为大写</strong>的新类型。不改变原来的类型。如果是<code>string</code>类型而不是字面量类型，则生成的类型依然是<code>string</code>，不要求其值的首字母大写（一下几个内置方法都是如此）。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;CC&#x27; | &#x27;YY&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Lowercase-lt-StringType-gt\"><a href=\"#2-Lowercase-lt-StringType-gt\" class=\"headerlink\" title=\"2. Lowercase &lt;StringType&gt;\"></a>2. <code>Lowercase &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）所有字母转化为小写</strong>的新类型。不改变原来的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;CC&quot;</span> | <span class=\"string\">&quot;YY&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;cc&#x27; | &#x27;yy&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-Capitalize-lt-StringType-gt\"><a href=\"#3-Capitalize-lt-StringType-gt\" class=\"headerlink\" title=\"3. Capitalize &lt;StringType&gt;\"></a>3. <code>Capitalize &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为大写</strong>的新类型。不改变原来的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;Cc&#x27; | &#x27;Yy&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Uncapitalize-lt-StringType-gt\"><a href=\"#4-Uncapitalize-lt-StringType-gt\" class=\"headerlink\" title=\"4. Uncapitalize &lt;StringType&gt;\"></a>4. <code>Uncapitalize &lt;StringType&gt;</code></h3><p>产生一个<strong>将泛型类型（必须是字符串类型、字符串型的字面量类型）首字母转化为小写</strong>的新类型。不改变原来的类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Name</span> = <span class=\"string\">&quot;CC&quot;</span> | <span class=\"string\">&quot;YY&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">UpperName</span> = <span class=\"title class_\">Uppercase</span>&lt;<span class=\"title class_\">Name</span>&gt;; <span class=\"comment\">// &#x27;cC&#x27; | &#x27;yY&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>好了，本篇就到此为止了，各种类型已经把我玩出花来了。下一篇，我们将一起学习 <strong><code>class</code></strong> ，不见不散！</p>\n"},{"layout":"post","title":"TS系列基础篇(一) TS类型指南","date":"2022-03-01T01:40:00.000Z","updated":"2022-03-01T01:40:00.000Z","keywords":["前端","TypeScript","TS","类型"],"archive":"TypeScript","swiper_index":10,"_content":"\n# TS 系列基础篇(一) TS 类型指南\n\n这段时间以来，TS 的发展可谓是如日中天，本想偷个懒去看看别人写的分享贴来学习，找了近十篇之后，发现要么是比较浅显，要么有些偏差，没有找到很满意的。于是决定去看[官方文档](https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html#consuming)。学习了一段时间后，准备写一个系列，从基础类型，对象，函数，模块等 TS 知识，到在`vue`、`react`中的应用，供有需要的同学们参考。其中，我套用了不少官方文档的示例，觉得我的学习经验不好或不正确的朋友，欢迎批评指正。\n\n`TS`是`JS`的超集。在学 TS 之前，最好有一定的`JS`基础。本篇只介绍`typescript`的安装和各种基础类型。需要了解其它内容的同学可以看其它篇章或查阅官方文档。\n\n[toc]\n\n## (一)、安装与编译\n\n想要使用`TS`，得先会安装。Typescript 需要`node`环境，确保你已经安装了`node`。如果还没有安装`node`，可以去[`Node.js`官网]([`Node.js`](https://nodejs.org/zh-cn/)下载，傻瓜式安装。\n\n打开项目目录进行初始化：\n\n```powershell\nnpm init -y\n```\n\n官方推荐了`npm`，`yarn`，`pnpm`三种工具，任选其一即可（`npm`工具为`node`自带的包管理工具，可自由使用；`yarn`或`pnpm`工具需要提前安装）。\n\n```powershell\n# with npm\nnpm install typescript --save-dev\n# with yarn\nyarn add typescript --dev\n# with pnpm\npnpm add typescript -D\n```\n\n在安装 ts 时，编译工具`tsc`也会被自动安装。待安装完成，在项目根目录下新建一个`app.ts`。\n\n```ts\n// app.ts\nconst str = \"app\";\nconsole.log(str.charAt(0));\n```\n\n即可通过以下任一方式运行`tsc`，编译成功后会在和`app.ts`同级目录下多出一个`app.js`文件。\n\n```powershell\n# 当前目录下的app.ts文件编译为app.js\n# npm\nnpx tsc app.ts\n# yarn\nyarn tsc app.ts\n# pnpm\npnpm tsc app.ts\n```\n\n`app.js`：\n\n```js\nconst str = \"app\";\nconsole.log(str.charAt(0));\n```\n\n这个`js`文件和`app.ts`看起来没有差别，这是因为我们没有在`app.ts`里没有进行类型约束。与类型的相关内容会在后面谈到。现在我们来让`app.ts`出一点“错误”，将`str`换成数组，编辑器会把错误代码用红色波浪线标出，如果此时在命令行运行`yarn tsc app.ts`，控制台便会报错。\n\n```ts\n// app.ts\nconst str = [\"a\", \"p\", \"p\"];\nconsole.log(str.charAt(0)); // charAt会被\n```\n\n尽管如此，报错了的代码依旧会被编译成`js`文件。我们可以在`tsc`命令后加上编译的相关配置指令来进行控制。比如，加上**`--noEmitOnError`**之后，一旦报错便不会生成`js`文件。\n\n```powershell\ntsc --noEmitOnError hello.ts\n```\n\n但是 ts 的编译配置项非常多，如果每次都通过在命令行加入指令来进行相关控制，无疑非常繁琐。因此我们可以在**`tsconfig.json`**里编写相关配置，这样我们执行`tsc`命令时，编译器会默认从当前目录逐步向上层目录查找并读取`tsconfig.json`里的配置项。\n\n## (二)、配置文件：`tsconfig.json`\n\n在运行`tsc`命令时，我们可以在后面添加指令来指定相关配置。但是我们会更倾向于在`tsconfig.json`里对相关指令进行配置，以减少重复、繁琐的操作。在`Vue`、`React`等框架搭建的项目里，一般都已生成初步配置好了的`tsconfig.json`文件。本篇只进行解基础内容的分享，有关配置的章节将在后续推出。\n\n## (三)、类型基础\n\n这里介绍部分 TS 基础类型，关于类型的进阶将在后续篇章中单独介绍。注意不要将基础类型和 js 基本数据类型混为一谈。基础类型可以理解为 ts 内置的各种类型，而非我们人为定义出的类型。TS 有多种基础类型，这些类型可以用来进行组合，从而得到我们需要的人为定义的类型。TS 在声明变量时，在变量名后加上冒号<mark>: </mark>和类型名来进行变量的类型注释。如果不添加类型注释，则 TS 会根据变量的初始值进行<mark>**类型推论**</mark>，自动推断出该变量属于什么类型。如果也没有初始值，则会被推断为**any**类型。\n\n### 1. 原有的基本数据类型\n\n- **`string`**：字符串类型，注意`String`在`js`里已经有特殊意义了，而小写的`string`才是`Typescript`用来表示字符串的类型名称，即在注释变量类型为字符串时，使用小写的`string`，而不是大写的`String`，注意不要混淆了两者；`number`和`boolean`同理。\n- **`number`**：数字类型；\n- **`boolean`**：布尔类型；\n\n  ```ts\n  // 声明变量类型，可以不赋初值，后续给num赋的值必须是number类型\n  let num: number;\n  let str: string = \"typescript\";\n  // 类型推断：TS会自动推断出bool的类型为boolean\n  let bool = true;\n  ```\n\n### 2. `Array`\n\n`Array`是数组类型，属于对象类型的一种。由于数组内会有数组成员，因此，在声明数组变量的时候，还要给数组成员添加类型注释，一般有两种常见方式：**`Type[]`**、**`Array<Type>`**。后者涉及**泛型**概念，将在后续介绍。其中，`Type`指代数组成员的类型，可以是基础类型，也可以是人为定义的类型 (关于数组的变形，元组类型，将在对象类型的章节介绍)。例如，要声明一个存放字符串的数组变量：\n\n```ts\nlet arr1: string[];\n// 也可以像下面\nlet arr2: Array<string>;\n```\n\n### 3. `object`\n\n对象类型是我们平时更为常见的类型。在本篇只给出一些简单定义，后续篇章中会进行单独介绍。一个对象类型的变量可以通过键值对来存储多个数据。定义一个对象类型，可以简单地列出它的各个属性及属性的类型：\n\n```ts\n// 定义一个包含name, age, gender属性的变量obj\nlet obj: { name: string; age: number; gender: \"gg\" | \"mm\" };\n```\n\n之后给 obj 赋值时**必须有且只能有**`name`，`age`，`gender`三个属性，且属性值应为相应的类型。\n\n```ts\n// 会报错,多了一个beauty属性,因此类型不合\nobj = { name: \"yy\", age: 22, gender: \"mm\", beauty: 100 };\n// 报错，缺少了gender属性\nobj = { name: \"yy\", age: 22 };\n// 正确赋值\nobj = { name: \"yy\", age: 22, gender: \"mm\" };\n```\n\n如果想要让某个属性变为可选项，则可以在定义对象类型时在属性名后使用问号\"?\"：\n\n```ts\n// 将gender定义为可选项\nlet obj: { name: string; age: number; gender?: \"gg\" | \"mm\" };\n\n// 正确\nobj = { name: \"yy\", age: 22, gender: \"mm\" };\n// 也正确，因为gender是可选的\nobj = { name: \"yy\", age: 22 };\n```\n\n在某个属性被定义为可选项之后，一旦给该对象赋值时，没有传入该属性，它的取值便会成为`undefined` (注意**这与一开始边定义`gender: 'gg' | 'mm' | undefined`不同**。)\n\n使用可选项有些地方需要注意，如**在函数的形参中**存在可选项，此时由于`gender`属性可能为`undefined`，我们在使用时需要在该属性后面加上英文感叹号\"`!`\"进行**非空断言**，明确它不是`undefined`。\n\n```ts\nfunction fn(obj: { name: string; age: number; gender?: \"gg\" | \"mm\" }) {\n  // 使用!进行非空断言\n  obj.gender!.replace(\"\", \"\");\n}\n```\n\n### 4. `Union Types` 联合类型\n\n`Union Types`是指使用 \"`|`\"符号来把多个类型联合成一个类型，一个联合类型的变量，其值可以是联合类型的任何一个子类型。\n\n```ts\n// 定义a为联合类型，则a可以是string类型也可以是number类型\nlet a: string | number;\n// a可以是string\na = \"union types\";\n// a也可以是number\na = 100;\n```\n\n在**函数的形参中**使用联合类型时有一些注意事项，如在上面的例子中，`a` 的类型是`string | number`，此时`a`无法调用字符串方法，因为`a`有可能是一个`number`；同理，也不能直接调用数字类型的方法。当然，也不能直接赋值给`string`类型的变量或者`number`类型的变量。\n\n```ts\nlet a: string | number;\n// a可以是string\na = \"union types\";\n\nlet b: string;\nlet c: number;\n// 当开启了严格空值检查时，以下两次赋值都不合法\nb = a;\nc = a;\n```\n\n当然，如果每个子类型都具有共同的方法，则可以调用该共同的方法。例如：数组和字符串都具有`slice`方法，则联合类型`string | number[]` 的变量可以调用`slice`方法。\n\n```ts\nfunction func(obj: string | number[]) {\n  // 可以直接调用slice方法\n  const a = obj.slice();\n}\n```\n\n### 5. `Type Alias` 类型别名\n\n使用**`type`**关键字给你的类型起一个别名，以后就可以使用别名来指代这个类型。\n\n```ts\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype ID = number | string;\n\n// 使用类型别名Point\nlet p: Point = {\n  x: 123,\n  y: 222,\n};\n```\n\n### 6. Interfaces\n\n通过关键字**`interface`**，来定义一个接口，实际是一个对象类型，用于规定一个对象的形状。\n\n```ts\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n```\n\n简单说说**`interface`与类型别名的区别**：\n\n- `interface` 可以通过 **`extends`**关键字来**继承**另一个`interface`，而`type`通过 `&`符号来连接不同的对象属性；\n\n```ts\ninterface Animal {\n  name: string;\n}\n\n// 继承Animal接口\ninterface Dog extends Animal {\n  skull: number;\n}\n\n// 继承了Animal接口的属性name\nconst dog: Dog = {\n  skull: 10,\n  name: \"wangcai\",\n};\n\n// 类型别名通过&符号来拓展属性\ntype Dog2 = Animal & {\n  skull: number;\n};\n```\n\n- `interface`可以进行拓展，`Type`不可以\n\n```ts\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  skull: number;\n}\n\n// 拓展interface的内容\ninterface Dog {\n  age: number;\n}\n\n// 此时Dog类型包含name,skull,age三个\nconst dog: Dog = {\n  name: \"wangcai\",\n  skull: 12,\n  age: 2,\n};\n\n// 声明一个Dog2类型\ntype Dog2 = {\n  skull: number;\n};\n\n// 会报错，Dog2重复了\ntype Dog2 = {\n  name: string;\n};\n```\n\n- `interface`定义对象的形状，`type`不仅可以用于对象，也可以用于其它类型\n\n```ts\ntype TypeA = {\n  name: string;\n};\n\ntype TypeB = string | number;\n\ntype TypeC = TypeA | TypeB;\n```\n\n### 7. `Intersection Types` 交叉类型\n\n用 `&` 符号来连接多个类型，属于交叉类型 `A & B` 的变量，既满足`A`的约束，又满足`B`的约束。\n\n```ts\ntype TypeA = string | number;\ntype TypeB = Array<boolean> | number;\n// TypeC既满足TypeA又满足TypeB，因此TypeC是number\ntype TypeC = TypeA & TypeB;\n// a是number类型\nlet a: TypeC = 3;\n// b是TypeA类型，它的值是个string，因此不能赋值给a\nlet b: TypeA = \"123\";\na = b; // 报错\n```\n\n也可以用来拓展对象类型的属性：\n\n```ts\ntype A = {\n  name: string;\n};\n\ntype B = {\n  age: number;\n  gender: \"男\" | \"女\";\n};\n// 类型C是既满足A又满足B，即C既包含A的所有属性，又包含B的所有属性，\n// 从而实现属性拓展\ntype C = A & B;\n\nlet c: C = {\n  name: \"cc\",\n  age: 18,\n  gender: \"男\",\n};\n```\n\n注意 **`&` 和 | 的区别**：\"`&`\"可以合并多个对象类型的属性，使得到的新的对象类型包含其它所有类型的全部属性；\"`&`\"可以获得多个类型之间的公共子类型；\"`|`\"可以联合多个类型，得到的新类型的值，只需满足其中一种子类型即可。\n\n### 8. `Literal Types` 字面量类型\n\n通过字面量来定义类型，字面量的值可以是任意一个类型的值，可以将多个不同类型的字面量进行组合，此时得到的变量上的方法无法进行合法调用，因为变量可能为其它不含该方法的类型（与联合类型同理）。因此需要进行类型精简或类型断言。注意在变量声明时进行类型注释了的才能被字面量类型约束，如果没有类型注释，则会按照类型推论的结果来判定类型。\n\n```ts\n// 定义gender只能取值为 '男' 或 '女' 中的一种\nlet gender: \"男\" | \"女\" = \"男\";\n// gender2经类型推论string类型\nlet gender2 = \"男\";\n// 多种类型字面量的组合\nlet x: \"未知数\" | 1 | { y: 1 };\n// 严格类型检查时不能合法调用\nx.split(\"知\") <\n  // 进行类型断言后可合法\n  string >\n  x.split(\"知\");\n```\n\n### 9. `null` 和 `undefined` 与 非空断言\n\n两个空值类型，和在`js`里的区别一致。开启/关闭严格空值检查会影响到空值类型的行为。当我们知道一个变量不会为空时，可以在该变量后使用英文感叹号 \"`!`\" ，进行临时**非空断言 （`Non-null Assertion`）**。这点在函数中尤为重要。\n\n```ts\ntype MyType = string | number | undefined;\nlet value: MyType = \"I love China\";\n// 对value进行非空断言\nvalue!.split(\" \");\n```\n\n### 10. `Enums` 枚举类型\n\n枚举类型是一组被有意义地命名了的常量的集合。与其它类型本质上不同的是，其它的类型都只是类型，而枚举类型却是可以使用的值。**通过`enum`关键字声明某个变量为枚举类型的值**，使用枚举类型，可以让我们不去关注变量实际的值，而使用更有意义的名字来代表实际的值。例如，在表示性别时，我们可以简单地用数字 1 和 2 来表示 男 和 女。那么在实际使用中，我们需要知道到底是 1 代表男还是 1 代表女。当数据从前端传到后端，后端的小伙伴又需要去了解哪个数字代表哪个性别。这对我们来说就不太友好。所以，我们可以使用枚举类型来定义一组表示性别的常量，之后使用时，只需取常量的名字即可。\n\n```ts\nenum Gender {\n  male: 1,\n  female: 2,\n  secret: 3\n}\n```\n\n枚举类型包括数字型枚举、字符串型枚举、异构枚举等等。此处只简要了解一下枚举类型的的存在，后续会写一篇枚举类型的深入。\n\n### 11. `any`\n\n`any`可以指代任何类型，可以被赋值给任意类型的变量。\n\n```ts\n// 给变量anyscript一个any类型，其值为数字123\nlet anyscript: any = 123;\n// 给变量typescript一个string类型\nlet typescript: string = \"typescript\";\n\n// 赋值操作后，typescript变成了123，其类型发生了改变\ntypescript = anyscript;\n\n// 而编译器会认为typescript变量为string类型，且允许我们调用string类型的方法\ntypescript.split(\"c\");\n// 而事实上此时变量typescript的值已经变为了数字123，调用string的方法就会\n```\n\n这个看起来很便捷的`any`类型，在这种时候就会引发问题，造成类型污染。因此，我们应该避免使用`any`，以免走进`Anyscript`的误区。\n\n### 12. `unknown`与类型断言\n\n`unknown`用来表示未知类型，和`any`相似，它的值可以是任何类型。不同的是，如果一个变量是`unknown`类型，那么它在被明确为某个确切的类型之前，不能调用任何方法，也不能被赋值给其它变量。你可以使用<mark>**类型断言**</mark>来**临时**人为明确一个 unknown 变量的确切类型。毕竟**你永远比`Typescript`知道的多**！类型断言一般有两种方式：使用 `a as Type` 或者 在需要进行类型断言的变量前使用尖括号：`<Type>a`，来明确变量`a`为`Type`类型。注意类型断言是临时的，因此它不会改变原来`unknown`变量的类型。\n\n```ts\n// 声明一个unknown变量a，一个字符串变量b\nlet a: unknown = \"I am unknown type\";\nlet b: string;\n\n// 这里会报错，因为a为unknown类型，而且并没有明确它的具体类型，\n// 不能被赋值给字符串变量b，哪怕a本身实际的值为字符串\nb = a;\n\n// 使用类型断言来明确a的具体类型为字符串string，\n// 之后便可以赋值给字符串b\n\n// 使用as进行类型断言，可以用括号将其整体包裹起来，以进行对断言之后的变量a的操作\nb = a as string;\nb = (a as string) + \"!\";\n\n// 也可以使用<Type>a的形式进行类型断言\nb = <string>a;\n\n// 之后 a 的类型依然是unknown\n```\n\n也许你会觉得使用`unknown`类型有些繁琐。但相比起`any`类型容易引发的错误，`unknown`类型的使用足够安全。因此，如果有需要使用不明确的类型时，应该首选`unknown`而不是`any`。毕竟谁也不愿意，一杯茶，一个圈，一个`BUG`改一天(甚至还在排查错误原因)。\n\n### 13. `never` 和 `void`\n\n`void`用于表示函数返回空值；`never`用于表示不该使用的值或者函数不应该有返回值，在我们平常的工作中`never`的应用场景较少。\n\n### 14.不常用的类型\n\n**`Bigint`和`Symbol`**是`ES6`之后加入的基本数据类型，目前在日常工作中的使用并不多见。`TS`中的这两种类型和`JS`中一致。\n\n- **`bigint`**\n\n  ```ts\n  // 使用BigInt函数来创建一个bigint类型的变量\n  const oneHundred: bigint = BigInt(100);\n\n  // 使用字面量语法 数字 + n 来创建bigint类型的变量\n  const anotherHundred: bigint = 100n;\n  ```\n\n- **`Symbol`**\n\n  `Symbol`是`ES6`之后新增的一种基本数据类型，每个`Symbol`类型的变量，其值都是唯一的，即使传入相同的参数，返回的结果也永远不会相等。一般使用`Symbol`函数来创建。\n\n  ```ts\n  // 使用Symbol函数创建Symbol类型的变量/常量\n  const first1 = Symbol(\"1\");\n  const first2 = Symbol(\"1\");\n\n  first1 === first2; // 永远是false\n  ```\n\n类型基础的内容就介绍到这里啦，下一篇将着重介绍在函数中使用各种类型时需要注意的问题，例如如何进行类型精确。如果文章描述有不妥之处，恳请不吝指出，我们下一篇再见！\n","source":"_posts/TypeScript 系列/基础篇/Typescript系列  基础篇 (一)  TS类型指南.md","raw":"---\nlayout: post\ntitle: TS系列基础篇(一) TS类型指南\ndate: 2022-03-01 09:40\nupdated: 2022-03-01 09:40\nkeywords:\n  - 前端\n  - TypeScript\n  - TS\n  - 类型\ntags:\n  - TypeScript\n  - 前端\narchive: TypeScript\nswiper_index: 10\n---\n\n# TS 系列基础篇(一) TS 类型指南\n\n这段时间以来，TS 的发展可谓是如日中天，本想偷个懒去看看别人写的分享贴来学习，找了近十篇之后，发现要么是比较浅显，要么有些偏差，没有找到很满意的。于是决定去看[官方文档](https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html#consuming)。学习了一段时间后，准备写一个系列，从基础类型，对象，函数，模块等 TS 知识，到在`vue`、`react`中的应用，供有需要的同学们参考。其中，我套用了不少官方文档的示例，觉得我的学习经验不好或不正确的朋友，欢迎批评指正。\n\n`TS`是`JS`的超集。在学 TS 之前，最好有一定的`JS`基础。本篇只介绍`typescript`的安装和各种基础类型。需要了解其它内容的同学可以看其它篇章或查阅官方文档。\n\n[toc]\n\n## (一)、安装与编译\n\n想要使用`TS`，得先会安装。Typescript 需要`node`环境，确保你已经安装了`node`。如果还没有安装`node`，可以去[`Node.js`官网]([`Node.js`](https://nodejs.org/zh-cn/)下载，傻瓜式安装。\n\n打开项目目录进行初始化：\n\n```powershell\nnpm init -y\n```\n\n官方推荐了`npm`，`yarn`，`pnpm`三种工具，任选其一即可（`npm`工具为`node`自带的包管理工具，可自由使用；`yarn`或`pnpm`工具需要提前安装）。\n\n```powershell\n# with npm\nnpm install typescript --save-dev\n# with yarn\nyarn add typescript --dev\n# with pnpm\npnpm add typescript -D\n```\n\n在安装 ts 时，编译工具`tsc`也会被自动安装。待安装完成，在项目根目录下新建一个`app.ts`。\n\n```ts\n// app.ts\nconst str = \"app\";\nconsole.log(str.charAt(0));\n```\n\n即可通过以下任一方式运行`tsc`，编译成功后会在和`app.ts`同级目录下多出一个`app.js`文件。\n\n```powershell\n# 当前目录下的app.ts文件编译为app.js\n# npm\nnpx tsc app.ts\n# yarn\nyarn tsc app.ts\n# pnpm\npnpm tsc app.ts\n```\n\n`app.js`：\n\n```js\nconst str = \"app\";\nconsole.log(str.charAt(0));\n```\n\n这个`js`文件和`app.ts`看起来没有差别，这是因为我们没有在`app.ts`里没有进行类型约束。与类型的相关内容会在后面谈到。现在我们来让`app.ts`出一点“错误”，将`str`换成数组，编辑器会把错误代码用红色波浪线标出，如果此时在命令行运行`yarn tsc app.ts`，控制台便会报错。\n\n```ts\n// app.ts\nconst str = [\"a\", \"p\", \"p\"];\nconsole.log(str.charAt(0)); // charAt会被\n```\n\n尽管如此，报错了的代码依旧会被编译成`js`文件。我们可以在`tsc`命令后加上编译的相关配置指令来进行控制。比如，加上**`--noEmitOnError`**之后，一旦报错便不会生成`js`文件。\n\n```powershell\ntsc --noEmitOnError hello.ts\n```\n\n但是 ts 的编译配置项非常多，如果每次都通过在命令行加入指令来进行相关控制，无疑非常繁琐。因此我们可以在**`tsconfig.json`**里编写相关配置，这样我们执行`tsc`命令时，编译器会默认从当前目录逐步向上层目录查找并读取`tsconfig.json`里的配置项。\n\n## (二)、配置文件：`tsconfig.json`\n\n在运行`tsc`命令时，我们可以在后面添加指令来指定相关配置。但是我们会更倾向于在`tsconfig.json`里对相关指令进行配置，以减少重复、繁琐的操作。在`Vue`、`React`等框架搭建的项目里，一般都已生成初步配置好了的`tsconfig.json`文件。本篇只进行解基础内容的分享，有关配置的章节将在后续推出。\n\n## (三)、类型基础\n\n这里介绍部分 TS 基础类型，关于类型的进阶将在后续篇章中单独介绍。注意不要将基础类型和 js 基本数据类型混为一谈。基础类型可以理解为 ts 内置的各种类型，而非我们人为定义出的类型。TS 有多种基础类型，这些类型可以用来进行组合，从而得到我们需要的人为定义的类型。TS 在声明变量时，在变量名后加上冒号<mark>: </mark>和类型名来进行变量的类型注释。如果不添加类型注释，则 TS 会根据变量的初始值进行<mark>**类型推论**</mark>，自动推断出该变量属于什么类型。如果也没有初始值，则会被推断为**any**类型。\n\n### 1. 原有的基本数据类型\n\n- **`string`**：字符串类型，注意`String`在`js`里已经有特殊意义了，而小写的`string`才是`Typescript`用来表示字符串的类型名称，即在注释变量类型为字符串时，使用小写的`string`，而不是大写的`String`，注意不要混淆了两者；`number`和`boolean`同理。\n- **`number`**：数字类型；\n- **`boolean`**：布尔类型；\n\n  ```ts\n  // 声明变量类型，可以不赋初值，后续给num赋的值必须是number类型\n  let num: number;\n  let str: string = \"typescript\";\n  // 类型推断：TS会自动推断出bool的类型为boolean\n  let bool = true;\n  ```\n\n### 2. `Array`\n\n`Array`是数组类型，属于对象类型的一种。由于数组内会有数组成员，因此，在声明数组变量的时候，还要给数组成员添加类型注释，一般有两种常见方式：**`Type[]`**、**`Array<Type>`**。后者涉及**泛型**概念，将在后续介绍。其中，`Type`指代数组成员的类型，可以是基础类型，也可以是人为定义的类型 (关于数组的变形，元组类型，将在对象类型的章节介绍)。例如，要声明一个存放字符串的数组变量：\n\n```ts\nlet arr1: string[];\n// 也可以像下面\nlet arr2: Array<string>;\n```\n\n### 3. `object`\n\n对象类型是我们平时更为常见的类型。在本篇只给出一些简单定义，后续篇章中会进行单独介绍。一个对象类型的变量可以通过键值对来存储多个数据。定义一个对象类型，可以简单地列出它的各个属性及属性的类型：\n\n```ts\n// 定义一个包含name, age, gender属性的变量obj\nlet obj: { name: string; age: number; gender: \"gg\" | \"mm\" };\n```\n\n之后给 obj 赋值时**必须有且只能有**`name`，`age`，`gender`三个属性，且属性值应为相应的类型。\n\n```ts\n// 会报错,多了一个beauty属性,因此类型不合\nobj = { name: \"yy\", age: 22, gender: \"mm\", beauty: 100 };\n// 报错，缺少了gender属性\nobj = { name: \"yy\", age: 22 };\n// 正确赋值\nobj = { name: \"yy\", age: 22, gender: \"mm\" };\n```\n\n如果想要让某个属性变为可选项，则可以在定义对象类型时在属性名后使用问号\"?\"：\n\n```ts\n// 将gender定义为可选项\nlet obj: { name: string; age: number; gender?: \"gg\" | \"mm\" };\n\n// 正确\nobj = { name: \"yy\", age: 22, gender: \"mm\" };\n// 也正确，因为gender是可选的\nobj = { name: \"yy\", age: 22 };\n```\n\n在某个属性被定义为可选项之后，一旦给该对象赋值时，没有传入该属性，它的取值便会成为`undefined` (注意**这与一开始边定义`gender: 'gg' | 'mm' | undefined`不同**。)\n\n使用可选项有些地方需要注意，如**在函数的形参中**存在可选项，此时由于`gender`属性可能为`undefined`，我们在使用时需要在该属性后面加上英文感叹号\"`!`\"进行**非空断言**，明确它不是`undefined`。\n\n```ts\nfunction fn(obj: { name: string; age: number; gender?: \"gg\" | \"mm\" }) {\n  // 使用!进行非空断言\n  obj.gender!.replace(\"\", \"\");\n}\n```\n\n### 4. `Union Types` 联合类型\n\n`Union Types`是指使用 \"`|`\"符号来把多个类型联合成一个类型，一个联合类型的变量，其值可以是联合类型的任何一个子类型。\n\n```ts\n// 定义a为联合类型，则a可以是string类型也可以是number类型\nlet a: string | number;\n// a可以是string\na = \"union types\";\n// a也可以是number\na = 100;\n```\n\n在**函数的形参中**使用联合类型时有一些注意事项，如在上面的例子中，`a` 的类型是`string | number`，此时`a`无法调用字符串方法，因为`a`有可能是一个`number`；同理，也不能直接调用数字类型的方法。当然，也不能直接赋值给`string`类型的变量或者`number`类型的变量。\n\n```ts\nlet a: string | number;\n// a可以是string\na = \"union types\";\n\nlet b: string;\nlet c: number;\n// 当开启了严格空值检查时，以下两次赋值都不合法\nb = a;\nc = a;\n```\n\n当然，如果每个子类型都具有共同的方法，则可以调用该共同的方法。例如：数组和字符串都具有`slice`方法，则联合类型`string | number[]` 的变量可以调用`slice`方法。\n\n```ts\nfunction func(obj: string | number[]) {\n  // 可以直接调用slice方法\n  const a = obj.slice();\n}\n```\n\n### 5. `Type Alias` 类型别名\n\n使用**`type`**关键字给你的类型起一个别名，以后就可以使用别名来指代这个类型。\n\n```ts\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype ID = number | string;\n\n// 使用类型别名Point\nlet p: Point = {\n  x: 123,\n  y: 222,\n};\n```\n\n### 6. Interfaces\n\n通过关键字**`interface`**，来定义一个接口，实际是一个对象类型，用于规定一个对象的形状。\n\n```ts\ninterface Point {\n  x: number;\n  y: number;\n}\n\nfunction printCoord(pt: Point) {\n  console.log(\"The coordinate's x value is \" + pt.x);\n  console.log(\"The coordinate's y value is \" + pt.y);\n}\n\nprintCoord({ x: 100, y: 100 });\n```\n\n简单说说**`interface`与类型别名的区别**：\n\n- `interface` 可以通过 **`extends`**关键字来**继承**另一个`interface`，而`type`通过 `&`符号来连接不同的对象属性；\n\n```ts\ninterface Animal {\n  name: string;\n}\n\n// 继承Animal接口\ninterface Dog extends Animal {\n  skull: number;\n}\n\n// 继承了Animal接口的属性name\nconst dog: Dog = {\n  skull: 10,\n  name: \"wangcai\",\n};\n\n// 类型别名通过&符号来拓展属性\ntype Dog2 = Animal & {\n  skull: number;\n};\n```\n\n- `interface`可以进行拓展，`Type`不可以\n\n```ts\ninterface Animal {\n  name: string;\n}\n\ninterface Dog extends Animal {\n  skull: number;\n}\n\n// 拓展interface的内容\ninterface Dog {\n  age: number;\n}\n\n// 此时Dog类型包含name,skull,age三个\nconst dog: Dog = {\n  name: \"wangcai\",\n  skull: 12,\n  age: 2,\n};\n\n// 声明一个Dog2类型\ntype Dog2 = {\n  skull: number;\n};\n\n// 会报错，Dog2重复了\ntype Dog2 = {\n  name: string;\n};\n```\n\n- `interface`定义对象的形状，`type`不仅可以用于对象，也可以用于其它类型\n\n```ts\ntype TypeA = {\n  name: string;\n};\n\ntype TypeB = string | number;\n\ntype TypeC = TypeA | TypeB;\n```\n\n### 7. `Intersection Types` 交叉类型\n\n用 `&` 符号来连接多个类型，属于交叉类型 `A & B` 的变量，既满足`A`的约束，又满足`B`的约束。\n\n```ts\ntype TypeA = string | number;\ntype TypeB = Array<boolean> | number;\n// TypeC既满足TypeA又满足TypeB，因此TypeC是number\ntype TypeC = TypeA & TypeB;\n// a是number类型\nlet a: TypeC = 3;\n// b是TypeA类型，它的值是个string，因此不能赋值给a\nlet b: TypeA = \"123\";\na = b; // 报错\n```\n\n也可以用来拓展对象类型的属性：\n\n```ts\ntype A = {\n  name: string;\n};\n\ntype B = {\n  age: number;\n  gender: \"男\" | \"女\";\n};\n// 类型C是既满足A又满足B，即C既包含A的所有属性，又包含B的所有属性，\n// 从而实现属性拓展\ntype C = A & B;\n\nlet c: C = {\n  name: \"cc\",\n  age: 18,\n  gender: \"男\",\n};\n```\n\n注意 **`&` 和 | 的区别**：\"`&`\"可以合并多个对象类型的属性，使得到的新的对象类型包含其它所有类型的全部属性；\"`&`\"可以获得多个类型之间的公共子类型；\"`|`\"可以联合多个类型，得到的新类型的值，只需满足其中一种子类型即可。\n\n### 8. `Literal Types` 字面量类型\n\n通过字面量来定义类型，字面量的值可以是任意一个类型的值，可以将多个不同类型的字面量进行组合，此时得到的变量上的方法无法进行合法调用，因为变量可能为其它不含该方法的类型（与联合类型同理）。因此需要进行类型精简或类型断言。注意在变量声明时进行类型注释了的才能被字面量类型约束，如果没有类型注释，则会按照类型推论的结果来判定类型。\n\n```ts\n// 定义gender只能取值为 '男' 或 '女' 中的一种\nlet gender: \"男\" | \"女\" = \"男\";\n// gender2经类型推论string类型\nlet gender2 = \"男\";\n// 多种类型字面量的组合\nlet x: \"未知数\" | 1 | { y: 1 };\n// 严格类型检查时不能合法调用\nx.split(\"知\") <\n  // 进行类型断言后可合法\n  string >\n  x.split(\"知\");\n```\n\n### 9. `null` 和 `undefined` 与 非空断言\n\n两个空值类型，和在`js`里的区别一致。开启/关闭严格空值检查会影响到空值类型的行为。当我们知道一个变量不会为空时，可以在该变量后使用英文感叹号 \"`!`\" ，进行临时**非空断言 （`Non-null Assertion`）**。这点在函数中尤为重要。\n\n```ts\ntype MyType = string | number | undefined;\nlet value: MyType = \"I love China\";\n// 对value进行非空断言\nvalue!.split(\" \");\n```\n\n### 10. `Enums` 枚举类型\n\n枚举类型是一组被有意义地命名了的常量的集合。与其它类型本质上不同的是，其它的类型都只是类型，而枚举类型却是可以使用的值。**通过`enum`关键字声明某个变量为枚举类型的值**，使用枚举类型，可以让我们不去关注变量实际的值，而使用更有意义的名字来代表实际的值。例如，在表示性别时，我们可以简单地用数字 1 和 2 来表示 男 和 女。那么在实际使用中，我们需要知道到底是 1 代表男还是 1 代表女。当数据从前端传到后端，后端的小伙伴又需要去了解哪个数字代表哪个性别。这对我们来说就不太友好。所以，我们可以使用枚举类型来定义一组表示性别的常量，之后使用时，只需取常量的名字即可。\n\n```ts\nenum Gender {\n  male: 1,\n  female: 2,\n  secret: 3\n}\n```\n\n枚举类型包括数字型枚举、字符串型枚举、异构枚举等等。此处只简要了解一下枚举类型的的存在，后续会写一篇枚举类型的深入。\n\n### 11. `any`\n\n`any`可以指代任何类型，可以被赋值给任意类型的变量。\n\n```ts\n// 给变量anyscript一个any类型，其值为数字123\nlet anyscript: any = 123;\n// 给变量typescript一个string类型\nlet typescript: string = \"typescript\";\n\n// 赋值操作后，typescript变成了123，其类型发生了改变\ntypescript = anyscript;\n\n// 而编译器会认为typescript变量为string类型，且允许我们调用string类型的方法\ntypescript.split(\"c\");\n// 而事实上此时变量typescript的值已经变为了数字123，调用string的方法就会\n```\n\n这个看起来很便捷的`any`类型，在这种时候就会引发问题，造成类型污染。因此，我们应该避免使用`any`，以免走进`Anyscript`的误区。\n\n### 12. `unknown`与类型断言\n\n`unknown`用来表示未知类型，和`any`相似，它的值可以是任何类型。不同的是，如果一个变量是`unknown`类型，那么它在被明确为某个确切的类型之前，不能调用任何方法，也不能被赋值给其它变量。你可以使用<mark>**类型断言**</mark>来**临时**人为明确一个 unknown 变量的确切类型。毕竟**你永远比`Typescript`知道的多**！类型断言一般有两种方式：使用 `a as Type` 或者 在需要进行类型断言的变量前使用尖括号：`<Type>a`，来明确变量`a`为`Type`类型。注意类型断言是临时的，因此它不会改变原来`unknown`变量的类型。\n\n```ts\n// 声明一个unknown变量a，一个字符串变量b\nlet a: unknown = \"I am unknown type\";\nlet b: string;\n\n// 这里会报错，因为a为unknown类型，而且并没有明确它的具体类型，\n// 不能被赋值给字符串变量b，哪怕a本身实际的值为字符串\nb = a;\n\n// 使用类型断言来明确a的具体类型为字符串string，\n// 之后便可以赋值给字符串b\n\n// 使用as进行类型断言，可以用括号将其整体包裹起来，以进行对断言之后的变量a的操作\nb = a as string;\nb = (a as string) + \"!\";\n\n// 也可以使用<Type>a的形式进行类型断言\nb = <string>a;\n\n// 之后 a 的类型依然是unknown\n```\n\n也许你会觉得使用`unknown`类型有些繁琐。但相比起`any`类型容易引发的错误，`unknown`类型的使用足够安全。因此，如果有需要使用不明确的类型时，应该首选`unknown`而不是`any`。毕竟谁也不愿意，一杯茶，一个圈，一个`BUG`改一天(甚至还在排查错误原因)。\n\n### 13. `never` 和 `void`\n\n`void`用于表示函数返回空值；`never`用于表示不该使用的值或者函数不应该有返回值，在我们平常的工作中`never`的应用场景较少。\n\n### 14.不常用的类型\n\n**`Bigint`和`Symbol`**是`ES6`之后加入的基本数据类型，目前在日常工作中的使用并不多见。`TS`中的这两种类型和`JS`中一致。\n\n- **`bigint`**\n\n  ```ts\n  // 使用BigInt函数来创建一个bigint类型的变量\n  const oneHundred: bigint = BigInt(100);\n\n  // 使用字面量语法 数字 + n 来创建bigint类型的变量\n  const anotherHundred: bigint = 100n;\n  ```\n\n- **`Symbol`**\n\n  `Symbol`是`ES6`之后新增的一种基本数据类型，每个`Symbol`类型的变量，其值都是唯一的，即使传入相同的参数，返回的结果也永远不会相等。一般使用`Symbol`函数来创建。\n\n  ```ts\n  // 使用Symbol函数创建Symbol类型的变量/常量\n  const first1 = Symbol(\"1\");\n  const first2 = Symbol(\"1\");\n\n  first1 === first2; // 永远是false\n  ```\n\n类型基础的内容就介绍到这里啦，下一篇将着重介绍在函数中使用各种类型时需要注意的问题，例如如何进行类型精确。如果文章描述有不妥之处，恳请不吝指出，我们下一篇再见！\n","slug":"TypeScript-系列-基础篇-Typescript系列-基础篇-一-TS类型指南","published":1,"comments":1,"photos":[],"link":"","_id":"cla5g9yph000ywgoi9n584h3l","content":"<h1 id=\"TS-系列基础篇-一-TS-类型指南\"><a href=\"#TS-系列基础篇-一-TS-类型指南\" class=\"headerlink\" title=\"TS 系列基础篇(一) TS 类型指南\"></a>TS 系列基础篇(一) TS 类型指南</h1><p>这段时间以来，TS 的发展可谓是如日中天，本想偷个懒去看看别人写的分享贴来学习，找了近十篇之后，发现要么是比较浅显，要么有些偏差，没有找到很满意的。于是决定去看<a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html#consuming\">官方文档</a>。学习了一段时间后，准备写一个系列，从基础类型，对象，函数，模块等 TS 知识，到在<code>vue</code>、<code>react</code>中的应用，供有需要的同学们参考。其中，我套用了不少官方文档的示例，觉得我的学习经验不好或不正确的朋友，欢迎批评指正。</p>\n<p><code>TS</code>是<code>JS</code>的超集。在学 TS 之前，最好有一定的<code>JS</code>基础。本篇只介绍<code>typescript</code>的安装和各种基础类型。需要了解其它内容的同学可以看其它篇章或查阅官方文档。</p>\n<p>[toc]</p>\n<h2 id=\"一-、安装与编译\"><a href=\"#一-、安装与编译\" class=\"headerlink\" title=\"(一)、安装与编译\"></a>(一)、安装与编译</h2><p>想要使用<code>TS</code>，得先会安装。Typescript 需要<code>node</code>环境，确保你已经安装了<code>node</code>。如果还没有安装<code>node</code>，可以去<a href=\"[`Node.js`](https://nodejs.org/zh-cn/\"><code>Node.js</code>官网</a>下载，傻瓜式安装。</p>\n<p>打开项目目录进行初始化：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init <span class=\"literal\">-y</span></span><br></pre></td></tr></table></figure>\n<p>官方推荐了<code>npm</code>，<code>yarn</code>，<code>pnpm</code>三种工具，任选其一即可（<code>npm</code>工具为<code>node</code>自带的包管理工具，可自由使用；<code>yarn</code>或<code>pnpm</code>工具需要提前安装）。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># with npm</span></span><br><span class=\"line\">npm install typescript <span class=\"literal\">--save-dev</span></span><br><span class=\"line\"><span class=\"comment\"># with yarn</span></span><br><span class=\"line\">yarn add typescript <span class=\"literal\">--dev</span></span><br><span class=\"line\"><span class=\"comment\"># with pnpm</span></span><br><span class=\"line\">pnpm add typescript <span class=\"literal\">-D</span></span><br></pre></td></tr></table></figure>\n<p>在安装 ts 时，编译工具<code>tsc</code>也会被自动安装。待安装完成，在项目根目录下新建一个<code>app.ts</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;app&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n<p>即可通过以下任一方式运行<code>tsc</code>，编译成功后会在和<code>app.ts</code>同级目录下多出一个<code>app.js</code>文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前目录下的app.ts文件编译为app.js</span></span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\">npx tsc app.ts</span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn tsc app.ts</span><br><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">pnpm tsc app.ts</span><br></pre></td></tr></table></figure>\n<p><code>app.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;app&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n<p>这个<code>js</code>文件和<code>app.ts</code>看起来没有差别，这是因为我们没有在<code>app.ts</code>里没有进行类型约束。与类型的相关内容会在后面谈到。现在我们来让<code>app.ts</code>出一点“错误”，将<code>str</code>换成数组，编辑器会把错误代码用红色波浪线标出，如果此时在命令行运行<code>yarn tsc app.ts</code>，控制台便会报错。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p&quot;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>)); <span class=\"comment\">// charAt会被</span></span><br></pre></td></tr></table></figure>\n<p>尽管如此，报错了的代码依旧会被编译成<code>js</code>文件。我们可以在<code>tsc</code>命令后加上编译的相关配置指令来进行控制。比如，加上<strong><code>--noEmitOnError</code></strong>之后，一旦报错便不会生成<code>js</code>文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc <span class=\"literal\">--noEmitOnError</span> hello.ts</span><br></pre></td></tr></table></figure>\n<p>但是 ts 的编译配置项非常多，如果每次都通过在命令行加入指令来进行相关控制，无疑非常繁琐。因此我们可以在<strong><code>tsconfig.json</code></strong>里编写相关配置，这样我们执行<code>tsc</code>命令时，编译器会默认从当前目录逐步向上层目录查找并读取<code>tsconfig.json</code>里的配置项。</p>\n<h2 id=\"二-、配置文件：tsconfig-json\"><a href=\"#二-、配置文件：tsconfig-json\" class=\"headerlink\" title=\"(二)、配置文件：tsconfig.json\"></a>(二)、配置文件：<code>tsconfig.json</code></h2><p>在运行<code>tsc</code>命令时，我们可以在后面添加指令来指定相关配置。但是我们会更倾向于在<code>tsconfig.json</code>里对相关指令进行配置，以减少重复、繁琐的操作。在<code>Vue</code>、<code>React</code>等框架搭建的项目里，一般都已生成初步配置好了的<code>tsconfig.json</code>文件。本篇只进行解基础内容的分享，有关配置的章节将在后续推出。</p>\n<h2 id=\"三-、类型基础\"><a href=\"#三-、类型基础\" class=\"headerlink\" title=\"(三)、类型基础\"></a>(三)、类型基础</h2><p>这里介绍部分 TS 基础类型，关于类型的进阶将在后续篇章中单独介绍。注意不要将基础类型和 js 基本数据类型混为一谈。基础类型可以理解为 ts 内置的各种类型，而非我们人为定义出的类型。TS 有多种基础类型，这些类型可以用来进行组合，从而得到我们需要的人为定义的类型。TS 在声明变量时，在变量名后加上冒号<mark>: </mark>和类型名来进行变量的类型注释。如果不添加类型注释，则 TS 会根据变量的初始值进行<mark><strong>类型推论</strong></mark>，自动推断出该变量属于什么类型。如果也没有初始值，则会被推断为<strong>any</strong>类型。</p>\n<h3 id=\"1-原有的基本数据类型\"><a href=\"#1-原有的基本数据类型\" class=\"headerlink\" title=\"1. 原有的基本数据类型\"></a>1. 原有的基本数据类型</h3><ul>\n<li><strong><code>string</code></strong>：字符串类型，注意<code>String</code>在<code>js</code>里已经有特殊意义了，而小写的<code>string</code>才是<code>Typescript</code>用来表示字符串的类型名称，即在注释变量类型为字符串时，使用小写的<code>string</code>，而不是大写的<code>String</code>，注意不要混淆了两者；<code>number</code>和<code>boolean</code>同理。</li>\n<li><strong><code>number</code></strong>：数字类型；</li>\n<li><p><strong><code>boolean</code></strong>：布尔类型；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明变量类型，可以不赋初值，后续给num赋的值必须是number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;typescript&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 类型推断：TS会自动推断出bool的类型为boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bool = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-Array\"><a href=\"#2-Array\" class=\"headerlink\" title=\"2. Array\"></a>2. <code>Array</code></h3><p><code>Array</code>是数组类型，属于对象类型的一种。由于数组内会有数组成员，因此，在声明数组变量的时候，还要给数组成员添加类型注释，一般有两种常见方式：<strong><code>Type[]</code></strong>、<strong><code>Array&lt;Type&gt;</code></strong>。后者涉及<strong>泛型</strong>概念，将在后续介绍。其中，<code>Type</code>指代数组成员的类型，可以是基础类型，也可以是人为定义的类型 (关于数组的变形，元组类型，将在对象类型的章节介绍)。例如，要声明一个存放字符串的数组变量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr1</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"><span class=\"comment\">// 也可以像下面</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-object\"><a href=\"#3-object\" class=\"headerlink\" title=\"3. object\"></a>3. <code>object</code></h3><p>对象类型是我们平时更为常见的类型。在本篇只给出一些简单定义，后续篇章中会进行单独介绍。一个对象类型的变量可以通过键值对来存储多个数据。定义一个对象类型，可以简单地列出它的各个属性及属性的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个包含name, age, gender属性的变量obj</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">gender</span>: <span class=\"string\">&quot;gg&quot;</span> | <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>之后给 obj 赋值时<strong>必须有且只能有</strong><code>name</code>，<code>age</code>，<code>gender</code>三个属性，且属性值应为相应的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 会报错,多了一个beauty属性,因此类型不合</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&quot;mm&quot;</span>, <span class=\"attr\">beauty</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错，缺少了gender属性</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 正确赋值</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>如果想要让某个属性变为可选项，则可以在定义对象类型时在属性名后使用问号”?”：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将gender定义为可选项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; gender?: <span class=\"string\">&quot;gg&quot;</span> | <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 也正确，因为gender是可选的</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>在某个属性被定义为可选项之后，一旦给该对象赋值时，没有传入该属性，它的取值便会成为<code>undefined</code> (注意<strong>这与一开始边定义<code>gender: &#39;gg&#39; | &#39;mm&#39; | undefined</code>不同</strong>。)</p>\n<p>使用可选项有些地方需要注意，如<strong>在函数的形参中</strong>存在可选项，此时由于<code>gender</code>属性可能为<code>undefined</code>，我们在使用时需要在该属性后面加上英文感叹号”<code>!</code>“进行<strong>非空断言</strong>，明确它不是<code>undefined</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">obj: &#123; name: <span class=\"built_in\">string</span>; age: <span class=\"built_in\">number</span>; gender?: <span class=\"string\">&quot;gg&quot;</span> | <span class=\"string\">&quot;mm&quot;</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用!进行非空断言</span></span><br><span class=\"line\">  obj.<span class=\"property\">gender</span>!.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Union-Types-联合类型\"><a href=\"#4-Union-Types-联合类型\" class=\"headerlink\" title=\"4. Union Types 联合类型\"></a>4. <code>Union Types</code> 联合类型</h3><p><code>Union Types</code>是指使用 “<code>|</code>“符号来把多个类型联合成一个类型，一个联合类型的变量，其值可以是联合类型的任何一个子类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义a为联合类型，则a可以是string类型也可以是number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// a可以是string</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;union types&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// a也可以是number</span></span><br><span class=\"line\">a = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>在<strong>函数的形参中</strong>使用联合类型时有一些注意事项，如在上面的例子中，<code>a</code> 的类型是<code>string | number</code>，此时<code>a</code>无法调用字符串方法，因为<code>a</code>有可能是一个<code>number</code>；同理，也不能直接调用数字类型的方法。当然，也不能直接赋值给<code>string</code>类型的变量或者<code>number</code>类型的变量。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// a可以是string</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;union types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当开启了严格空值检查时，以下两次赋值都不合法</span></span><br><span class=\"line\">b = a;</span><br><span class=\"line\">c = a;</span><br></pre></td></tr></table></figure>\n<p>当然，如果每个子类型都具有共同的方法，则可以调用该共同的方法。例如：数组和字符串都具有<code>slice</code>方法，则联合类型<code>string | number[]</code> 的变量可以调用<code>slice</code>方法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">obj: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以直接调用slice方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = obj.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-Type-Alias-类型别名\"><a href=\"#5-Type-Alias-类型别名\" class=\"headerlink\" title=\"5. Type Alias 类型别名\"></a>5. <code>Type Alias</code> 类型别名</h3><p>使用<strong><code>type</code></strong>关键字给你的类型起一个别名，以后就可以使用别名来指代这个类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">ID</span> = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用类型别名Point</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p</span>: <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Interfaces\"><a href=\"#6-Interfaces\" class=\"headerlink\" title=\"6. Interfaces\"></a>6. Interfaces</h3><p>通过关键字<strong><code>interface</code></strong>，来定义一个接口，实际是一个对象类型，用于规定一个对象的形状。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printCoord</span>(<span class=\"params\">pt: Point</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class=\"property\">x</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class=\"property\">y</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoord</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">100</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>简单说说<strong><code>interface</code>与类型别名的区别</strong>：</p>\n<ul>\n<li><code>interface</code> 可以通过 <strong><code>extends</code></strong>关键字来<strong>继承</strong>另一个<code>interface</code>，而<code>type</code>通过 <code>&amp;</code>符号来连接不同的对象属性；</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承Animal接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承了Animal接口的属性name</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">dog</span>: <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangcai&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型别名通过&amp;符号来拓展属性</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog2</span> = <span class=\"title class_\">Animal</span> &amp; &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>interface</code>可以进行拓展，<code>Type</code>不可以</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拓展interface的内容</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时Dog类型包含name,skull,age三个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">dog</span>: <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangcai&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个Dog2类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会报错，Dog2重复了</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>interface</code>定义对象的形状，<code>type</code>不仅可以用于对象，也可以用于其它类型</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeA</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeB</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeC</span> = <span class=\"title class_\">TypeA</span> | <span class=\"title class_\">TypeB</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Intersection-Types-交叉类型\"><a href=\"#7-Intersection-Types-交叉类型\" class=\"headerlink\" title=\"7. Intersection Types 交叉类型\"></a>7. <code>Intersection Types</code> 交叉类型</h3><p>用 <code>&amp;</code> 符号来连接多个类型，属于交叉类型 <code>A &amp; B</code> 的变量，既满足<code>A</code>的约束，又满足<code>B</code>的约束。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeA</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeB</span> = <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">boolean</span>&gt; | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeC既满足TypeA又满足TypeB，因此TypeC是number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeC</span> = <span class=\"title class_\">TypeA</span> &amp; <span class=\"title class_\">TypeB</span>;</span><br><span class=\"line\"><span class=\"comment\">// a是number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">TypeC</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// b是TypeA类型，它的值是个string，因此不能赋值给a</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">TypeA</span> = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">a = b; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>也可以用来拓展对象类型的属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> B = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span> | <span class=\"string\">&quot;女&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 类型C是既满足A又满足B，即C既包含A的所有属性，又包含B的所有属性，</span></span><br><span class=\"line\"><span class=\"comment\">// 从而实现属性拓展</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> C = A &amp; B;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: C = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注意 <strong><code>&amp;</code> 和 | 的区别</strong>：”<code>&amp;</code>“可以合并多个对象类型的属性，使得到的新的对象类型包含其它所有类型的全部属性；”<code>&amp;</code>“可以获得多个类型之间的公共子类型；”<code>|</code>“可以联合多个类型，得到的新类型的值，只需满足其中一种子类型即可。</p>\n<h3 id=\"8-Literal-Types-字面量类型\"><a href=\"#8-Literal-Types-字面量类型\" class=\"headerlink\" title=\"8. Literal Types 字面量类型\"></a>8. <code>Literal Types</code> 字面量类型</h3><p>通过字面量来定义类型，字面量的值可以是任意一个类型的值，可以将多个不同类型的字面量进行组合，此时得到的变量上的方法无法进行合法调用，因为变量可能为其它不含该方法的类型（与联合类型同理）。因此需要进行类型精简或类型断言。注意在变量声明时进行类型注释了的才能被字面量类型约束，如果没有类型注释，则会按照类型推论的结果来判定类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义gender只能取值为 &#x27;男&#x27; 或 &#x27;女&#x27; 中的一种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span> | <span class=\"string\">&quot;女&quot;</span> = <span class=\"string\">&quot;男&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// gender2经类型推论string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gender2 = <span class=\"string\">&quot;男&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 多种类型字面量的组合</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"string\">&quot;未知数&quot;</span> | <span class=\"number\">1</span> | &#123; <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 严格类型检查时不能合法调用</span></span><br><span class=\"line\">x.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;知&quot;</span>) &lt;</span><br><span class=\"line\">  <span class=\"comment\">// 进行类型断言后可合法</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> &gt;</span><br><span class=\"line\">  x.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;知&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-null-和-undefined-与-非空断言\"><a href=\"#9-null-和-undefined-与-非空断言\" class=\"headerlink\" title=\"9. null 和 undefined 与 非空断言\"></a>9. <code>null</code> 和 <code>undefined</code> 与 非空断言</h3><p>两个空值类型，和在<code>js</code>里的区别一致。开启/关闭严格空值检查会影响到空值类型的行为。当我们知道一个变量不会为空时，可以在该变量后使用英文感叹号 “<code>!</code>“ ，进行临时<strong>非空断言 （<code>Non-null Assertion</code>）</strong>。这点在函数中尤为重要。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">value</span>: <span class=\"title class_\">MyType</span> = <span class=\"string\">&quot;I love China&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 对value进行非空断言</span></span><br><span class=\"line\">value!.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-Enums-枚举类型\"><a href=\"#10-Enums-枚举类型\" class=\"headerlink\" title=\"10. Enums 枚举类型\"></a>10. <code>Enums</code> 枚举类型</h3><p>枚举类型是一组被有意义地命名了的常量的集合。与其它类型本质上不同的是，其它的类型都只是类型，而枚举类型却是可以使用的值。<strong>通过<code>enum</code>关键字声明某个变量为枚举类型的值</strong>，使用枚举类型，可以让我们不去关注变量实际的值，而使用更有意义的名字来代表实际的值。例如，在表示性别时，我们可以简单地用数字 1 和 2 来表示 男 和 女。那么在实际使用中，我们需要知道到底是 1 代表男还是 1 代表女。当数据从前端传到后端，后端的小伙伴又需要去了解哪个数字代表哪个性别。这对我们来说就不太友好。所以，我们可以使用枚举类型来定义一组表示性别的常量，之后使用时，只需取常量的名字即可。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Gender</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">male</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">female</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>枚举类型包括数字型枚举、字符串型枚举、异构枚举等等。此处只简要了解一下枚举类型的的存在，后续会写一篇枚举类型的深入。</p>\n<h3 id=\"11-any\"><a href=\"#11-any\" class=\"headerlink\" title=\"11. any\"></a>11. <code>any</code></h3><p><code>any</code>可以指代任何类型，可以被赋值给任意类型的变量。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给变量anyscript一个any类型，其值为数字123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anyscript</span>: <span class=\"built_in\">any</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// 给变量typescript一个string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">typescript</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋值操作后，typescript变成了123，其类型发生了改变</span></span><br><span class=\"line\">typescript = anyscript;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 而编译器会认为typescript变量为string类型，且允许我们调用string类型的方法</span></span><br><span class=\"line\">typescript.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 而事实上此时变量typescript的值已经变为了数字123，调用string的方法就会</span></span><br></pre></td></tr></table></figure>\n<p>这个看起来很便捷的<code>any</code>类型，在这种时候就会引发问题，造成类型污染。因此，我们应该避免使用<code>any</code>，以免走进<code>Anyscript</code>的误区。</p>\n<h3 id=\"12-unknown与类型断言\"><a href=\"#12-unknown与类型断言\" class=\"headerlink\" title=\"12. unknown与类型断言\"></a>12. <code>unknown</code>与类型断言</h3><p><code>unknown</code>用来表示未知类型，和<code>any</code>相似，它的值可以是任何类型。不同的是，如果一个变量是<code>unknown</code>类型，那么它在被明确为某个确切的类型之前，不能调用任何方法，也不能被赋值给其它变量。你可以使用<mark><strong>类型断言</strong></mark>来<strong>临时</strong>人为明确一个 unknown 变量的确切类型。毕竟<strong>你永远比<code>Typescript</code>知道的多</strong>！类型断言一般有两种方式：使用 <code>a as Type</code> 或者 在需要进行类型断言的变量前使用尖括号：<code>&lt;Type&gt;a</code>，来明确变量<code>a</code>为<code>Type</code>类型。注意类型断言是临时的，因此它不会改变原来<code>unknown</code>变量的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个unknown变量a，一个字符串变量b</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">unknown</span> = <span class=\"string\">&quot;I am unknown type&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里会报错，因为a为unknown类型，而且并没有明确它的具体类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 不能被赋值给字符串变量b，哪怕a本身实际的值为字符串</span></span><br><span class=\"line\">b = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用类型断言来明确a的具体类型为字符串string，</span></span><br><span class=\"line\"><span class=\"comment\">// 之后便可以赋值给字符串b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用as进行类型断言，可以用括号将其整体包裹起来，以进行对断言之后的变量a的操作</span></span><br><span class=\"line\">b = a <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">b = (a <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>) + <span class=\"string\">&quot;!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用&lt;Type&gt;a的形式进行类型断言</span></span><br><span class=\"line\">b = &lt;<span class=\"built_in\">string</span>&gt;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后 a 的类型依然是unknown</span></span><br></pre></td></tr></table></figure>\n<p>也许你会觉得使用<code>unknown</code>类型有些繁琐。但相比起<code>any</code>类型容易引发的错误，<code>unknown</code>类型的使用足够安全。因此，如果有需要使用不明确的类型时，应该首选<code>unknown</code>而不是<code>any</code>。毕竟谁也不愿意，一杯茶，一个圈，一个<code>BUG</code>改一天(甚至还在排查错误原因)。</p>\n<h3 id=\"13-never-和-void\"><a href=\"#13-never-和-void\" class=\"headerlink\" title=\"13. never 和 void\"></a>13. <code>never</code> 和 <code>void</code></h3><p><code>void</code>用于表示函数返回空值；<code>never</code>用于表示不该使用的值或者函数不应该有返回值，在我们平常的工作中<code>never</code>的应用场景较少。</p>\n<h3 id=\"14-不常用的类型\"><a href=\"#14-不常用的类型\" class=\"headerlink\" title=\"14.不常用的类型\"></a>14.不常用的类型</h3><p><strong><code>Bigint</code>和<code>Symbol</code></strong>是<code>ES6</code>之后加入的基本数据类型，目前在日常工作中的使用并不多见。<code>TS</code>中的这两种类型和<code>JS</code>中一致。</p>\n<ul>\n<li><p><strong><code>bigint</code></strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用BigInt函数来创建一个bigint类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">oneHundred</span>: <span class=\"built_in\">bigint</span> = <span class=\"title class_\">BigInt</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用字面量语法 数字 + n 来创建bigint类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">anotherHundred</span>: <span class=\"built_in\">bigint</span> = <span class=\"number\">100n</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>Symbol</code></strong></p>\n<p><code>Symbol</code>是<code>ES6</code>之后新增的一种基本数据类型，每个<code>Symbol</code>类型的变量，其值都是唯一的，即使传入相同的参数，返回的结果也永远不会相等。一般使用<code>Symbol</code>函数来创建。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Symbol函数创建Symbol类型的变量/常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> first1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> first2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">first1 === first2; <span class=\"comment\">// 永远是false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类型基础的内容就介绍到这里啦，下一篇将着重介绍在函数中使用各种类型时需要注意的问题，例如如何进行类型精确。如果文章描述有不妥之处，恳请不吝指出，我们下一篇再见！</p>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"TS-系列基础篇-一-TS-类型指南\"><a href=\"#TS-系列基础篇-一-TS-类型指南\" class=\"headerlink\" title=\"TS 系列基础篇(一) TS 类型指南\"></a>TS 系列基础篇(一) TS 类型指南</h1><p>这段时间以来，TS 的发展可谓是如日中天，本想偷个懒去看看别人写的分享贴来学习，找了近十篇之后，发现要么是比较浅显，要么有些偏差，没有找到很满意的。于是决定去看<a href=\"https://www.typescriptlang.org/docs/handbook/declaration-files/consumption.html#consuming\">官方文档</a>。学习了一段时间后，准备写一个系列，从基础类型，对象，函数，模块等 TS 知识，到在<code>vue</code>、<code>react</code>中的应用，供有需要的同学们参考。其中，我套用了不少官方文档的示例，觉得我的学习经验不好或不正确的朋友，欢迎批评指正。</p>\n<p><code>TS</code>是<code>JS</code>的超集。在学 TS 之前，最好有一定的<code>JS</code>基础。本篇只介绍<code>typescript</code>的安装和各种基础类型。需要了解其它内容的同学可以看其它篇章或查阅官方文档。</p>\n<p>[toc]</p>\n<h2 id=\"一-、安装与编译\"><a href=\"#一-、安装与编译\" class=\"headerlink\" title=\"(一)、安装与编译\"></a>(一)、安装与编译</h2><p>想要使用<code>TS</code>，得先会安装。Typescript 需要<code>node</code>环境，确保你已经安装了<code>node</code>。如果还没有安装<code>node</code>，可以去<a href=\"[`Node.js`](https://nodejs.org/zh-cn/\"><code>Node.js</code>官网</a>下载，傻瓜式安装。</p>\n<p>打开项目目录进行初始化：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init <span class=\"literal\">-y</span></span><br></pre></td></tr></table></figure>\n<p>官方推荐了<code>npm</code>，<code>yarn</code>，<code>pnpm</code>三种工具，任选其一即可（<code>npm</code>工具为<code>node</code>自带的包管理工具，可自由使用；<code>yarn</code>或<code>pnpm</code>工具需要提前安装）。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># with npm</span></span><br><span class=\"line\">npm install typescript <span class=\"literal\">--save-dev</span></span><br><span class=\"line\"><span class=\"comment\"># with yarn</span></span><br><span class=\"line\">yarn add typescript <span class=\"literal\">--dev</span></span><br><span class=\"line\"><span class=\"comment\"># with pnpm</span></span><br><span class=\"line\">pnpm add typescript <span class=\"literal\">-D</span></span><br></pre></td></tr></table></figure>\n<p>在安装 ts 时，编译工具<code>tsc</code>也会被自动安装。待安装完成，在项目根目录下新建一个<code>app.ts</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;app&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n<p>即可通过以下任一方式运行<code>tsc</code>，编译成功后会在和<code>app.ts</code>同级目录下多出一个<code>app.js</code>文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 当前目录下的app.ts文件编译为app.js</span></span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\">npx tsc app.ts</span><br><span class=\"line\"><span class=\"comment\"># yarn</span></span><br><span class=\"line\">yarn tsc app.ts</span><br><span class=\"line\"><span class=\"comment\"># pnpm</span></span><br><span class=\"line\">pnpm tsc app.ts</span><br></pre></td></tr></table></figure>\n<p><code>app.js</code>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> str = <span class=\"string\">&quot;app&quot;</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>));</span><br></pre></td></tr></table></figure>\n<p>这个<code>js</code>文件和<code>app.ts</code>看起来没有差别，这是因为我们没有在<code>app.ts</code>里没有进行类型约束。与类型的相关内容会在后面谈到。现在我们来让<code>app.ts</code>出一点“错误”，将<code>str</code>换成数组，编辑器会把错误代码用红色波浪线标出，如果此时在命令行运行<code>yarn tsc app.ts</code>，控制台便会报错。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> str = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;p&quot;</span>, <span class=\"string\">&quot;p&quot;</span>];</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(str.<span class=\"title function_\">charAt</span>(<span class=\"number\">0</span>)); <span class=\"comment\">// charAt会被</span></span><br></pre></td></tr></table></figure>\n<p>尽管如此，报错了的代码依旧会被编译成<code>js</code>文件。我们可以在<code>tsc</code>命令后加上编译的相关配置指令来进行控制。比如，加上<strong><code>--noEmitOnError</code></strong>之后，一旦报错便不会生成<code>js</code>文件。</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc <span class=\"literal\">--noEmitOnError</span> hello.ts</span><br></pre></td></tr></table></figure>\n<p>但是 ts 的编译配置项非常多，如果每次都通过在命令行加入指令来进行相关控制，无疑非常繁琐。因此我们可以在<strong><code>tsconfig.json</code></strong>里编写相关配置，这样我们执行<code>tsc</code>命令时，编译器会默认从当前目录逐步向上层目录查找并读取<code>tsconfig.json</code>里的配置项。</p>\n<h2 id=\"二-、配置文件：tsconfig-json\"><a href=\"#二-、配置文件：tsconfig-json\" class=\"headerlink\" title=\"(二)、配置文件：tsconfig.json\"></a>(二)、配置文件：<code>tsconfig.json</code></h2><p>在运行<code>tsc</code>命令时，我们可以在后面添加指令来指定相关配置。但是我们会更倾向于在<code>tsconfig.json</code>里对相关指令进行配置，以减少重复、繁琐的操作。在<code>Vue</code>、<code>React</code>等框架搭建的项目里，一般都已生成初步配置好了的<code>tsconfig.json</code>文件。本篇只进行解基础内容的分享，有关配置的章节将在后续推出。</p>\n<h2 id=\"三-、类型基础\"><a href=\"#三-、类型基础\" class=\"headerlink\" title=\"(三)、类型基础\"></a>(三)、类型基础</h2><p>这里介绍部分 TS 基础类型，关于类型的进阶将在后续篇章中单独介绍。注意不要将基础类型和 js 基本数据类型混为一谈。基础类型可以理解为 ts 内置的各种类型，而非我们人为定义出的类型。TS 有多种基础类型，这些类型可以用来进行组合，从而得到我们需要的人为定义的类型。TS 在声明变量时，在变量名后加上冒号<mark>: </mark>和类型名来进行变量的类型注释。如果不添加类型注释，则 TS 会根据变量的初始值进行<mark><strong>类型推论</strong></mark>，自动推断出该变量属于什么类型。如果也没有初始值，则会被推断为<strong>any</strong>类型。</p>\n<h3 id=\"1-原有的基本数据类型\"><a href=\"#1-原有的基本数据类型\" class=\"headerlink\" title=\"1. 原有的基本数据类型\"></a>1. 原有的基本数据类型</h3><ul>\n<li><strong><code>string</code></strong>：字符串类型，注意<code>String</code>在<code>js</code>里已经有特殊意义了，而小写的<code>string</code>才是<code>Typescript</code>用来表示字符串的类型名称，即在注释变量类型为字符串时，使用小写的<code>string</code>，而不是大写的<code>String</code>，注意不要混淆了两者；<code>number</code>和<code>boolean</code>同理。</li>\n<li><strong><code>number</code></strong>：数字类型；</li>\n<li><p><strong><code>boolean</code></strong>：布尔类型；</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明变量类型，可以不赋初值，后续给num赋的值必须是number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">num</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">str</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;typescript&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 类型推断：TS会自动推断出bool的类型为boolean</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> bool = <span class=\"literal\">true</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"2-Array\"><a href=\"#2-Array\" class=\"headerlink\" title=\"2. Array\"></a>2. <code>Array</code></h3><p><code>Array</code>是数组类型，属于对象类型的一种。由于数组内会有数组成员，因此，在声明数组变量的时候，还要给数组成员添加类型注释，一般有两种常见方式：<strong><code>Type[]</code></strong>、<strong><code>Array&lt;Type&gt;</code></strong>。后者涉及<strong>泛型</strong>概念，将在后续介绍。其中，<code>Type</code>指代数组成员的类型，可以是基础类型，也可以是人为定义的类型 (关于数组的变形，元组类型，将在对象类型的章节介绍)。例如，要声明一个存放字符串的数组变量：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr1</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\"><span class=\"comment\">// 也可以像下面</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">arr2</span>: <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-object\"><a href=\"#3-object\" class=\"headerlink\" title=\"3. object\"></a>3. <code>object</code></h3><p>对象类型是我们平时更为常见的类型。在本篇只给出一些简单定义，后续篇章中会进行单独介绍。一个对象类型的变量可以通过键值对来存储多个数据。定义一个对象类型，可以简单地列出它的各个属性及属性的类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个包含name, age, gender属性的变量obj</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">gender</span>: <span class=\"string\">&quot;gg&quot;</span> | <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>之后给 obj 赋值时<strong>必须有且只能有</strong><code>name</code>，<code>age</code>，<code>gender</code>三个属性，且属性值应为相应的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 会报错,多了一个beauty属性,因此类型不合</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&quot;mm&quot;</span>, <span class=\"attr\">beauty</span>: <span class=\"number\">100</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错，缺少了gender属性</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 正确赋值</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>如果想要让某个属性变为可选项，则可以在定义对象类型时在属性名后使用问号”?”：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将gender定义为可选项</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">obj</span>: &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; gender?: <span class=\"string\">&quot;gg&quot;</span> | <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span>, <span class=\"attr\">gender</span>: <span class=\"string\">&quot;mm&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 也正确，因为gender是可选的</span></span><br><span class=\"line\">obj = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;yy&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">22</span> &#125;;</span><br></pre></td></tr></table></figure>\n<p>在某个属性被定义为可选项之后，一旦给该对象赋值时，没有传入该属性，它的取值便会成为<code>undefined</code> (注意<strong>这与一开始边定义<code>gender: &#39;gg&#39; | &#39;mm&#39; | undefined</code>不同</strong>。)</p>\n<p>使用可选项有些地方需要注意，如<strong>在函数的形参中</strong>存在可选项，此时由于<code>gender</code>属性可能为<code>undefined</code>，我们在使用时需要在该属性后面加上英文感叹号”<code>!</code>“进行<strong>非空断言</strong>，明确它不是<code>undefined</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">obj: &#123; name: <span class=\"built_in\">string</span>; age: <span class=\"built_in\">number</span>; gender?: <span class=\"string\">&quot;gg&quot;</span> | <span class=\"string\">&quot;mm&quot;</span> &#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 使用!进行非空断言</span></span><br><span class=\"line\">  obj.<span class=\"property\">gender</span>!.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-Union-Types-联合类型\"><a href=\"#4-Union-Types-联合类型\" class=\"headerlink\" title=\"4. Union Types 联合类型\"></a>4. <code>Union Types</code> 联合类型</h3><p><code>Union Types</code>是指使用 “<code>|</code>“符号来把多个类型联合成一个类型，一个联合类型的变量，其值可以是联合类型的任何一个子类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义a为联合类型，则a可以是string类型也可以是number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// a可以是string</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;union types&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// a也可以是number</span></span><br><span class=\"line\">a = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p>在<strong>函数的形参中</strong>使用联合类型时有一些注意事项，如在上面的例子中，<code>a</code> 的类型是<code>string | number</code>，此时<code>a</code>无法调用字符串方法，因为<code>a</code>有可能是一个<code>number</code>；同理，也不能直接调用数字类型的方法。当然，也不能直接赋值给<code>string</code>类型的变量或者<code>number</code>类型的变量。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// a可以是string</span></span><br><span class=\"line\">a = <span class=\"string\">&quot;union types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当开启了严格空值检查时，以下两次赋值都不合法</span></span><br><span class=\"line\">b = a;</span><br><span class=\"line\">c = a;</span><br></pre></td></tr></table></figure>\n<p>当然，如果每个子类型都具有共同的方法，则可以调用该共同的方法。例如：数组和字符串都具有<code>slice</code>方法，则联合类型<code>string | number[]</code> 的变量可以调用<code>slice</code>方法。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">func</span>(<span class=\"params\">obj: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以直接调用slice方法</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> a = obj.<span class=\"title function_\">slice</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-Type-Alias-类型别名\"><a href=\"#5-Type-Alias-类型别名\" class=\"headerlink\" title=\"5. Type Alias 类型别名\"></a>5. <code>Type Alias</code> 类型别名</h3><p>使用<strong><code>type</code></strong>关键字给你的类型起一个别名，以后就可以使用别名来指代这个类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"variable constant_\">ID</span> = <span class=\"built_in\">number</span> | <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用类型别名Point</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">p</span>: <span class=\"title class_\">Point</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"number\">123</span>,</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"number\">222</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6-Interfaces\"><a href=\"#6-Interfaces\" class=\"headerlink\" title=\"6. Interfaces\"></a>6. Interfaces</h3><p>通过关键字<strong><code>interface</code></strong>，来定义一个接口，实际是一个对象类型，用于规定一个对象的形状。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">x</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">y</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">printCoord</span>(<span class=\"params\">pt: Point</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;The coordinate&#x27;s x value is &quot;</span> + pt.<span class=\"property\">x</span>);</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;The coordinate&#x27;s y value is &quot;</span> + pt.<span class=\"property\">y</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">printCoord</span>(&#123; <span class=\"attr\">x</span>: <span class=\"number\">100</span>, <span class=\"attr\">y</span>: <span class=\"number\">100</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>简单说说<strong><code>interface</code>与类型别名的区别</strong>：</p>\n<ul>\n<li><code>interface</code> 可以通过 <strong><code>extends</code></strong>关键字来<strong>继承</strong>另一个<code>interface</code>，而<code>type</code>通过 <code>&amp;</code>符号来连接不同的对象属性；</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承Animal接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 继承了Animal接口的属性name</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">dog</span>: <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangcai&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 类型别名通过&amp;符号来拓展属性</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog2</span> = <span class=\"title class_\">Animal</span> &amp; &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>interface</code>可以进行拓展，<code>Type</code>不可以</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Animal</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 拓展interface的内容</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此时Dog类型包含name,skull,age三个</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">dog</span>: <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;wangcai&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明一个Dog2类型</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">skull</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会报错，Dog2重复了</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog2</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>interface</code>定义对象的形状，<code>type</code>不仅可以用于对象，也可以用于其它类型</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeA</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeB</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeC</span> = <span class=\"title class_\">TypeA</span> | <span class=\"title class_\">TypeB</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-Intersection-Types-交叉类型\"><a href=\"#7-Intersection-Types-交叉类型\" class=\"headerlink\" title=\"7. Intersection Types 交叉类型\"></a>7. <code>Intersection Types</code> 交叉类型</h3><p>用 <code>&amp;</code> 符号来连接多个类型，属于交叉类型 <code>A &amp; B</code> 的变量，既满足<code>A</code>的约束，又满足<code>B</code>的约束。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeA</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeB</span> = <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">boolean</span>&gt; | <span class=\"built_in\">number</span>;</span><br><span class=\"line\"><span class=\"comment\">// TypeC既满足TypeA又满足TypeB，因此TypeC是number</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">TypeC</span> = <span class=\"title class_\">TypeA</span> &amp; <span class=\"title class_\">TypeB</span>;</span><br><span class=\"line\"><span class=\"comment\">// a是number类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"title class_\">TypeC</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// b是TypeA类型，它的值是个string，因此不能赋值给a</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"title class_\">TypeA</span> = <span class=\"string\">&quot;123&quot;</span>;</span><br><span class=\"line\">a = b; <span class=\"comment\">// 报错</span></span><br></pre></td></tr></table></figure>\n<p>也可以用来拓展对象类型的属性：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> A = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> B = &#123;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span> | <span class=\"string\">&quot;女&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 类型C是既满足A又满足B，即C既包含A的所有属性，又包含B的所有属性，</span></span><br><span class=\"line\"><span class=\"comment\">// 从而实现属性拓展</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> C = A &amp; B;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>: C = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注意 <strong><code>&amp;</code> 和 | 的区别</strong>：”<code>&amp;</code>“可以合并多个对象类型的属性，使得到的新的对象类型包含其它所有类型的全部属性；”<code>&amp;</code>“可以获得多个类型之间的公共子类型；”<code>|</code>“可以联合多个类型，得到的新类型的值，只需满足其中一种子类型即可。</p>\n<h3 id=\"8-Literal-Types-字面量类型\"><a href=\"#8-Literal-Types-字面量类型\" class=\"headerlink\" title=\"8. Literal Types 字面量类型\"></a>8. <code>Literal Types</code> 字面量类型</h3><p>通过字面量来定义类型，字面量的值可以是任意一个类型的值，可以将多个不同类型的字面量进行组合，此时得到的变量上的方法无法进行合法调用，因为变量可能为其它不含该方法的类型（与联合类型同理）。因此需要进行类型精简或类型断言。注意在变量声明时进行类型注释了的才能被字面量类型约束，如果没有类型注释，则会按照类型推论的结果来判定类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义gender只能取值为 &#x27;男&#x27; 或 &#x27;女&#x27; 中的一种</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span> | <span class=\"string\">&quot;女&quot;</span> = <span class=\"string\">&quot;男&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// gender2经类型推论string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> gender2 = <span class=\"string\">&quot;男&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 多种类型字面量的组合</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">x</span>: <span class=\"string\">&quot;未知数&quot;</span> | <span class=\"number\">1</span> | &#123; <span class=\"attr\">y</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 严格类型检查时不能合法调用</span></span><br><span class=\"line\">x.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;知&quot;</span>) &lt;</span><br><span class=\"line\">  <span class=\"comment\">// 进行类型断言后可合法</span></span><br><span class=\"line\">  <span class=\"built_in\">string</span> &gt;</span><br><span class=\"line\">  x.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;知&quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"9-null-和-undefined-与-非空断言\"><a href=\"#9-null-和-undefined-与-非空断言\" class=\"headerlink\" title=\"9. null 和 undefined 与 非空断言\"></a>9. <code>null</code> 和 <code>undefined</code> 与 非空断言</h3><p>两个空值类型，和在<code>js</code>里的区别一致。开启/关闭严格空值检查会影响到空值类型的行为。当我们知道一个变量不会为空时，可以在该变量后使用英文感叹号 “<code>!</code>“ ，进行临时<strong>非空断言 （<code>Non-null Assertion</code>）</strong>。这点在函数中尤为重要。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyType</span> = <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> | <span class=\"literal\">undefined</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">value</span>: <span class=\"title class_\">MyType</span> = <span class=\"string\">&quot;I love China&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 对value进行非空断言</span></span><br><span class=\"line\">value!.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"10-Enums-枚举类型\"><a href=\"#10-Enums-枚举类型\" class=\"headerlink\" title=\"10. Enums 枚举类型\"></a>10. <code>Enums</code> 枚举类型</h3><p>枚举类型是一组被有意义地命名了的常量的集合。与其它类型本质上不同的是，其它的类型都只是类型，而枚举类型却是可以使用的值。<strong>通过<code>enum</code>关键字声明某个变量为枚举类型的值</strong>，使用枚举类型，可以让我们不去关注变量实际的值，而使用更有意义的名字来代表实际的值。例如，在表示性别时，我们可以简单地用数字 1 和 2 来表示 男 和 女。那么在实际使用中，我们需要知道到底是 1 代表男还是 1 代表女。当数据从前端传到后端，后端的小伙伴又需要去了解哪个数字代表哪个性别。这对我们来说就不太友好。所以，我们可以使用枚举类型来定义一组表示性别的常量，之后使用时，只需取常量的名字即可。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Gender</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">male</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"attr\">female</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>枚举类型包括数字型枚举、字符串型枚举、异构枚举等等。此处只简要了解一下枚举类型的的存在，后续会写一篇枚举类型的深入。</p>\n<h3 id=\"11-any\"><a href=\"#11-any\" class=\"headerlink\" title=\"11. any\"></a>11. <code>any</code></h3><p><code>any</code>可以指代任何类型，可以被赋值给任意类型的变量。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给变量anyscript一个any类型，其值为数字123</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">anyscript</span>: <span class=\"built_in\">any</span> = <span class=\"number\">123</span>;</span><br><span class=\"line\"><span class=\"comment\">// 给变量typescript一个string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">typescript</span>: <span class=\"built_in\">string</span> = <span class=\"string\">&quot;typescript&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 赋值操作后，typescript变成了123，其类型发生了改变</span></span><br><span class=\"line\">typescript = anyscript;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 而编译器会认为typescript变量为string类型，且允许我们调用string类型的方法</span></span><br><span class=\"line\">typescript.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 而事实上此时变量typescript的值已经变为了数字123，调用string的方法就会</span></span><br></pre></td></tr></table></figure>\n<p>这个看起来很便捷的<code>any</code>类型，在这种时候就会引发问题，造成类型污染。因此，我们应该避免使用<code>any</code>，以免走进<code>Anyscript</code>的误区。</p>\n<h3 id=\"12-unknown与类型断言\"><a href=\"#12-unknown与类型断言\" class=\"headerlink\" title=\"12. unknown与类型断言\"></a>12. <code>unknown</code>与类型断言</h3><p><code>unknown</code>用来表示未知类型，和<code>any</code>相似，它的值可以是任何类型。不同的是，如果一个变量是<code>unknown</code>类型，那么它在被明确为某个确切的类型之前，不能调用任何方法，也不能被赋值给其它变量。你可以使用<mark><strong>类型断言</strong></mark>来<strong>临时</strong>人为明确一个 unknown 变量的确切类型。毕竟<strong>你永远比<code>Typescript</code>知道的多</strong>！类型断言一般有两种方式：使用 <code>a as Type</code> 或者 在需要进行类型断言的变量前使用尖括号：<code>&lt;Type&gt;a</code>，来明确变量<code>a</code>为<code>Type</code>类型。注意类型断言是临时的，因此它不会改变原来<code>unknown</code>变量的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个unknown变量a，一个字符串变量b</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>: <span class=\"built_in\">unknown</span> = <span class=\"string\">&quot;I am unknown type&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 这里会报错，因为a为unknown类型，而且并没有明确它的具体类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 不能被赋值给字符串变量b，哪怕a本身实际的值为字符串</span></span><br><span class=\"line\">b = a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用类型断言来明确a的具体类型为字符串string，</span></span><br><span class=\"line\"><span class=\"comment\">// 之后便可以赋值给字符串b</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用as进行类型断言，可以用括号将其整体包裹起来，以进行对断言之后的变量a的操作</span></span><br><span class=\"line\">b = a <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\">b = (a <span class=\"keyword\">as</span> <span class=\"built_in\">string</span>) + <span class=\"string\">&quot;!&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用&lt;Type&gt;a的形式进行类型断言</span></span><br><span class=\"line\">b = &lt;<span class=\"built_in\">string</span>&gt;a;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 之后 a 的类型依然是unknown</span></span><br></pre></td></tr></table></figure>\n<p>也许你会觉得使用<code>unknown</code>类型有些繁琐。但相比起<code>any</code>类型容易引发的错误，<code>unknown</code>类型的使用足够安全。因此，如果有需要使用不明确的类型时，应该首选<code>unknown</code>而不是<code>any</code>。毕竟谁也不愿意，一杯茶，一个圈，一个<code>BUG</code>改一天(甚至还在排查错误原因)。</p>\n<h3 id=\"13-never-和-void\"><a href=\"#13-never-和-void\" class=\"headerlink\" title=\"13. never 和 void\"></a>13. <code>never</code> 和 <code>void</code></h3><p><code>void</code>用于表示函数返回空值；<code>never</code>用于表示不该使用的值或者函数不应该有返回值，在我们平常的工作中<code>never</code>的应用场景较少。</p>\n<h3 id=\"14-不常用的类型\"><a href=\"#14-不常用的类型\" class=\"headerlink\" title=\"14.不常用的类型\"></a>14.不常用的类型</h3><p><strong><code>Bigint</code>和<code>Symbol</code></strong>是<code>ES6</code>之后加入的基本数据类型，目前在日常工作中的使用并不多见。<code>TS</code>中的这两种类型和<code>JS</code>中一致。</p>\n<ul>\n<li><p><strong><code>bigint</code></strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用BigInt函数来创建一个bigint类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">oneHundred</span>: <span class=\"built_in\">bigint</span> = <span class=\"title class_\">BigInt</span>(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用字面量语法 数字 + n 来创建bigint类型的变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">anotherHundred</span>: <span class=\"built_in\">bigint</span> = <span class=\"number\">100n</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>Symbol</code></strong></p>\n<p><code>Symbol</code>是<code>ES6</code>之后新增的一种基本数据类型，每个<code>Symbol</code>类型的变量，其值都是唯一的，即使传入相同的参数，返回的结果也永远不会相等。一般使用<code>Symbol</code>函数来创建。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Symbol函数创建Symbol类型的变量/常量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> first1 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> first2 = <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">first1 === first2; <span class=\"comment\">// 永远是false</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类型基础的内容就介绍到这里啦，下一篇将着重介绍在函数中使用各种类型时需要注意的问题，例如如何进行类型精确。如果文章描述有不妥之处，恳请不吝指出，我们下一篇再见！</p>\n"},{"layout":"post","title":"Typescript 系列基础篇(二) TS 中的函数","date":"2022-03-01T16:46:00.000Z","updated":"2022-03-01T16:46:00.000Z","keywords":["前端","TypeScript","TS","类型"],"archive":"TypeScript","description":"详细介绍TypeScript中的函数。","swiper_index":9,"_content":"\n# Typescript 系列基础篇(二) TS 中的函数\n\n函数在我们日常代码中占有绝对重要的地位，深入了解 TS 中函数的使用对我们的学习十分有利。如果你还不了解**泛型函数**、**函数签名**、**函数重载**，那么阅读本文将让你对 TS 中的函数有一个更加细致的理解，必能有所收获。\n\n## 一、返回值\n\n我们在声明一个函数 / 方法时，可以在括号后加上类型注释，以约束其返回值的类型，如果没有明确约束返回值的类型，则将其推论为 any 类型。**除了`void`和`any`之外，其它所有的类型都应该有相应类型的返回值。**\n\n- 返回值如果不是约束的类型，或者约束了类型却没有`return`相应的类型，则会报错：\n\n```ts\n// 声明变量时由初始值'cc'进行类型推论，得出_name为string类型\nlet _name = \"cc\";\n\n// 会报错，约束了返回值的类型，却没有return相应的类型,\nfunction getName1(): string {}\n\n// 约束了返回值类型只能时string\nfunction getName1(): string {\n  return _name;\n}\n\n// 定义一个number类型的变量_name2\nlet _name2 = 18;\n// 约束函数返回值类型为string\nfunction getName2(): string {\n  // 会报错，返回值应该是string类型，而_name2是number类型\n  return _name2;\n}\n```\n\n- 当我们**实际的返回值有可能不是约束的类型时**，也是不正确的：\n\n```ts\nlet _name3: string | number = \"cc\";\nfunction getName3(): string {\n  // 不合法的返回值，因为_name3有可能是number类型，而返回值只能是string类型\n  return _name3;\n}\n```\n\n- 这种情况**尤其容易发生在字面量类型上**：\n\n```ts\n// _name4经类型推论判定为string类型\nlet _name4 = \"cc\";\n// 约束返回值只能为 'cc' | 'yy' 类型\nfunction getName4(): \"cc\" | \"yy\" {\n  // 会报错，虽然_name4的值为'cc'，但它是string类型，不符合要求\n  // return _name4\n\n  // 可以用类型断言来解决，后面我们将介绍类型缩减来解决\n  return _name4 as \"cc\";\n}\n```\n\n- 函数的返回值为空时，使用`void`类型，此时可以`return undefined`，`return null`，也可以不写`return`，会默认返回`undefined`：\n\n```ts\nlet _name = \"cc\";\n\n// 返回空值undefined\nfunction setName(name): void {\n  _name = name;\n}\n\nlet a = setName(\"yy\"); // a为undefined\n```\n\n## 二、参数\n\n在`TS`中我们往往需要对函数的参数添加类型注释，如果不添加类型注释，则该参数将被类型推论为`any`。`TS`不仅约束了传参时实参的类型，也约束了在函数内部形参的类型。\n\n```ts\nlet _name = \"cc\";\n// 定义一个接收string类型，无返回值的函数\nfunction setName2(name: string): void {\n  _name = name;\n}\n```\n\n有时候，我们的参数比较复杂，例如多种类型的组合：`string | number`，这时候我们需要进行**类型缩减**，以防在`return`或参数调用方法等情况下出现问题。\n\n```ts\nlet _name = \"cc\";\n\n// 错误示例\nfunction setName3(name: string | number): void {\n  // 参数name有可能是number，因此不能直接赋值\n  _name = name;\n}\n\n// 正确示例\nfunction setName3(name: string | number): void {\n  // name是string类型\n  if (typeof name === \"string\") {\n    _name = name;\n  } else {\n    // name是number类型，可强制转化\n    _name = String(name);\n  }\n}\n```\n\n有时候，某个参数不是必须传的，就可以在形参后加上英文问号\"`?`\"来表示**可选参数**，如果调用函数时不传该参数，则该参数为`undefined`。因此，在函数体内部，该参数有可能是`undefined`，也需要进行类型缩减。\n\n```ts\nlet userInfo: { name: string; age: number; gender: 1 | 2 | 3 };\nfunction setUserInfo(name: string, age: number, gender?: 1 | 2 | 3) {\n  if (gender === undefined) {\n    userInfo.gender = 3;\n  } else {\n    userInfo.gender = gender;\n  }\n}\n```\n\n## 三、函数类型表达式\n\nTS 中可以使用箭头函数的形式来定义一个函数类型：**`(a: Type1, b: Type2, ...) => TypeN`**表示**接收的参数名称为`a`, `b` , ...，类型分别为`Type1`, `Type2`,...，返回值类型为`TypeN`的函数。**\n\n```ts\n// 定义了类型Fn1是一个函数，接收一个string类型的name和number类型的age为参数，\n// 返回一个sttring类型的值\ntype Fn1 = (name: string, age: number) => string;\n\n// 给fn1添加Fn1类型，则参数和返回值都需要满足Fn1的约束\n// 已经由Fn1约束了类型，因此无需再对参数和返回值进行类型注释\nconst fn1: Fn1 = function (name, age) {\n  return \"I am\" + name;\n};\n\n// 也可以使用箭头函数\nconst fn11: Fn1 = (name, age) => \"I am\" + name;\n```\n\n在声明对象的方法时，可以很方便地使用函数类型表达式：\n\n```ts\n// 定义一个User接口，其中包含interest方法，需要传入一个string类型的参数，\ninterface User {\n  name: string;\n  age: number;\n  interest: (something: string) => void;\n}\n\nconst user: User = {\n  name: \"cc\",\n  age: 18,\n  interest(something) {\n    // ...\n  },\n};\n```\n\n## 四、类型缩减\n\n在函数中，我们会经常遇到形参是组合类型或可选参数的情况，这时候我们就需要进行类型缩减，对该参数的类型抽丝剥茧，从而在每个具体的子类型时做相应的操作，防止类型出错。在该过程中，越往后该参数可能的类型范围就越小。\n\n主要有 **控制流分析**：`if-else` 或 `switch-case` 。\n\n### (一) 控制流分析\n\n通过 if，else 等控制流语句来逐步缩减参数的类型范围。\n\n- **`typeof`** 类型守卫\n\n在下面的例子中，我们使用了**`typeof`** 这个 **`type gurads`** 类型守卫，`typeof`会返回一些列固定的字符串，我们根据这些字符串来减少类型范围。\n\n```ts\ntype Fn = (name?: string | number) => string;\n\nconst fn: Fn = function (name) {\n  // 类型缩减\n  if (name === undefined) {\n    return \"default name\";\n    // 接下来只能是string或者number\n  } else if (typeof name === \"string\") {\n    return name;\n    // 接下来只能是number\n  } else {\n    return String(name);\n  }\n};\n```\n\n**`typeof` 的返回值**：\n\n1. **\"`string`\"**\n\n2. **\"`numbrt`\"**\n\n3. **\"`bigint`\"**\n\n4. **\"`boolean`\"**\n\n5. **\"`symbol`\"**\n\n6. **\"`undefined`\"**\n\n7. **\"`object`\"**\n\n8. **\"`function`\"**\n\n可以看到，**`typeof`无法检测出`null`**这个空值，`typeof null`会返回\"`object`\"，因此，我们可以辅以“`truthiness`”检测进行真值校验。\n\n- **`Truthiness narrowing`** 真值校验\n\n  利用`true`和`false`来进行真值条件判断，从而达到类型缩减的目的。\n\n```ts\ntype Fn = (name?: string) => string;\n\nconst fn2: Fn = function (name) {\n  // 真值校验\n  if (name) {\n    return name;\n  } else {\n    return \"default name\";\n  }\n};\n```\n\n**下面列举出使用 `if` 会得到 `false` 的值**，根据官方文档的描述，除了以下列举的值之外，其它的值都会返回`true`。\n\n1. **`0`**\n\n2. **`NaN`**\n\n3. **\"\"** 空字符串\n\n4. **`0n`** 数字`0` + 字母`n`，是`bigint`类型的 `0`\n\n5. **`null`**\n\n6. **`undefined`**\n\n如果我们想把任何值转化为相应的`boolean`类型，可以利用布尔否定符\"`!`\"，任何值经过双重否定之后都会转化为相应的布尔值。\n\n```ts\n!!0; // false\n!!NaN; // false\n!!\"\"; // false\n!!\"name\"; // true\n```\n\n- **`Equality narrowing`** 等值校验\n\n  利用已知条件进行等值校验，从而 TS 可以推断出相应的参数类型，达到类型缩减的目的。\n\n- **`in` 操作符**\n\n  使用表达式 **`\"value\" in x`**，来判断对象里是否存在某个属性，来进行类型缩减。\n\n```ts\ntype Fish = {\n  swim: () => void;\n};\n\ntype Dog = {\n  bark: () => void;\n};\n\nfunction doSomething(obj: Fish | Dog) {\n  // 有bark方法的则是Dog\n  if (\"bark\" in obj) {\n    console.log(\"汪汪汪\");\n  } else {\n    // 否则是Fish\n    console.log(\"I am Fish\");\n  }\n}\n```\n\n- 使用 **`instanceof`**\n\n  用于`Array`，`Date`等引用类型。\n\n### (二) 类型预言\n\n想要定义一个自定义的类型守卫，我们通常可以使用一个返回值是类型预言的函数。\n\n类型预言格式：**`param is Type`**，随后我们可以用该函数来进行类型缩减。\n\n```ts\ntype Fish = {\n  swim: () => void;\n};\n\ntype Dog = {\n  bark: () => void;\n};\n\n// 我可能不是人，才是真的狗\nfunction isDog(obj: Fish | Dog): obj is Dog {\n  return \"bark\" in obj;\n}\n\nlet animal: Fish | Dog = {\n  swim: () => console.log(\"I am Fish\"),\n};\n// 进行类型缩减\nif (isDog(animal)) {\n  animal.bark();\n} else {\n  animal.swim();\n}\n```\n\n注意如果`animal`的的方法不是`swim`而是`bark`，则`TS`将会进行类型推论，得到这个`animal`是`Dog`，便已经排除了`Fish`类型。此时，在我们的 if 分支里包含了`animal`是`Dog`的情况，而在`else`分支里 `animal` 就是`never`类型了。\n\n### (三) 解析联合类型\n\n在上面的例子中，我们分析了一些较为简单的类型。但是实际上，稍微复杂些的类型也是非常常见的。在官方文档中，给了一个例子：我们定义一个用于表示形状的接口`Shape`，用 `kind` 属性来表示是圆形`circle`还是正方形`square`（字面量联合类型，防止单词拼写错误），圆形仅需要一个半径`radius`属性，正方形仅需要边长属性 `side_length`。因此我们使用可选属性，如果是`circle`，则有`radius`属性而没有`side_length`属性，反之同理。\n\n```ts\ninterface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  side?: number;\n}\n```\n\n接下来我们需要一个求面积的函数，参数为`Shape`类型。由于参数`radius`和`side`都是可选的，因此都可能为空值。按照常理，我们会根据 `kind` 属性的值来判断是圆形还是方形，从而使用不同的面积公式：\n\n```ts\nfunction getArea(obj: Shape) {\n  if (obj.kind === \"circle\") {\n    // 圆形面积，会报错，obj.radius可能是空的\n    return Math.PI * obj.radius ** 2;\n  } else {\n    // 方形面积，会报错，obj.side可能是空的\n    return obj.side ** 2;\n  }\n}\n```\n\n但是此时你会发现，在严格空值检查下，这段代码会报错。因为`radius`和`side`都是可选属性，因此它们都可能为空值。当然，这里我们可以使用**非空断言**，但是也许我们可以用更合理的方式：给`circle`和`square`定义不同的接口，毕竟它们是两个完全不同的东西。此时我们的`getArea`函数就不会再出现上述的问题。\n\n```ts\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  side: number;\n}\n\ntype Shape = Circle | Square;\n\nfunction getArea(obj: Shape) {\n  if (obj.kind === \"circle\") {\n    // 是Circle，必然有radius属性\n    return Math.PI * obj.radius ** 2;\n  } else {\n    // 是Square，必然有side属性\n    return obj.side ** 2;\n  }\n}\n```\n\n通过合理设计接口，能使问题得到更加优雅的解决方案。\n\n### (四) `never` 类型\n\n当我们进行类型缩减时，一旦所有可能的类型都被缩减完了，如果继续缩减，例如再加一个`else`分支，我们就会得到一个**`never`**类型。`TS`使用`never`类型来告诉我们，当前的情况是`tan ( Math.PI / 2 )`。**`never`类型可以被赋值给任意类型，但是任意其它类型都不能被赋值给`never`类型(除了`never`本身之外)**。这个特性常用于穷举校验。\n\n### (五) 穷举校验\n\n我们在进行类型缩减时，有时候无法考虑到所有的情况。因此，可以使用穷举校验，为了避免有类型被遗漏。穷举校验利用了上述`never`类型的特性，在控制流的最后一个分支里，(如`switch`语句的`default`分支，`if` 语句末尾的`else`分支)，尝试把 进行类型缩减的参数 赋值给一个 `never` 类型的变量。由于只有`never`类型可以被赋值给`never`类型，一旦有我们考虑不周全，参数有类型遗漏了，那么在最后的分支里，该参数的类型就不会是`never`，无法被赋值给`never`类型的变量，`TS`便会报错来提示我们。而如果我们考虑完了所有的类型情况，则该参数在最后一个分支里便是`never`类型，可以被赋值给`never`类型的变量，`TS`就不会报错。因此，通过穷举检查的方式，我们只需要关注最后一个分支里是否有相应的报错，就能知晓我们是否考虑到了所有的类型情况。\n\n```ts\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  side: number;\n}\n\ninterface Triangle {\n  kind: \"triangle\";\n  side: number;\n}\n\ntype Shape = Circle | Square;\n\nfunction getArea(obj: Shape) {\n  if (obj.kind === \"circle\") {\n    // 是Circle，必然有radius属性\n    return Math.PI * obj.radius ** 2;\n  } else if (obj.kind === \"square\") {\n    // 是Square，必然有side属性\n    return obj.side ** 2;\n  } else {\n    // 在最后一个分支进行穷举校验\n    const _isExhaustive: never = obj;\n    return _isExhaustive;\n  }\n}\n```\n\n## 五、函数进阶\n\n前面已经介绍了函数类型表达式，下面我们来了解下更多关于函数的知识。\n\n### (一) 函数签名\n\n1. <mark>**调用签名**</mark>\n\n函数也是一种对象，可以有自己的属性。但是使用函数类型表达式的时候无法同时声明函数的属性。**调用签名描述了一种函数类型，包含了函数的属性、调用函数时应传递的参数以及返回值**。使用调用签名可以很方便地解决函数类型表达式的不足。\n\n```ts\n// 声明调用签名，调用签名是一种类型，其名字可以任意取\ntype CallSignatureFn = {\n  // 函数的属性\n  grade: string;\n  // 函数的形参和返回值\n  (arg1: number, arg2: string): string;\n};\n\nfunction logInfo(fn: CallSignatureFn) {\n  console.log(fn.grade + \" returned \" + fn(6, \"A\"));\n}\n```\n\n**调用签名 vs 函数类型表达式：**\n\n- 函数类型表达式十分简洁\n- 调用签名可以声明函数的属性\n- 调用前面在 参数列表 和 返回值 之间使用冒号 \"`:`\" ，而函数类型表达式使用箭头 \"`=>`\"\n\n2. <mark>**构造签名**</mark>\n\n函数除了可以被直接调用之外，还可以使用 **`new`** 操作符来调用。构造签名描述了函数在使用 `new` 操作符调用时的传参和返回值。\n\n```ts\ntype ConstructSignatureFn = {\n  new (_type: string, _num: number): string[];\n};\n\nfunction fn(ctor: ConstructSignatureFn) {\n  return new ctor(\"hello\", 2);\n}\n```\n\n3. <mark>**混合签名**</mark>\n\n对于有些比较特殊的函数比如`Date`，直接调用和使用`new`操作符调用得到的结果是一样的，这种函数类型可以使用混合签名，将调用签名和构造签名写在一个类型对象里。\n\n```ts\ninterface CallOrConstruct {\n  new (s: string): Date;\n  (n?: number): number;\n}\n```\n\n4. <mark>**重载签名**</mark> 和 <mark>**实现签名**</mark>\n\n将在**函数重载**章节介绍。\n\n### (二) 泛型函数\n\n1. **基础**\n\n此前，我们在声明函数时，会直接给 **形参** 和 **返回值** 添加类型注释，在调用时传入相应类型的值。以这样的形式声明的函数，其传参和返回值的类型都是固定的。那有没有什么方式，能让我们调用函数时传参的类型能灵活多样呢？**泛型函数**正是我们想要的。\n\n<mark>**泛型函数**</mark>：高度抽象化的类型。在声明函数时将类型抽象化( 可以是多个类型 )：在函数名后面加上尖括号，里面为抽象化的类型名 (例如：**`<T, K, U, ... >`，其中 `T, K, U `是<mark>类型参数</mark>，各代表一种类型，至于具体是什么类型，在调用函数时由传入的类型决定。**)，在调用函数时再具体化，传入实际的类型，一旦传入类型，所有出现该泛型的地方，都会替换为这个传入的类型。如果没有传入明确的类型，则`TS`会进行类型推论，自动判断`Type`的类型。(`T，K，U `等可以用任何你喜欢的词来替代，不过用这些字母会显得比较简洁。)\n\n```ts\n// <Type>为泛型，Tpye任意代表一种类型，\n// 在调用函数时，需要传入实际的类型，一旦传入类型，所有出现Type的地方都会替换\nfunction firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n```\n\n调用函数时可以传入任意实际类型：\n\n```ts\n// 类型推论判断Type为string\nconst s = firstElement([\"a\", \"b\", \"c\"]);\n// 类型推论判断Type为number\nconst n = firstElement([1, 2, 3]);\n// 类型推论判断Type为undefined类型\nconst u = firstElement([]);\n```\n\n泛型的概念将类型进行了抽象化，使得函数可以在调用时传入需要的类型，从而增加了函数的通用性。泛型的名字 Type 可以随意取，注意相同的泛型代表着同一种类型。\n\n2. **泛型约束**\n\n我们知道，泛型可以定义多个，例如`<Type1, Type2, ...>`，每个泛型都代表着一种类型，它们可以相同，也可以不同，具体分别是什么类型，都由该函数调用时传入的类型来决定。然而，到目前为止，我们定义的泛型都是和其它类型无关的。很多时候，我们会希望给泛型做一定的约束，让它只能是某些类型之中的一种。这时候，可以使用**`extends`**关键字，来实现泛型约束。\n\n```ts\ninterface Person {\n  name: string;\n  age: number;\n}\n// 泛型T继承了Person类型，因此T必须有name和age属性\nfunction getInfo<T extends Person>(user: T): string {\n  return user.name;\n}\n\nconst user1 = { age: 16 };\nconst user2 = { name: \"cc\", age: 18, gender: 1 };\n// 报错，user1中没有name属性，不符合类型要求\ngetInfo(user1);\n// ok\ngetInfo(user2);\n```\n\n3. **指定类型参数**\n\n在前面的例子中，我们都没有手动传入类型，来指定泛型的实际类型，而是由`TS`自动进行类型推论得出的。有一说一，`TS`确实够机智。不过有些时候，由于泛型太抽象，仅仅靠`TS`的类型推论，可能无法得出正确的结果。这时候，我们可以在调用函数时手动传入类型，来指定类型参数。毕竟**我们永远比`TS`知道的更多**。下面来看一个官方的示例：\n\n```ts\nfunction combine<Type>(arr1: Type[], arr2: Type[]): Type[] {\n  return arr1.concat(arr2);\n}\n\n// 会报错，TS根据第一个参数数组[1,2,3]，将Type推论为number，\n// 于是第二个字符串数组就无法通过类型校验, 因为Type[]此时应为number[]\ncombine([1, 2, 3], [\"a\", \"b\", \"c\"]);\n```\n\n这种情况下，便需要指定参数类型：\n\n```ts\nconst arr = combine<string | number>([1, 2, 3], [\"hello\"]);\n```\n\n4. **三个小细节写好泛型函数**\n\n- 尽可能少地使用泛型约束，让 TS 进行类型推论\n- 尽可能少地使用类型参数\n- 不要将没有重复使用的类型作为类型参数\n\n### (三) 函数重载\n\n1. **函数的可选参数**\n\n在前面的类型缩减章节中，我们知道，函数可以有可选参数，调用函数时，如果没有给可选参数传值，那么该参数的值便是`undefined`, 这容易引发意想不到的错误。在函数中，我们可以通过**真值校验**来解决，也可以**给参数一个默认值**来解决 (同`JS`)。但是，如果一个函数的参数中有回调函数，且该**回调函数也有可选参数，则尤其容易引发错误**。偷个懒，继续搬运官方的栗子：\n\n```ts\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    // 如果调用callback时没有传入index参数，则index为undefined\n    callback(arr[i]);\n  }\n}\n\nmyForEach([1, 2, 3], (a, i) => {\n  // 即此处的i为undefined，undefined上没有toFixed方法，便会报错\n  console.log(i.toFixed());\n});\n```\n\n可见，使用可选参数不仅处理起来会有些麻烦，而且容易引发错误。因此，函数当有有限个不定数量或不同类型的参数时，更好的方案是**函数重载**。\n\n2. <mark>**函数重载**</mark>\n\n规定函数的形参与返回值的是<mark>**重载签名**</mark>，可以有多个重载签名；\n\n兼容多个重载签名并进行逻辑处理的是<mark>**实现签名**</mark>，由于要兼容多套重载签名，因此会出现可选参数；\n\n我们可以通过编写多套**重载签名**，来规定函数的不同调用方式 (传入不同数量或不同类型的参数以及不同类型的返回值)。然后通过**实现签名**来进行兼容的逻辑处理。\n\n```ts\n// 定义两套重载签名\n// 允许调用函数时只传入name参数\nfunction setUserInfo(name: string): boolean;\n// 允许调用函数时传入name, age, gender三个参数\nfunction setUserInfo(name: string, age: number, gender: 1 | 2): string;\n// 实现签名，统一处理逻辑\nfunction setUserInfo(name: string, age?: number, gender?: 1 | 2) {\n  // 真值校验，由于两套重载签名规定，调用函数时要么传入三个参数\n  // 因此，传入了age，则必定也传入了gender\n  if (age) {\n    return `我叫 ${name}, 今年 ${age} 岁啦！`;\n  } else {\n    return false;\n  }\n}\n\n// 传入一个参数，正确\nsetUserInfo(\"cc\");\n// 传入三个参数，正确\nsetUserInfo(\"cc\", 18, 2);\n// 传入两个参数，报错，因为没有定义两个参数的重载签名\nsetUserInfo(\"cc\", 18);\n```\n\n可以看到，实现签名 和 我们之前普通地使用可选参数的处理很相似，区别也很明显：尽管`age`和`gender`都是可选参数，但是通过重载签名，规定了`age`和`gender`必须同时传入或同时都不传，即规定了该函数的调用只能传入一个或三个参数。如果不进行函数重载，那么将多出一种只传入`name`和`age`这两个参数的情况要进行处理。可见，通过函数重载来规定函数不同的调用方式，可以使逻辑与结构更加清晰优雅。当我们进行函数重载时，一定要**注意让实现签名兼容所有的重载签名(参数和返回值都要兼容处理)**。\n\n### (四) 在函数中声明 this\n\n一般而言，`TS`会如同`JS`一样，自动推断 this 的指向。`JS`中不允许`this`作为参数，不过`TS`允许我们在函数中声明`this`的类型，这种情况尤其在函数的回调参数`callback`中较为常见。\n\n```ts\n// filterUser个方法，其后是其调用签名\ninterface Data {\n  filterUsers(filter: (this: User) => boolean): User[];\n}\n```\n\n起初这个官方的示例我看了好几分钟没看懂，后来发现它的`filterUsers`就是一个函数的调用签名，੯ੁૂ‧̀͡u\\。这里声明了`this`是`User`类型，如果在该方法执行时，`callback`中的`this`不是`User`类型，`TS`就会提示我们代码写的有误。在函数中声明`this`时，需要注意一点是，虽然在构造签名中，`callback`使用箭头形式，但是**在我们实际调用该方法时，`callback`不能使用箭头函数，只能用`function`关键字**。毕竟众所周知，箭头函数没有自己作用域的`this`，它使用的的`this`同定义箭头函数时的上下文的 this。\n\n### (五) 其它的类型\n\n- **`void`**\n\n  函数的返回值设置为`void`，则返回空值。**`void`不等同于`undefined`**。\n\n  返回值为`void`类型的函数，并不一定不能写`return` 语句。**如果是通过函数表达式、函数签名等定义的函数类型，该类型的实例函数体中可以有`return`语句，并且后面可以接任意类型的值，只不过它的返回值会被忽略**。如果我们把这样的函数调用结果赋值给某个变量，则该变量的类型依然是`void`。\n\n  ```ts\n  type voidFunc = () => void;\n\n  const f1: voidFunc = () => {\n    // 可以return任意类型的值，但是会被忽略\n    return true;\n  };\n\n  // v1 的类型依然是void\n  const v1 = f1();\n  ```\n\n  但是，**如果是通过字面量声明函数的返回值为`void`，则函数体内不能有`return`语句**。虽然官方文档里这么说，下面的栗子也摘自官方文档，但是我的`vs code`编辑器里这样写并没有报错 ？。\n\n  ```ts\n  function f2(): void {\n    // @ts-expect-error\n    return true;\n  }\n\n  const f3 = function (): void {\n    // @ts-expect-error\n    return true;\n  };\n  ```\n\n- **`object`**\n\n  是小写的`object`，而不是大写的`Object`。这两者意义不同。\n\n- **`unknown`**\n- **`never`**\n\n  有的函数永远没有返回值，例如在函数体内 `return` 之前抛出错误。`never`类型也常用来做穷举校验。\n\n- **`Funtion`**\n\n  这些类型基本都在[# `Typescript`系列：基础篇(一)][2022年了，了解一下 typescript系列：基础篇(一)？ - 掘金](https://juejin.cn/post/7069940384515751973)介绍过了，此处不再赘述。\n\n### (六) 剩余参数\n\n- 我才发现，原来**`parameters`表示形参**，**`arguments`表示实参**。\n- **剩余形参**\n\n剩余形参的使用基本同`JS`一致，偷个懒直接拿官方栗子：\n\n```ts\n// 倍乘函数，第一个参数为倍数，会返回后续所有参数各自乘以倍数而形成的数组\nfunction multiply(n: number, ...m: number[]) {\n  return m.map((x) => n * x);\n}\n// a 的值\nconst a = multiply(10, 1, 2, 3, 4);\n```\n\n- **剩余实参**\n\n剩余实参常用于函数调用时对传递的参数 (数组、对象等) 进行展开，然而这里容易踩坑。以数组为例：\n\n```ts\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2);\n```\n\n数组的`push`可以接收无限制个参数，因此可以直接展开参数`arr2`。但是有的方法只能接收指定数量的参数，而在一般情况下，`TS`认为数组的是可变的。如果直接对这类方法的进行数组参数的展开，会引起报错，因为`TS`会认为数组里的成员数量可能是`0`个或者多个，不符合该方法只接受指定数量的参数的要求。\n\n```ts\n// 虽然数组现在只有两个成员，但是它的类型被推断为 number[]，\n// 即args数组可能会发生变化，可能有0个或多个参数\n// 而Math.atan2方法只接收两个参数，因此会报错\nconst args = [8, 5];\nconst angle = Math.atan2(...args);s);\n```\n\n解决的办法也很简单，使用 **`as const`**将数组的类型断言为不可变类型。此时的数组便被推论为元组类型。有关元组类型的内容，会在下一篇 **对象类型篇**中介绍。\n\n```ts\n// 此时args长度不可变，被推论为元组类型\nconst args = [8, 5] as const;\n// ok\nconst angle = Math.atan2(...args);\n```\n\n- **形参结构**\n\n没啥好说的，直接上官方示例。\n\n```ts\ntype NumberABC = { a: number; b: number; c: number };\nfunction sum({ a, b, c }: NumberABC) {\n  console.log(a + b + c);\n}\n```\n","source":"_posts/TypeScript 系列/基础篇/Typescript系列  基础篇 (二) TS中的函数.md","raw":"---\nlayout: post\ntitle: Typescript 系列基础篇(二) TS 中的函数\ndate: 2022-03-02 00:46\nupdated: 2022-03-02 00:46\nkeywords:\n  - 前端\n  - TypeScript\n  - TS\n  - 类型\ntags:\n  - TypeScript\n  - 前端\narchive: TypeScript\ndescription: 详细介绍TypeScript中的函数。\nswiper_index: 9\n---\n\n# Typescript 系列基础篇(二) TS 中的函数\n\n函数在我们日常代码中占有绝对重要的地位，深入了解 TS 中函数的使用对我们的学习十分有利。如果你还不了解**泛型函数**、**函数签名**、**函数重载**，那么阅读本文将让你对 TS 中的函数有一个更加细致的理解，必能有所收获。\n\n## 一、返回值\n\n我们在声明一个函数 / 方法时，可以在括号后加上类型注释，以约束其返回值的类型，如果没有明确约束返回值的类型，则将其推论为 any 类型。**除了`void`和`any`之外，其它所有的类型都应该有相应类型的返回值。**\n\n- 返回值如果不是约束的类型，或者约束了类型却没有`return`相应的类型，则会报错：\n\n```ts\n// 声明变量时由初始值'cc'进行类型推论，得出_name为string类型\nlet _name = \"cc\";\n\n// 会报错，约束了返回值的类型，却没有return相应的类型,\nfunction getName1(): string {}\n\n// 约束了返回值类型只能时string\nfunction getName1(): string {\n  return _name;\n}\n\n// 定义一个number类型的变量_name2\nlet _name2 = 18;\n// 约束函数返回值类型为string\nfunction getName2(): string {\n  // 会报错，返回值应该是string类型，而_name2是number类型\n  return _name2;\n}\n```\n\n- 当我们**实际的返回值有可能不是约束的类型时**，也是不正确的：\n\n```ts\nlet _name3: string | number = \"cc\";\nfunction getName3(): string {\n  // 不合法的返回值，因为_name3有可能是number类型，而返回值只能是string类型\n  return _name3;\n}\n```\n\n- 这种情况**尤其容易发生在字面量类型上**：\n\n```ts\n// _name4经类型推论判定为string类型\nlet _name4 = \"cc\";\n// 约束返回值只能为 'cc' | 'yy' 类型\nfunction getName4(): \"cc\" | \"yy\" {\n  // 会报错，虽然_name4的值为'cc'，但它是string类型，不符合要求\n  // return _name4\n\n  // 可以用类型断言来解决，后面我们将介绍类型缩减来解决\n  return _name4 as \"cc\";\n}\n```\n\n- 函数的返回值为空时，使用`void`类型，此时可以`return undefined`，`return null`，也可以不写`return`，会默认返回`undefined`：\n\n```ts\nlet _name = \"cc\";\n\n// 返回空值undefined\nfunction setName(name): void {\n  _name = name;\n}\n\nlet a = setName(\"yy\"); // a为undefined\n```\n\n## 二、参数\n\n在`TS`中我们往往需要对函数的参数添加类型注释，如果不添加类型注释，则该参数将被类型推论为`any`。`TS`不仅约束了传参时实参的类型，也约束了在函数内部形参的类型。\n\n```ts\nlet _name = \"cc\";\n// 定义一个接收string类型，无返回值的函数\nfunction setName2(name: string): void {\n  _name = name;\n}\n```\n\n有时候，我们的参数比较复杂，例如多种类型的组合：`string | number`，这时候我们需要进行**类型缩减**，以防在`return`或参数调用方法等情况下出现问题。\n\n```ts\nlet _name = \"cc\";\n\n// 错误示例\nfunction setName3(name: string | number): void {\n  // 参数name有可能是number，因此不能直接赋值\n  _name = name;\n}\n\n// 正确示例\nfunction setName3(name: string | number): void {\n  // name是string类型\n  if (typeof name === \"string\") {\n    _name = name;\n  } else {\n    // name是number类型，可强制转化\n    _name = String(name);\n  }\n}\n```\n\n有时候，某个参数不是必须传的，就可以在形参后加上英文问号\"`?`\"来表示**可选参数**，如果调用函数时不传该参数，则该参数为`undefined`。因此，在函数体内部，该参数有可能是`undefined`，也需要进行类型缩减。\n\n```ts\nlet userInfo: { name: string; age: number; gender: 1 | 2 | 3 };\nfunction setUserInfo(name: string, age: number, gender?: 1 | 2 | 3) {\n  if (gender === undefined) {\n    userInfo.gender = 3;\n  } else {\n    userInfo.gender = gender;\n  }\n}\n```\n\n## 三、函数类型表达式\n\nTS 中可以使用箭头函数的形式来定义一个函数类型：**`(a: Type1, b: Type2, ...) => TypeN`**表示**接收的参数名称为`a`, `b` , ...，类型分别为`Type1`, `Type2`,...，返回值类型为`TypeN`的函数。**\n\n```ts\n// 定义了类型Fn1是一个函数，接收一个string类型的name和number类型的age为参数，\n// 返回一个sttring类型的值\ntype Fn1 = (name: string, age: number) => string;\n\n// 给fn1添加Fn1类型，则参数和返回值都需要满足Fn1的约束\n// 已经由Fn1约束了类型，因此无需再对参数和返回值进行类型注释\nconst fn1: Fn1 = function (name, age) {\n  return \"I am\" + name;\n};\n\n// 也可以使用箭头函数\nconst fn11: Fn1 = (name, age) => \"I am\" + name;\n```\n\n在声明对象的方法时，可以很方便地使用函数类型表达式：\n\n```ts\n// 定义一个User接口，其中包含interest方法，需要传入一个string类型的参数，\ninterface User {\n  name: string;\n  age: number;\n  interest: (something: string) => void;\n}\n\nconst user: User = {\n  name: \"cc\",\n  age: 18,\n  interest(something) {\n    // ...\n  },\n};\n```\n\n## 四、类型缩减\n\n在函数中，我们会经常遇到形参是组合类型或可选参数的情况，这时候我们就需要进行类型缩减，对该参数的类型抽丝剥茧，从而在每个具体的子类型时做相应的操作，防止类型出错。在该过程中，越往后该参数可能的类型范围就越小。\n\n主要有 **控制流分析**：`if-else` 或 `switch-case` 。\n\n### (一) 控制流分析\n\n通过 if，else 等控制流语句来逐步缩减参数的类型范围。\n\n- **`typeof`** 类型守卫\n\n在下面的例子中，我们使用了**`typeof`** 这个 **`type gurads`** 类型守卫，`typeof`会返回一些列固定的字符串，我们根据这些字符串来减少类型范围。\n\n```ts\ntype Fn = (name?: string | number) => string;\n\nconst fn: Fn = function (name) {\n  // 类型缩减\n  if (name === undefined) {\n    return \"default name\";\n    // 接下来只能是string或者number\n  } else if (typeof name === \"string\") {\n    return name;\n    // 接下来只能是number\n  } else {\n    return String(name);\n  }\n};\n```\n\n**`typeof` 的返回值**：\n\n1. **\"`string`\"**\n\n2. **\"`numbrt`\"**\n\n3. **\"`bigint`\"**\n\n4. **\"`boolean`\"**\n\n5. **\"`symbol`\"**\n\n6. **\"`undefined`\"**\n\n7. **\"`object`\"**\n\n8. **\"`function`\"**\n\n可以看到，**`typeof`无法检测出`null`**这个空值，`typeof null`会返回\"`object`\"，因此，我们可以辅以“`truthiness`”检测进行真值校验。\n\n- **`Truthiness narrowing`** 真值校验\n\n  利用`true`和`false`来进行真值条件判断，从而达到类型缩减的目的。\n\n```ts\ntype Fn = (name?: string) => string;\n\nconst fn2: Fn = function (name) {\n  // 真值校验\n  if (name) {\n    return name;\n  } else {\n    return \"default name\";\n  }\n};\n```\n\n**下面列举出使用 `if` 会得到 `false` 的值**，根据官方文档的描述，除了以下列举的值之外，其它的值都会返回`true`。\n\n1. **`0`**\n\n2. **`NaN`**\n\n3. **\"\"** 空字符串\n\n4. **`0n`** 数字`0` + 字母`n`，是`bigint`类型的 `0`\n\n5. **`null`**\n\n6. **`undefined`**\n\n如果我们想把任何值转化为相应的`boolean`类型，可以利用布尔否定符\"`!`\"，任何值经过双重否定之后都会转化为相应的布尔值。\n\n```ts\n!!0; // false\n!!NaN; // false\n!!\"\"; // false\n!!\"name\"; // true\n```\n\n- **`Equality narrowing`** 等值校验\n\n  利用已知条件进行等值校验，从而 TS 可以推断出相应的参数类型，达到类型缩减的目的。\n\n- **`in` 操作符**\n\n  使用表达式 **`\"value\" in x`**，来判断对象里是否存在某个属性，来进行类型缩减。\n\n```ts\ntype Fish = {\n  swim: () => void;\n};\n\ntype Dog = {\n  bark: () => void;\n};\n\nfunction doSomething(obj: Fish | Dog) {\n  // 有bark方法的则是Dog\n  if (\"bark\" in obj) {\n    console.log(\"汪汪汪\");\n  } else {\n    // 否则是Fish\n    console.log(\"I am Fish\");\n  }\n}\n```\n\n- 使用 **`instanceof`**\n\n  用于`Array`，`Date`等引用类型。\n\n### (二) 类型预言\n\n想要定义一个自定义的类型守卫，我们通常可以使用一个返回值是类型预言的函数。\n\n类型预言格式：**`param is Type`**，随后我们可以用该函数来进行类型缩减。\n\n```ts\ntype Fish = {\n  swim: () => void;\n};\n\ntype Dog = {\n  bark: () => void;\n};\n\n// 我可能不是人，才是真的狗\nfunction isDog(obj: Fish | Dog): obj is Dog {\n  return \"bark\" in obj;\n}\n\nlet animal: Fish | Dog = {\n  swim: () => console.log(\"I am Fish\"),\n};\n// 进行类型缩减\nif (isDog(animal)) {\n  animal.bark();\n} else {\n  animal.swim();\n}\n```\n\n注意如果`animal`的的方法不是`swim`而是`bark`，则`TS`将会进行类型推论，得到这个`animal`是`Dog`，便已经排除了`Fish`类型。此时，在我们的 if 分支里包含了`animal`是`Dog`的情况，而在`else`分支里 `animal` 就是`never`类型了。\n\n### (三) 解析联合类型\n\n在上面的例子中，我们分析了一些较为简单的类型。但是实际上，稍微复杂些的类型也是非常常见的。在官方文档中，给了一个例子：我们定义一个用于表示形状的接口`Shape`，用 `kind` 属性来表示是圆形`circle`还是正方形`square`（字面量联合类型，防止单词拼写错误），圆形仅需要一个半径`radius`属性，正方形仅需要边长属性 `side_length`。因此我们使用可选属性，如果是`circle`，则有`radius`属性而没有`side_length`属性，反之同理。\n\n```ts\ninterface Shape {\n  kind: \"circle\" | \"square\";\n  radius?: number;\n  side?: number;\n}\n```\n\n接下来我们需要一个求面积的函数，参数为`Shape`类型。由于参数`radius`和`side`都是可选的，因此都可能为空值。按照常理，我们会根据 `kind` 属性的值来判断是圆形还是方形，从而使用不同的面积公式：\n\n```ts\nfunction getArea(obj: Shape) {\n  if (obj.kind === \"circle\") {\n    // 圆形面积，会报错，obj.radius可能是空的\n    return Math.PI * obj.radius ** 2;\n  } else {\n    // 方形面积，会报错，obj.side可能是空的\n    return obj.side ** 2;\n  }\n}\n```\n\n但是此时你会发现，在严格空值检查下，这段代码会报错。因为`radius`和`side`都是可选属性，因此它们都可能为空值。当然，这里我们可以使用**非空断言**，但是也许我们可以用更合理的方式：给`circle`和`square`定义不同的接口，毕竟它们是两个完全不同的东西。此时我们的`getArea`函数就不会再出现上述的问题。\n\n```ts\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  side: number;\n}\n\ntype Shape = Circle | Square;\n\nfunction getArea(obj: Shape) {\n  if (obj.kind === \"circle\") {\n    // 是Circle，必然有radius属性\n    return Math.PI * obj.radius ** 2;\n  } else {\n    // 是Square，必然有side属性\n    return obj.side ** 2;\n  }\n}\n```\n\n通过合理设计接口，能使问题得到更加优雅的解决方案。\n\n### (四) `never` 类型\n\n当我们进行类型缩减时，一旦所有可能的类型都被缩减完了，如果继续缩减，例如再加一个`else`分支，我们就会得到一个**`never`**类型。`TS`使用`never`类型来告诉我们，当前的情况是`tan ( Math.PI / 2 )`。**`never`类型可以被赋值给任意类型，但是任意其它类型都不能被赋值给`never`类型(除了`never`本身之外)**。这个特性常用于穷举校验。\n\n### (五) 穷举校验\n\n我们在进行类型缩减时，有时候无法考虑到所有的情况。因此，可以使用穷举校验，为了避免有类型被遗漏。穷举校验利用了上述`never`类型的特性，在控制流的最后一个分支里，(如`switch`语句的`default`分支，`if` 语句末尾的`else`分支)，尝试把 进行类型缩减的参数 赋值给一个 `never` 类型的变量。由于只有`never`类型可以被赋值给`never`类型，一旦有我们考虑不周全，参数有类型遗漏了，那么在最后的分支里，该参数的类型就不会是`never`，无法被赋值给`never`类型的变量，`TS`便会报错来提示我们。而如果我们考虑完了所有的类型情况，则该参数在最后一个分支里便是`never`类型，可以被赋值给`never`类型的变量，`TS`就不会报错。因此，通过穷举检查的方式，我们只需要关注最后一个分支里是否有相应的报错，就能知晓我们是否考虑到了所有的类型情况。\n\n```ts\ninterface Circle {\n  kind: \"circle\";\n  radius: number;\n}\n\ninterface Square {\n  kind: \"square\";\n  side: number;\n}\n\ninterface Triangle {\n  kind: \"triangle\";\n  side: number;\n}\n\ntype Shape = Circle | Square;\n\nfunction getArea(obj: Shape) {\n  if (obj.kind === \"circle\") {\n    // 是Circle，必然有radius属性\n    return Math.PI * obj.radius ** 2;\n  } else if (obj.kind === \"square\") {\n    // 是Square，必然有side属性\n    return obj.side ** 2;\n  } else {\n    // 在最后一个分支进行穷举校验\n    const _isExhaustive: never = obj;\n    return _isExhaustive;\n  }\n}\n```\n\n## 五、函数进阶\n\n前面已经介绍了函数类型表达式，下面我们来了解下更多关于函数的知识。\n\n### (一) 函数签名\n\n1. <mark>**调用签名**</mark>\n\n函数也是一种对象，可以有自己的属性。但是使用函数类型表达式的时候无法同时声明函数的属性。**调用签名描述了一种函数类型，包含了函数的属性、调用函数时应传递的参数以及返回值**。使用调用签名可以很方便地解决函数类型表达式的不足。\n\n```ts\n// 声明调用签名，调用签名是一种类型，其名字可以任意取\ntype CallSignatureFn = {\n  // 函数的属性\n  grade: string;\n  // 函数的形参和返回值\n  (arg1: number, arg2: string): string;\n};\n\nfunction logInfo(fn: CallSignatureFn) {\n  console.log(fn.grade + \" returned \" + fn(6, \"A\"));\n}\n```\n\n**调用签名 vs 函数类型表达式：**\n\n- 函数类型表达式十分简洁\n- 调用签名可以声明函数的属性\n- 调用前面在 参数列表 和 返回值 之间使用冒号 \"`:`\" ，而函数类型表达式使用箭头 \"`=>`\"\n\n2. <mark>**构造签名**</mark>\n\n函数除了可以被直接调用之外，还可以使用 **`new`** 操作符来调用。构造签名描述了函数在使用 `new` 操作符调用时的传参和返回值。\n\n```ts\ntype ConstructSignatureFn = {\n  new (_type: string, _num: number): string[];\n};\n\nfunction fn(ctor: ConstructSignatureFn) {\n  return new ctor(\"hello\", 2);\n}\n```\n\n3. <mark>**混合签名**</mark>\n\n对于有些比较特殊的函数比如`Date`，直接调用和使用`new`操作符调用得到的结果是一样的，这种函数类型可以使用混合签名，将调用签名和构造签名写在一个类型对象里。\n\n```ts\ninterface CallOrConstruct {\n  new (s: string): Date;\n  (n?: number): number;\n}\n```\n\n4. <mark>**重载签名**</mark> 和 <mark>**实现签名**</mark>\n\n将在**函数重载**章节介绍。\n\n### (二) 泛型函数\n\n1. **基础**\n\n此前，我们在声明函数时，会直接给 **形参** 和 **返回值** 添加类型注释，在调用时传入相应类型的值。以这样的形式声明的函数，其传参和返回值的类型都是固定的。那有没有什么方式，能让我们调用函数时传参的类型能灵活多样呢？**泛型函数**正是我们想要的。\n\n<mark>**泛型函数**</mark>：高度抽象化的类型。在声明函数时将类型抽象化( 可以是多个类型 )：在函数名后面加上尖括号，里面为抽象化的类型名 (例如：**`<T, K, U, ... >`，其中 `T, K, U `是<mark>类型参数</mark>，各代表一种类型，至于具体是什么类型，在调用函数时由传入的类型决定。**)，在调用函数时再具体化，传入实际的类型，一旦传入类型，所有出现该泛型的地方，都会替换为这个传入的类型。如果没有传入明确的类型，则`TS`会进行类型推论，自动判断`Type`的类型。(`T，K，U `等可以用任何你喜欢的词来替代，不过用这些字母会显得比较简洁。)\n\n```ts\n// <Type>为泛型，Tpye任意代表一种类型，\n// 在调用函数时，需要传入实际的类型，一旦传入类型，所有出现Type的地方都会替换\nfunction firstElement<Type>(arr: Type[]): Type | undefined {\n  return arr[0];\n}\n```\n\n调用函数时可以传入任意实际类型：\n\n```ts\n// 类型推论判断Type为string\nconst s = firstElement([\"a\", \"b\", \"c\"]);\n// 类型推论判断Type为number\nconst n = firstElement([1, 2, 3]);\n// 类型推论判断Type为undefined类型\nconst u = firstElement([]);\n```\n\n泛型的概念将类型进行了抽象化，使得函数可以在调用时传入需要的类型，从而增加了函数的通用性。泛型的名字 Type 可以随意取，注意相同的泛型代表着同一种类型。\n\n2. **泛型约束**\n\n我们知道，泛型可以定义多个，例如`<Type1, Type2, ...>`，每个泛型都代表着一种类型，它们可以相同，也可以不同，具体分别是什么类型，都由该函数调用时传入的类型来决定。然而，到目前为止，我们定义的泛型都是和其它类型无关的。很多时候，我们会希望给泛型做一定的约束，让它只能是某些类型之中的一种。这时候，可以使用**`extends`**关键字，来实现泛型约束。\n\n```ts\ninterface Person {\n  name: string;\n  age: number;\n}\n// 泛型T继承了Person类型，因此T必须有name和age属性\nfunction getInfo<T extends Person>(user: T): string {\n  return user.name;\n}\n\nconst user1 = { age: 16 };\nconst user2 = { name: \"cc\", age: 18, gender: 1 };\n// 报错，user1中没有name属性，不符合类型要求\ngetInfo(user1);\n// ok\ngetInfo(user2);\n```\n\n3. **指定类型参数**\n\n在前面的例子中，我们都没有手动传入类型，来指定泛型的实际类型，而是由`TS`自动进行类型推论得出的。有一说一，`TS`确实够机智。不过有些时候，由于泛型太抽象，仅仅靠`TS`的类型推论，可能无法得出正确的结果。这时候，我们可以在调用函数时手动传入类型，来指定类型参数。毕竟**我们永远比`TS`知道的更多**。下面来看一个官方的示例：\n\n```ts\nfunction combine<Type>(arr1: Type[], arr2: Type[]): Type[] {\n  return arr1.concat(arr2);\n}\n\n// 会报错，TS根据第一个参数数组[1,2,3]，将Type推论为number，\n// 于是第二个字符串数组就无法通过类型校验, 因为Type[]此时应为number[]\ncombine([1, 2, 3], [\"a\", \"b\", \"c\"]);\n```\n\n这种情况下，便需要指定参数类型：\n\n```ts\nconst arr = combine<string | number>([1, 2, 3], [\"hello\"]);\n```\n\n4. **三个小细节写好泛型函数**\n\n- 尽可能少地使用泛型约束，让 TS 进行类型推论\n- 尽可能少地使用类型参数\n- 不要将没有重复使用的类型作为类型参数\n\n### (三) 函数重载\n\n1. **函数的可选参数**\n\n在前面的类型缩减章节中，我们知道，函数可以有可选参数，调用函数时，如果没有给可选参数传值，那么该参数的值便是`undefined`, 这容易引发意想不到的错误。在函数中，我们可以通过**真值校验**来解决，也可以**给参数一个默认值**来解决 (同`JS`)。但是，如果一个函数的参数中有回调函数，且该**回调函数也有可选参数，则尤其容易引发错误**。偷个懒，继续搬运官方的栗子：\n\n```ts\nfunction myForEach(arr: any[], callback: (arg: any, index?: number) => void) {\n  for (let i = 0; i < arr.length; i++) {\n    // 如果调用callback时没有传入index参数，则index为undefined\n    callback(arr[i]);\n  }\n}\n\nmyForEach([1, 2, 3], (a, i) => {\n  // 即此处的i为undefined，undefined上没有toFixed方法，便会报错\n  console.log(i.toFixed());\n});\n```\n\n可见，使用可选参数不仅处理起来会有些麻烦，而且容易引发错误。因此，函数当有有限个不定数量或不同类型的参数时，更好的方案是**函数重载**。\n\n2. <mark>**函数重载**</mark>\n\n规定函数的形参与返回值的是<mark>**重载签名**</mark>，可以有多个重载签名；\n\n兼容多个重载签名并进行逻辑处理的是<mark>**实现签名**</mark>，由于要兼容多套重载签名，因此会出现可选参数；\n\n我们可以通过编写多套**重载签名**，来规定函数的不同调用方式 (传入不同数量或不同类型的参数以及不同类型的返回值)。然后通过**实现签名**来进行兼容的逻辑处理。\n\n```ts\n// 定义两套重载签名\n// 允许调用函数时只传入name参数\nfunction setUserInfo(name: string): boolean;\n// 允许调用函数时传入name, age, gender三个参数\nfunction setUserInfo(name: string, age: number, gender: 1 | 2): string;\n// 实现签名，统一处理逻辑\nfunction setUserInfo(name: string, age?: number, gender?: 1 | 2) {\n  // 真值校验，由于两套重载签名规定，调用函数时要么传入三个参数\n  // 因此，传入了age，则必定也传入了gender\n  if (age) {\n    return `我叫 ${name}, 今年 ${age} 岁啦！`;\n  } else {\n    return false;\n  }\n}\n\n// 传入一个参数，正确\nsetUserInfo(\"cc\");\n// 传入三个参数，正确\nsetUserInfo(\"cc\", 18, 2);\n// 传入两个参数，报错，因为没有定义两个参数的重载签名\nsetUserInfo(\"cc\", 18);\n```\n\n可以看到，实现签名 和 我们之前普通地使用可选参数的处理很相似，区别也很明显：尽管`age`和`gender`都是可选参数，但是通过重载签名，规定了`age`和`gender`必须同时传入或同时都不传，即规定了该函数的调用只能传入一个或三个参数。如果不进行函数重载，那么将多出一种只传入`name`和`age`这两个参数的情况要进行处理。可见，通过函数重载来规定函数不同的调用方式，可以使逻辑与结构更加清晰优雅。当我们进行函数重载时，一定要**注意让实现签名兼容所有的重载签名(参数和返回值都要兼容处理)**。\n\n### (四) 在函数中声明 this\n\n一般而言，`TS`会如同`JS`一样，自动推断 this 的指向。`JS`中不允许`this`作为参数，不过`TS`允许我们在函数中声明`this`的类型，这种情况尤其在函数的回调参数`callback`中较为常见。\n\n```ts\n// filterUser个方法，其后是其调用签名\ninterface Data {\n  filterUsers(filter: (this: User) => boolean): User[];\n}\n```\n\n起初这个官方的示例我看了好几分钟没看懂，后来发现它的`filterUsers`就是一个函数的调用签名，੯ੁૂ‧̀͡u\\。这里声明了`this`是`User`类型，如果在该方法执行时，`callback`中的`this`不是`User`类型，`TS`就会提示我们代码写的有误。在函数中声明`this`时，需要注意一点是，虽然在构造签名中，`callback`使用箭头形式，但是**在我们实际调用该方法时，`callback`不能使用箭头函数，只能用`function`关键字**。毕竟众所周知，箭头函数没有自己作用域的`this`，它使用的的`this`同定义箭头函数时的上下文的 this。\n\n### (五) 其它的类型\n\n- **`void`**\n\n  函数的返回值设置为`void`，则返回空值。**`void`不等同于`undefined`**。\n\n  返回值为`void`类型的函数，并不一定不能写`return` 语句。**如果是通过函数表达式、函数签名等定义的函数类型，该类型的实例函数体中可以有`return`语句，并且后面可以接任意类型的值，只不过它的返回值会被忽略**。如果我们把这样的函数调用结果赋值给某个变量，则该变量的类型依然是`void`。\n\n  ```ts\n  type voidFunc = () => void;\n\n  const f1: voidFunc = () => {\n    // 可以return任意类型的值，但是会被忽略\n    return true;\n  };\n\n  // v1 的类型依然是void\n  const v1 = f1();\n  ```\n\n  但是，**如果是通过字面量声明函数的返回值为`void`，则函数体内不能有`return`语句**。虽然官方文档里这么说，下面的栗子也摘自官方文档，但是我的`vs code`编辑器里这样写并没有报错 ？。\n\n  ```ts\n  function f2(): void {\n    // @ts-expect-error\n    return true;\n  }\n\n  const f3 = function (): void {\n    // @ts-expect-error\n    return true;\n  };\n  ```\n\n- **`object`**\n\n  是小写的`object`，而不是大写的`Object`。这两者意义不同。\n\n- **`unknown`**\n- **`never`**\n\n  有的函数永远没有返回值，例如在函数体内 `return` 之前抛出错误。`never`类型也常用来做穷举校验。\n\n- **`Funtion`**\n\n  这些类型基本都在[# `Typescript`系列：基础篇(一)][2022年了，了解一下 typescript系列：基础篇(一)？ - 掘金](https://juejin.cn/post/7069940384515751973)介绍过了，此处不再赘述。\n\n### (六) 剩余参数\n\n- 我才发现，原来**`parameters`表示形参**，**`arguments`表示实参**。\n- **剩余形参**\n\n剩余形参的使用基本同`JS`一致，偷个懒直接拿官方栗子：\n\n```ts\n// 倍乘函数，第一个参数为倍数，会返回后续所有参数各自乘以倍数而形成的数组\nfunction multiply(n: number, ...m: number[]) {\n  return m.map((x) => n * x);\n}\n// a 的值\nconst a = multiply(10, 1, 2, 3, 4);\n```\n\n- **剩余实参**\n\n剩余实参常用于函数调用时对传递的参数 (数组、对象等) 进行展开，然而这里容易踩坑。以数组为例：\n\n```ts\nconst arr1 = [1, 2, 3];\nconst arr2 = [4, 5, 6];\narr1.push(...arr2);\n```\n\n数组的`push`可以接收无限制个参数，因此可以直接展开参数`arr2`。但是有的方法只能接收指定数量的参数，而在一般情况下，`TS`认为数组的是可变的。如果直接对这类方法的进行数组参数的展开，会引起报错，因为`TS`会认为数组里的成员数量可能是`0`个或者多个，不符合该方法只接受指定数量的参数的要求。\n\n```ts\n// 虽然数组现在只有两个成员，但是它的类型被推断为 number[]，\n// 即args数组可能会发生变化，可能有0个或多个参数\n// 而Math.atan2方法只接收两个参数，因此会报错\nconst args = [8, 5];\nconst angle = Math.atan2(...args);s);\n```\n\n解决的办法也很简单，使用 **`as const`**将数组的类型断言为不可变类型。此时的数组便被推论为元组类型。有关元组类型的内容，会在下一篇 **对象类型篇**中介绍。\n\n```ts\n// 此时args长度不可变，被推论为元组类型\nconst args = [8, 5] as const;\n// ok\nconst angle = Math.atan2(...args);\n```\n\n- **形参结构**\n\n没啥好说的，直接上官方示例。\n\n```ts\ntype NumberABC = { a: number; b: number; c: number };\nfunction sum({ a, b, c }: NumberABC) {\n  console.log(a + b + c);\n}\n```\n","slug":"TypeScript-系列-基础篇-Typescript系列-基础篇-二-TS中的函数","published":1,"comments":1,"photos":[],"link":"","_id":"cla5g9ypj000zwgoi2lzvex2p","content":"<h1 id=\"Typescript-系列基础篇-二-TS-中的函数\"><a href=\"#Typescript-系列基础篇-二-TS-中的函数\" class=\"headerlink\" title=\"Typescript 系列基础篇(二) TS 中的函数\"></a>Typescript 系列基础篇(二) TS 中的函数</h1><p>函数在我们日常代码中占有绝对重要的地位，深入了解 TS 中函数的使用对我们的学习十分有利。如果你还不了解<strong>泛型函数</strong>、<strong>函数签名</strong>、<strong>函数重载</strong>，那么阅读本文将让你对 TS 中的函数有一个更加细致的理解，必能有所收获。</p>\n<h2 id=\"一、返回值\"><a href=\"#一、返回值\" class=\"headerlink\" title=\"一、返回值\"></a>一、返回值</h2><p>我们在声明一个函数 / 方法时，可以在括号后加上类型注释，以约束其返回值的类型，如果没有明确约束返回值的类型，则将其推论为 any 类型。<strong>除了<code>void</code>和<code>any</code>之外，其它所有的类型都应该有相应类型的返回值。</strong></p>\n<ul>\n<li>返回值如果不是约束的类型，或者约束了类型却没有<code>return</code>相应的类型，则会报错：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明变量时由初始值&#x27;cc&#x27;进行类型推论，得出_name为string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会报错，约束了返回值的类型，却没有return相应的类型,</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName1</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 约束了返回值类型只能时string</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName1</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个number类型的变量_name2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _name2 = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">// 约束函数返回值类型为string</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName2</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 会报错，返回值应该是string类型，而_name2是number类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当我们<strong>实际的返回值有可能不是约束的类型时</strong>，也是不正确的：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">_name3</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName3</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不合法的返回值，因为_name3有可能是number类型，而返回值只能是string类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这种情况<strong>尤其容易发生在字面量类型上</strong>：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _name4经类型推论判定为string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _name4 = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 约束返回值只能为 &#x27;cc&#x27; | &#x27;yy&#x27; 类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName4</span>(<span class=\"params\"></span>): <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 会报错，虽然_name4的值为&#x27;cc&#x27;，但它是string类型，不符合要求</span></span><br><span class=\"line\">  <span class=\"comment\">// return _name4</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 可以用类型断言来解决，后面我们将介绍类型缩减来解决</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name4 <span class=\"keyword\">as</span> <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数的返回值为空时，使用<code>void</code>类型，此时可以<code>return undefined</code>，<code>return null</code>，也可以不写<code>return</code>，会默认返回<code>undefined</code>：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回空值undefined</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  _name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title function_\">setName</span>(<span class=\"string\">&quot;yy&quot;</span>); <span class=\"comment\">// a为undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、参数\"><a href=\"#二、参数\" class=\"headerlink\" title=\"二、参数\"></a>二、参数</h2><p>在<code>TS</code>中我们往往需要对函数的参数添加类型注释，如果不添加类型注释，则该参数将被类型推论为<code>any</code>。<code>TS</code>不仅约束了传参时实参的类型，也约束了在函数内部形参的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个接收string类型，无返回值的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName2</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  _name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候，我们的参数比较复杂，例如多种类型的组合：<code>string | number</code>，这时候我们需要进行<strong>类型缩减</strong>，以防在<code>return</code>或参数调用方法等情况下出现问题。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName3</span>(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数name有可能是number，因此不能直接赋值</span></span><br><span class=\"line\">  _name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName3</span>(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// name是string类型</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    _name = name;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// name是number类型，可强制转化</span></span><br><span class=\"line\">    _name = <span class=\"title class_\">String</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候，某个参数不是必须传的，就可以在形参后加上英文问号”<code>?</code>“来表示<strong>可选参数</strong>，如果调用函数时不传该参数，则该参数为<code>undefined</code>。因此，在函数体内部，该参数有可能是<code>undefined</code>，也需要进行类型缩减。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">userInfo</span>: &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span>, gender?: <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (gender === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    userInfo.<span class=\"property\">gender</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    userInfo.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、函数类型表达式\"><a href=\"#三、函数类型表达式\" class=\"headerlink\" title=\"三、函数类型表达式\"></a>三、函数类型表达式</h2><p>TS 中可以使用箭头函数的形式来定义一个函数类型：<strong><code>(a: Type1, b: Type2, ...) =&gt; TypeN</code></strong>表示<strong>接收的参数名称为<code>a</code>, <code>b</code> , …，类型分别为<code>Type1</code>, <code>Type2</code>,…，返回值类型为<code>TypeN</code>的函数。</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义了类型Fn1是一个函数，接收一个string类型的name和number类型的age为参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个sttring类型的值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn1</span> = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给fn1添加Fn1类型，则参数和返回值都需要满足Fn1的约束</span></span><br><span class=\"line\"><span class=\"comment\">// 已经由Fn1约束了类型，因此无需再对参数和返回值进行类型注释</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn1</span>: <span class=\"title class_\">Fn1</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am&quot;</span> + name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn11</span>: <span class=\"title class_\">Fn1</span> = <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> <span class=\"string\">&quot;I am&quot;</span> + name;</span><br></pre></td></tr></table></figure>\n<p>在声明对象的方法时，可以很方便地使用函数类型表达式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个User接口，其中包含interest方法，需要传入一个string类型的参数，</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">interest</span>: <span class=\"function\">(<span class=\"params\">something: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user</span>: <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"title function_\">interest</span>(<span class=\"params\">something</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、类型缩减\"><a href=\"#四、类型缩减\" class=\"headerlink\" title=\"四、类型缩减\"></a>四、类型缩减</h2><p>在函数中，我们会经常遇到形参是组合类型或可选参数的情况，这时候我们就需要进行类型缩减，对该参数的类型抽丝剥茧，从而在每个具体的子类型时做相应的操作，防止类型出错。在该过程中，越往后该参数可能的类型范围就越小。</p>\n<p>主要有 <strong>控制流分析</strong>：<code>if-else</code> 或 <code>switch-case</code> 。</p>\n<h3 id=\"一-控制流分析\"><a href=\"#一-控制流分析\" class=\"headerlink\" title=\"(一) 控制流分析\"></a>(一) 控制流分析</h3><p>通过 if，else 等控制流语句来逐步缩减参数的类型范围。</p>\n<ul>\n<li><strong><code>typeof</code></strong> 类型守卫</li>\n</ul>\n<p>在下面的例子中，我们使用了<strong><code>typeof</code></strong> 这个 <strong><code>type gurads</code></strong> 类型守卫，<code>typeof</code>会返回一些列固定的字符串，我们根据这些字符串来减少类型范围。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn</span> = <span class=\"function\">(<span class=\"params\">name?: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn</span>: <span class=\"title class_\">Fn</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类型缩减</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;default name&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 接下来只能是string或者number</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    <span class=\"comment\">// 接下来只能是number</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">String</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><code>typeof</code> 的返回值</strong>：</p>\n<ol>\n<li><p><strong>“<code>string</code>“</strong></p>\n</li>\n<li><p><strong>“<code>numbrt</code>“</strong></p>\n</li>\n<li><p><strong>“<code>bigint</code>“</strong></p>\n</li>\n<li><p><strong>“<code>boolean</code>“</strong></p>\n</li>\n<li><p><strong>“<code>symbol</code>“</strong></p>\n</li>\n<li><p><strong>“<code>undefined</code>“</strong></p>\n</li>\n<li><p><strong>“<code>object</code>“</strong></p>\n</li>\n<li><p><strong>“<code>function</code>“</strong></p>\n</li>\n</ol>\n<p>可以看到，<strong><code>typeof</code>无法检测出<code>null</code></strong>这个空值，<code>typeof null</code>会返回”<code>object</code>“，因此，我们可以辅以“<code>truthiness</code>”检测进行真值校验。</p>\n<ul>\n<li><p><strong><code>Truthiness narrowing</code></strong> 真值校验</p>\n<p>利用<code>true</code>和<code>false</code>来进行真值条件判断，从而达到类型缩减的目的。</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn</span> = <span class=\"function\">(<span class=\"params\">name?: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn2</span>: <span class=\"title class_\">Fn</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 真值校验</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;default name&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>下面列举出使用 <code>if</code> 会得到 <code>false</code> 的值</strong>，根据官方文档的描述，除了以下列举的值之外，其它的值都会返回<code>true</code>。</p>\n<ol>\n<li><p><strong><code>0</code></strong></p>\n</li>\n<li><p><strong><code>NaN</code></strong></p>\n</li>\n<li><p><strong>“”</strong> 空字符串</p>\n</li>\n<li><p><strong><code>0n</code></strong> 数字<code>0</code> + 字母<code>n</code>，是<code>bigint</code>类型的 <code>0</code></p>\n</li>\n<li><p><strong><code>null</code></strong></p>\n</li>\n<li><p><strong><code>undefined</code></strong></p>\n</li>\n</ol>\n<p>如果我们想把任何值转化为相应的<code>boolean</code>类型，可以利用布尔否定符”<code>!</code>“，任何值经过双重否定之后都会转化为相应的布尔值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"number\">0</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"title class_\">NaN</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">&quot;name&quot;</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong><code>Equality narrowing</code></strong> 等值校验</p>\n<p>利用已知条件进行等值校验，从而 TS 可以推断出相应的参数类型，达到类型缩减的目的。</p>\n</li>\n<li><p><strong><code>in</code> 操作符</strong></p>\n<p>使用表达式 <strong><code>&quot;value&quot; in x</code></strong>，来判断对象里是否存在某个属性，来进行类型缩减。</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fish</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\">obj: Fish | Dog</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有bark方法的则是Dog</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;bark&quot;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;汪汪汪&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 否则是Fish</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am Fish&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 <strong><code>instanceof</code></strong></p>\n<p>用于<code>Array</code>，<code>Date</code>等引用类型。</p>\n</li>\n</ul>\n<h3 id=\"二-类型预言\"><a href=\"#二-类型预言\" class=\"headerlink\" title=\"(二) 类型预言\"></a>(二) 类型预言</h3><p>想要定义一个自定义的类型守卫，我们通常可以使用一个返回值是类型预言的函数。</p>\n<p>类型预言格式：<strong><code>param is Type</code></strong>，随后我们可以用该函数来进行类型缩减。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fish</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我可能不是人，才是真的狗</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isDog</span>(<span class=\"params\">obj: Fish | Dog</span>): obj is <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;bark&quot;</span> <span class=\"keyword\">in</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">animal</span>: <span class=\"title class_\">Fish</span> | <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am Fish&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 进行类型缩减</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_\">isDog</span>(animal)) &#123;</span><br><span class=\"line\">  animal.<span class=\"title function_\">bark</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  animal.<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意如果<code>animal</code>的的方法不是<code>swim</code>而是<code>bark</code>，则<code>TS</code>将会进行类型推论，得到这个<code>animal</code>是<code>Dog</code>，便已经排除了<code>Fish</code>类型。此时，在我们的 if 分支里包含了<code>animal</code>是<code>Dog</code>的情况，而在<code>else</code>分支里 <code>animal</code> 就是<code>never</code>类型了。</p>\n<h3 id=\"三-解析联合类型\"><a href=\"#三-解析联合类型\" class=\"headerlink\" title=\"(三) 解析联合类型\"></a>(三) 解析联合类型</h3><p>在上面的例子中，我们分析了一些较为简单的类型。但是实际上，稍微复杂些的类型也是非常常见的。在官方文档中，给了一个例子：我们定义一个用于表示形状的接口<code>Shape</code>，用 <code>kind</code> 属性来表示是圆形<code>circle</code>还是正方形<code>square</code>（字面量联合类型，防止单词拼写错误），圆形仅需要一个半径<code>radius</code>属性，正方形仅需要边长属性 <code>side_length</code>。因此我们使用可选属性，如果是<code>circle</code>，则有<code>radius</code>属性而没有<code>side_length</code>属性，反之同理。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span> | <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">  radius?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  side?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们需要一个求面积的函数，参数为<code>Shape</code>类型。由于参数<code>radius</code>和<code>side</code>都是可选的，因此都可能为空值。按照常理，我们会根据 <code>kind</code> 属性的值来判断是圆形还是方形，从而使用不同的面积公式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">obj: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;circle&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 圆形面积，会报错，obj.radius可能是空的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * obj.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方形面积，会报错，obj.side可能是空的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"property\">side</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是此时你会发现，在严格空值检查下，这段代码会报错。因为<code>radius</code>和<code>side</code>都是可选属性，因此它们都可能为空值。当然，这里我们可以使用<strong>非空断言</strong>，但是也许我们可以用更合理的方式：给<code>circle</code>和<code>square</code>定义不同的接口，毕竟它们是两个完全不同的东西。此时我们的<code>getArea</code>函数就不会再出现上述的问题。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">side</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Shape</span> = <span class=\"title class_\">Circle</span> | <span class=\"title class_\">Square</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">obj: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;circle&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Circle，必然有radius属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * obj.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Square，必然有side属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"property\">side</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过合理设计接口，能使问题得到更加优雅的解决方案。</p>\n<h3 id=\"四-never-类型\"><a href=\"#四-never-类型\" class=\"headerlink\" title=\"(四) never 类型\"></a>(四) <code>never</code> 类型</h3><p>当我们进行类型缩减时，一旦所有可能的类型都被缩减完了，如果继续缩减，例如再加一个<code>else</code>分支，我们就会得到一个<strong><code>never</code></strong>类型。<code>TS</code>使用<code>never</code>类型来告诉我们，当前的情况是<code>tan ( Math.PI / 2 )</code>。<strong><code>never</code>类型可以被赋值给任意类型，但是任意其它类型都不能被赋值给<code>never</code>类型(除了<code>never</code>本身之外)</strong>。这个特性常用于穷举校验。</p>\n<h3 id=\"五-穷举校验\"><a href=\"#五-穷举校验\" class=\"headerlink\" title=\"(五) 穷举校验\"></a>(五) 穷举校验</h3><p>我们在进行类型缩减时，有时候无法考虑到所有的情况。因此，可以使用穷举校验，为了避免有类型被遗漏。穷举校验利用了上述<code>never</code>类型的特性，在控制流的最后一个分支里，(如<code>switch</code>语句的<code>default</code>分支，<code>if</code> 语句末尾的<code>else</code>分支)，尝试把 进行类型缩减的参数 赋值给一个 <code>never</code> 类型的变量。由于只有<code>never</code>类型可以被赋值给<code>never</code>类型，一旦有我们考虑不周全，参数有类型遗漏了，那么在最后的分支里，该参数的类型就不会是<code>never</code>，无法被赋值给<code>never</code>类型的变量，<code>TS</code>便会报错来提示我们。而如果我们考虑完了所有的类型情况，则该参数在最后一个分支里便是<code>never</code>类型，可以被赋值给<code>never</code>类型的变量，<code>TS</code>就不会报错。因此，通过穷举检查的方式，我们只需要关注最后一个分支里是否有相应的报错，就能知晓我们是否考虑到了所有的类型情况。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">side</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;triangle&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">side</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Shape</span> = <span class=\"title class_\">Circle</span> | <span class=\"title class_\">Square</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">obj: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;circle&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Circle，必然有radius属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * obj.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;square&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Square，必然有side属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"property\">side</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在最后一个分支进行穷举校验</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">_isExhaustive</span>: <span class=\"built_in\">never</span> = obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _isExhaustive;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、函数进阶\"><a href=\"#五、函数进阶\" class=\"headerlink\" title=\"五、函数进阶\"></a>五、函数进阶</h2><p>前面已经介绍了函数类型表达式，下面我们来了解下更多关于函数的知识。</p>\n<h3 id=\"一-函数签名\"><a href=\"#一-函数签名\" class=\"headerlink\" title=\"(一) 函数签名\"></a>(一) 函数签名</h3><ol>\n<li><mark><strong>调用签名</strong></mark></li>\n</ol>\n<p>函数也是一种对象，可以有自己的属性。但是使用函数类型表达式的时候无法同时声明函数的属性。<strong>调用签名描述了一种函数类型，包含了函数的属性、调用函数时应传递的参数以及返回值</strong>。使用调用签名可以很方便地解决函数类型表达式的不足。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明调用签名，调用签名是一种类型，其名字可以任意取</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">CallSignatureFn</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的属性</span></span><br><span class=\"line\">  <span class=\"attr\">grade</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的形参和返回值</span></span><br><span class=\"line\">  (<span class=\"attr\">arg1</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">arg2</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logInfo</span>(<span class=\"params\">fn: CallSignatureFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn.<span class=\"property\">grade</span> + <span class=\"string\">&quot; returned &quot;</span> + <span class=\"title function_\">fn</span>(<span class=\"number\">6</span>, <span class=\"string\">&quot;A&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用签名 vs 函数类型表达式：</strong></p>\n<ul>\n<li>函数类型表达式十分简洁</li>\n<li>调用签名可以声明函数的属性</li>\n<li>调用前面在 参数列表 和 返回值 之间使用冒号 “<code>:</code>“ ，而函数类型表达式使用箭头 “<code>=&gt;</code>“</li>\n</ul>\n<ol>\n<li><mark><strong>构造签名</strong></mark></li>\n</ol>\n<p>函数除了可以被直接调用之外，还可以使用 <strong><code>new</code></strong> 操作符来调用。构造签名描述了函数在使用 <code>new</code> 操作符调用时的传参和返回值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ConstructSignatureFn</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (<span class=\"attr\">_type</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">_num</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">ctor: ConstructSignatureFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">ctor</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><mark><strong>混合签名</strong></mark></li>\n</ol>\n<p>对于有些比较特殊的函数比如<code>Date</code>，直接调用和使用<code>new</code>操作符调用得到的结果是一样的，这种函数类型可以使用混合签名，将调用签名和构造签名写在一个类型对象里。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CallOrConstruct</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">  (n?: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><mark><strong>重载签名</strong></mark> 和 <mark><strong>实现签名</strong></mark></li>\n</ol>\n<p>将在<strong>函数重载</strong>章节介绍。</p>\n<h3 id=\"二-泛型函数\"><a href=\"#二-泛型函数\" class=\"headerlink\" title=\"(二) 泛型函数\"></a>(二) 泛型函数</h3><ol>\n<li><strong>基础</strong></li>\n</ol>\n<p>此前，我们在声明函数时，会直接给 <strong>形参</strong> 和 <strong>返回值</strong> 添加类型注释，在调用时传入相应类型的值。以这样的形式声明的函数，其传参和返回值的类型都是固定的。那有没有什么方式，能让我们调用函数时传参的类型能灵活多样呢？<strong>泛型函数</strong>正是我们想要的。</p>\n<p><mark><strong>泛型函数</strong></mark>：高度抽象化的类型。在声明函数时将类型抽象化( 可以是多个类型 )：在函数名后面加上尖括号，里面为抽象化的类型名 (例如：<strong><code>&lt;T, K, U, ... &gt;</code>，其中 <code>T, K, U</code>是<mark>类型参数</mark>，各代表一种类型，至于具体是什么类型，在调用函数时由传入的类型决定。</strong>)，在调用函数时再具体化，传入实际的类型，一旦传入类型，所有出现该泛型的地方，都会替换为这个传入的类型。如果没有传入明确的类型，则<code>TS</code>会进行类型推论，自动判断<code>Type</code>的类型。(<code>T，K，U</code>等可以用任何你喜欢的词来替代，不过用这些字母会显得比较简洁。)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;Type&gt;为泛型，Tpye任意代表一种类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 在调用函数时，需要传入实际的类型，一旦传入类型，所有出现Type的地方都会替换</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> firstElement&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arr</span>: <span class=\"title class_\">Type</span>[]): <span class=\"title class_\">Type</span> | <span class=\"literal\">undefined</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用函数时可以传入任意实际类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类型推论判断Type为string</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"title function_\">firstElement</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 类型推论判断Type为number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> n = <span class=\"title function_\">firstElement</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 类型推论判断Type为undefined类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"title function_\">firstElement</span>([]);</span><br></pre></td></tr></table></figure>\n<p>泛型的概念将类型进行了抽象化，使得函数可以在调用时传入需要的类型，从而增加了函数的通用性。泛型的名字 Type 可以随意取，注意相同的泛型代表着同一种类型。</p>\n<ol>\n<li><strong>泛型约束</strong></li>\n</ol>\n<p>我们知道，泛型可以定义多个，例如<code>&lt;Type1, Type2, ...&gt;</code>，每个泛型都代表着一种类型，它们可以相同，也可以不同，具体分别是什么类型，都由该函数调用时传入的类型来决定。然而，到目前为止，我们定义的泛型都是和其它类型无关的。很多时候，我们会希望给泛型做一定的约束，让它只能是某些类型之中的一种。这时候，可以使用<strong><code>extends</code></strong>关键字，来实现泛型约束。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 泛型T继承了Person类型，因此T必须有name和age属性</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getInfo&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&gt;(<span class=\"attr\">user</span>: T): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> user.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user1 = &#123; <span class=\"attr\">age</span>: <span class=\"number\">16</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> user2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">gender</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错，user1中没有name属性，不符合类型要求</span></span><br><span class=\"line\"><span class=\"title function_\">getInfo</span>(user1);</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"title function_\">getInfo</span>(user2);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>指定类型参数</strong></li>\n</ol>\n<p>在前面的例子中，我们都没有手动传入类型，来指定泛型的实际类型，而是由<code>TS</code>自动进行类型推论得出的。有一说一，<code>TS</code>确实够机智。不过有些时候，由于泛型太抽象，仅仅靠<code>TS</code>的类型推论，可能无法得出正确的结果。这时候，我们可以在调用函数时手动传入类型，来指定类型参数。毕竟<strong>我们永远比<code>TS</code>知道的更多</strong>。下面来看一个官方的示例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> combine&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arr1</span>: <span class=\"title class_\">Type</span>[], <span class=\"attr\">arr2</span>: <span class=\"title class_\">Type</span>[]): <span class=\"title class_\">Type</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.<span class=\"title function_\">concat</span>(arr2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会报错，TS根据第一个参数数组[1,2,3]，将Type推论为number，</span></span><br><span class=\"line\"><span class=\"comment\">// 于是第二个字符串数组就无法通过类型校验, 因为Type[]此时应为number[]</span></span><br><span class=\"line\"><span class=\"title function_\">combine</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>这种情况下，便需要指定参数类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = combine&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"string\">&quot;hello&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>三个小细节写好泛型函数</strong></li>\n</ol>\n<ul>\n<li>尽可能少地使用泛型约束，让 TS 进行类型推论</li>\n<li>尽可能少地使用类型参数</li>\n<li>不要将没有重复使用的类型作为类型参数</li>\n</ul>\n<h3 id=\"三-函数重载\"><a href=\"#三-函数重载\" class=\"headerlink\" title=\"(三) 函数重载\"></a>(三) 函数重载</h3><ol>\n<li><strong>函数的可选参数</strong></li>\n</ol>\n<p>在前面的类型缩减章节中，我们知道，函数可以有可选参数，调用函数时，如果没有给可选参数传值，那么该参数的值便是<code>undefined</code>, 这容易引发意想不到的错误。在函数中，我们可以通过<strong>真值校验</strong>来解决，也可以<strong>给参数一个默认值</strong>来解决 (同<code>JS</code>)。但是，如果一个函数的参数中有回调函数，且该<strong>回调函数也有可选参数，则尤其容易引发错误</strong>。偷个懒，继续搬运官方的栗子：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myForEach</span>(<span class=\"params\">arr: <span class=\"built_in\">any</span>[], callback: (arg: <span class=\"built_in\">any</span>, index?: <span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果调用callback时没有传入index参数，则index为undefined</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(arr[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">myForEach</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\">(<span class=\"params\">a, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 即此处的i为undefined，undefined上没有toFixed方法，便会报错</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i.<span class=\"title function_\">toFixed</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可见，使用可选参数不仅处理起来会有些麻烦，而且容易引发错误。因此，函数当有有限个不定数量或不同类型的参数时，更好的方案是<strong>函数重载</strong>。</p>\n<ol>\n<li><mark><strong>函数重载</strong></mark></li>\n</ol>\n<p>规定函数的形参与返回值的是<mark><strong>重载签名</strong></mark>，可以有多个重载签名；</p>\n<p>兼容多个重载签名并进行逻辑处理的是<mark><strong>实现签名</strong></mark>，由于要兼容多套重载签名，因此会出现可选参数；</p>\n<p>我们可以通过编写多套<strong>重载签名</strong>，来规定函数的不同调用方式 (传入不同数量或不同类型的参数以及不同类型的返回值)。然后通过<strong>实现签名</strong>来进行兼容的逻辑处理。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义两套重载签名</span></span><br><span class=\"line\"><span class=\"comment\">// 允许调用函数时只传入name参数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"><span class=\"comment\">// 允许调用函数时传入name, age, gender三个参数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span>, gender: <span class=\"number\">1</span> | <span class=\"number\">2</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实现签名，统一处理逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age?: <span class=\"built_in\">number</span>, gender?: <span class=\"number\">1</span> | <span class=\"number\">2</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 真值校验，由于两套重载签名规定，调用函数时要么传入三个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 因此，传入了age，则必定也传入了gender</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`我叫 <span class=\"subst\">$&#123;name&#125;</span>, 今年 <span class=\"subst\">$&#123;age&#125;</span> 岁啦！`</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入一个参数，正确</span></span><br><span class=\"line\"><span class=\"title function_\">setUserInfo</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 传入三个参数，正确</span></span><br><span class=\"line\"><span class=\"title function_\">setUserInfo</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 传入两个参数，报错，因为没有定义两个参数的重载签名</span></span><br><span class=\"line\"><span class=\"title function_\">setUserInfo</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n<p>可以看到，实现签名 和 我们之前普通地使用可选参数的处理很相似，区别也很明显：尽管<code>age</code>和<code>gender</code>都是可选参数，但是通过重载签名，规定了<code>age</code>和<code>gender</code>必须同时传入或同时都不传，即规定了该函数的调用只能传入一个或三个参数。如果不进行函数重载，那么将多出一种只传入<code>name</code>和<code>age</code>这两个参数的情况要进行处理。可见，通过函数重载来规定函数不同的调用方式，可以使逻辑与结构更加清晰优雅。当我们进行函数重载时，一定要<strong>注意让实现签名兼容所有的重载签名(参数和返回值都要兼容处理)</strong>。</p>\n<h3 id=\"四-在函数中声明-this\"><a href=\"#四-在函数中声明-this\" class=\"headerlink\" title=\"(四) 在函数中声明 this\"></a>(四) 在函数中声明 this</h3><p>一般而言，<code>TS</code>会如同<code>JS</code>一样，自动推断 this 的指向。<code>JS</code>中不允许<code>this</code>作为参数，不过<code>TS</code>允许我们在函数中声明<code>this</code>的类型，这种情况尤其在函数的回调参数<code>callback</code>中较为常见。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filterUser个方法，其后是其调用签名</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">filterUsers</span>(<span class=\"attr\">filter</span>: <span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">this</span>: User</span>) =&gt;</span> <span class=\"built_in\">boolean</span>): <span class=\"title class_\">User</span>[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>起初这个官方的示例我看了好几分钟没看懂，后来发现它的<code>filterUsers</code>就是一个函数的调用签名，੯ੁૂ‧̀͡u\\。这里声明了<code>this</code>是<code>User</code>类型，如果在该方法执行时，<code>callback</code>中的<code>this</code>不是<code>User</code>类型，<code>TS</code>就会提示我们代码写的有误。在函数中声明<code>this</code>时，需要注意一点是，虽然在构造签名中，<code>callback</code>使用箭头形式，但是<strong>在我们实际调用该方法时，<code>callback</code>不能使用箭头函数，只能用<code>function</code>关键字</strong>。毕竟众所周知，箭头函数没有自己作用域的<code>this</code>，它使用的的<code>this</code>同定义箭头函数时的上下文的 this。</p>\n<h3 id=\"五-其它的类型\"><a href=\"#五-其它的类型\" class=\"headerlink\" title=\"(五) 其它的类型\"></a>(五) 其它的类型</h3><ul>\n<li><p><strong><code>void</code></strong></p>\n<p>函数的返回值设置为<code>void</code>，则返回空值。<strong><code>void</code>不等同于<code>undefined</code></strong>。</p>\n<p>返回值为<code>void</code>类型的函数，并不一定不能写<code>return</code> 语句。<strong>如果是通过函数表达式、函数签名等定义的函数类型，该类型的实例函数体中可以有<code>return</code>语句，并且后面可以接任意类型的值，只不过它的返回值会被忽略</strong>。如果我们把这样的函数调用结果赋值给某个变量，则该变量的类型依然是<code>void</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> voidFunc = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">f1</span>: voidFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以return任意类型的值，但是会被忽略</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v1 的类型依然是void</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"title function_\">f1</span>();</span><br></pre></td></tr></table></figure>\n<p>但是，<strong>如果是通过字面量声明函数的返回值为<code>void</code>，则函数体内不能有<code>return</code>语句</strong>。虽然官方文档里这么说，下面的栗子也摘自官方文档，但是我的<code>vs code</code>编辑器里这样写并没有报错 ？。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f3 = <span class=\"keyword\">function</span> (<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>object</code></strong></p>\n<p>是小写的<code>object</code>，而不是大写的<code>Object</code>。这两者意义不同。</p>\n</li>\n<li><p><strong><code>unknown</code></strong></p>\n</li>\n<li><p><strong><code>never</code></strong></p>\n<p>有的函数永远没有返回值，例如在函数体内 <code>return</code> 之前抛出错误。<code>never</code>类型也常用来做穷举校验。</p>\n</li>\n<li><p><strong><code>Funtion</code></strong></p>\n<p>这些类型基本都在[# <code>Typescript</code>系列：基础篇(一)]<a href=\"https://juejin.cn/post/7069940384515751973\">2022年了，了解一下 typescript系列：基础篇(一)？ - 掘金</a>介绍过了，此处不再赘述。</p>\n</li>\n</ul>\n<h3 id=\"六-剩余参数\"><a href=\"#六-剩余参数\" class=\"headerlink\" title=\"(六) 剩余参数\"></a>(六) 剩余参数</h3><ul>\n<li>我才发现，原来<strong><code>parameters</code>表示形参</strong>，<strong><code>arguments</code>表示实参</strong>。</li>\n<li><strong>剩余形参</strong></li>\n</ul>\n<p>剩余形参的使用基本同<code>JS</code>一致，偷个懒直接拿官方栗子：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 倍乘函数，第一个参数为倍数，会返回后续所有参数各自乘以倍数而形成的数组</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">multiply</span>(<span class=\"params\">n: <span class=\"built_in\">number</span>, ...m: <span class=\"built_in\">number</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> n * x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a 的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title function_\">multiply</span>(<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>剩余实参</strong></li>\n</ul>\n<p>剩余实参常用于函数调用时对传递的参数 (数组、对象等) 进行展开，然而这里容易踩坑。以数组为例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.<span class=\"title function_\">push</span>(...arr2);</span><br></pre></td></tr></table></figure>\n<p>数组的<code>push</code>可以接收无限制个参数，因此可以直接展开参数<code>arr2</code>。但是有的方法只能接收指定数量的参数，而在一般情况下，<code>TS</code>认为数组的是可变的。如果直接对这类方法的进行数组参数的展开，会引起报错，因为<code>TS</code>会认为数组里的成员数量可能是<code>0</code>个或者多个，不符合该方法只接受指定数量的参数的要求。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 虽然数组现在只有两个成员，但是它的类型被推断为 number[]，</span></span><br><span class=\"line\"><span class=\"comment\">// 即args数组可能会发生变化，可能有0个或多个参数</span></span><br><span class=\"line\"><span class=\"comment\">// 而Math.atan2方法只接收两个参数，因此会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">8</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> angle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(...args);s);</span><br></pre></td></tr></table></figure>\n<p>解决的办法也很简单，使用 <strong><code>as const</code></strong>将数组的类型断言为不可变类型。此时的数组便被推论为元组类型。有关元组类型的内容，会在下一篇 <strong>对象类型篇</strong>中介绍。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此时args长度不可变，被推论为元组类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">8</span>, <span class=\"number\">5</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> angle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(...args);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>形参结构</strong></li>\n</ul>\n<p>没啥好说的，直接上官方示例。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NumberABC</span> = &#123; <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">c</span>: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">&#123; a, b, c &#125;: NumberABC</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"Typescript-系列基础篇-二-TS-中的函数\"><a href=\"#Typescript-系列基础篇-二-TS-中的函数\" class=\"headerlink\" title=\"Typescript 系列基础篇(二) TS 中的函数\"></a>Typescript 系列基础篇(二) TS 中的函数</h1><p>函数在我们日常代码中占有绝对重要的地位，深入了解 TS 中函数的使用对我们的学习十分有利。如果你还不了解<strong>泛型函数</strong>、<strong>函数签名</strong>、<strong>函数重载</strong>，那么阅读本文将让你对 TS 中的函数有一个更加细致的理解，必能有所收获。</p>\n<h2 id=\"一、返回值\"><a href=\"#一、返回值\" class=\"headerlink\" title=\"一、返回值\"></a>一、返回值</h2><p>我们在声明一个函数 / 方法时，可以在括号后加上类型注释，以约束其返回值的类型，如果没有明确约束返回值的类型，则将其推论为 any 类型。<strong>除了<code>void</code>和<code>any</code>之外，其它所有的类型都应该有相应类型的返回值。</strong></p>\n<ul>\n<li>返回值如果不是约束的类型，或者约束了类型却没有<code>return</code>相应的类型，则会报错：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明变量时由初始值&#x27;cc&#x27;进行类型推论，得出_name为string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会报错，约束了返回值的类型，却没有return相应的类型,</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName1</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 约束了返回值类型只能时string</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName1</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义一个number类型的变量_name2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _name2 = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"comment\">// 约束函数返回值类型为string</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName2</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 会报错，返回值应该是string类型，而_name2是number类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>当我们<strong>实际的返回值有可能不是约束的类型时</strong>，也是不正确的：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">_name3</span>: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span> = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName3</span>(<span class=\"params\"></span>): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不合法的返回值，因为_name3有可能是number类型，而返回值只能是string类型</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>这种情况<strong>尤其容易发生在字面量类型上</strong>：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// _name4经类型推论判定为string类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> _name4 = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 约束返回值只能为 &#x27;cc&#x27; | &#x27;yy&#x27; 类型</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getName4</span>(<span class=\"params\"></span>): <span class=\"string\">&quot;cc&quot;</span> | <span class=\"string\">&quot;yy&quot;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 会报错，虽然_name4的值为&#x27;cc&#x27;，但它是string类型，不符合要求</span></span><br><span class=\"line\">  <span class=\"comment\">// return _name4</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 可以用类型断言来解决，后面我们将介绍类型缩减来解决</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> _name4 <span class=\"keyword\">as</span> <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>函数的返回值为空时，使用<code>void</code>类型，此时可以<code>return undefined</code>，<code>return null</code>，也可以不写<code>return</code>，会默认返回<code>undefined</code>：</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回空值undefined</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName</span>(<span class=\"params\">name</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  _name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"title function_\">setName</span>(<span class=\"string\">&quot;yy&quot;</span>); <span class=\"comment\">// a为undefined</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"二、参数\"><a href=\"#二、参数\" class=\"headerlink\" title=\"二、参数\"></a>二、参数</h2><p>在<code>TS</code>中我们往往需要对函数的参数添加类型注释，如果不添加类型注释，则该参数将被类型推论为<code>any</code>。<code>TS</code>不仅约束了传参时实参的类型，也约束了在函数内部形参的类型。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 定义一个接收string类型，无返回值的函数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName2</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  _name = name;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候，我们的参数比较复杂，例如多种类型的组合：<code>string | number</code>，这时候我们需要进行<strong>类型缩减</strong>，以防在<code>return</code>或参数调用方法等情况下出现问题。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> _name = <span class=\"string\">&quot;cc&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 错误示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName3</span>(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 参数name有可能是number，因此不能直接赋值</span></span><br><span class=\"line\">  _name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 正确示例</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setName3</span>(<span class=\"params\">name: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// name是string类型</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    _name = name;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// name是number类型，可强制转化</span></span><br><span class=\"line\">    _name = <span class=\"title class_\">String</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有时候，某个参数不是必须传的，就可以在形参后加上英文问号”<code>?</code>“来表示<strong>可选参数</strong>，如果调用函数时不传该参数，则该参数为<code>undefined</code>。因此，在函数体内部，该参数有可能是<code>undefined</code>，也需要进行类型缩减。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">userInfo</span>: &#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">gender</span>: <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span>, gender?: <span class=\"number\">1</span> | <span class=\"number\">2</span> | <span class=\"number\">3</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (gender === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    userInfo.<span class=\"property\">gender</span> = <span class=\"number\">3</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    userInfo.<span class=\"property\">gender</span> = gender;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"三、函数类型表达式\"><a href=\"#三、函数类型表达式\" class=\"headerlink\" title=\"三、函数类型表达式\"></a>三、函数类型表达式</h2><p>TS 中可以使用箭头函数的形式来定义一个函数类型：<strong><code>(a: Type1, b: Type2, ...) =&gt; TypeN</code></strong>表示<strong>接收的参数名称为<code>a</code>, <code>b</code> , …，类型分别为<code>Type1</code>, <code>Type2</code>,…，返回值类型为<code>TypeN</code>的函数。</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义了类型Fn1是一个函数，接收一个string类型的name和number类型的age为参数，</span></span><br><span class=\"line\"><span class=\"comment\">// 返回一个sttring类型的值</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn1</span> = <span class=\"function\">(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 给fn1添加Fn1类型，则参数和返回值都需要满足Fn1的约束</span></span><br><span class=\"line\"><span class=\"comment\">// 已经由Fn1约束了类型，因此无需再对参数和返回值进行类型注释</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn1</span>: <span class=\"title class_\">Fn1</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;I am&quot;</span> + name;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 也可以使用箭头函数</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn11</span>: <span class=\"title class_\">Fn1</span> = <span class=\"function\">(<span class=\"params\">name, age</span>) =&gt;</span> <span class=\"string\">&quot;I am&quot;</span> + name;</span><br></pre></td></tr></table></figure>\n<p>在声明对象的方法时，可以很方便地使用函数类型表达式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个User接口，其中包含interest方法，需要传入一个string类型的参数，</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"attr\">interest</span>: <span class=\"function\">(<span class=\"params\">something: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">user</span>: <span class=\"title class_\">User</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"title function_\">interest</span>(<span class=\"params\">something</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、类型缩减\"><a href=\"#四、类型缩减\" class=\"headerlink\" title=\"四、类型缩减\"></a>四、类型缩减</h2><p>在函数中，我们会经常遇到形参是组合类型或可选参数的情况，这时候我们就需要进行类型缩减，对该参数的类型抽丝剥茧，从而在每个具体的子类型时做相应的操作，防止类型出错。在该过程中，越往后该参数可能的类型范围就越小。</p>\n<p>主要有 <strong>控制流分析</strong>：<code>if-else</code> 或 <code>switch-case</code> 。</p>\n<h3 id=\"一-控制流分析\"><a href=\"#一-控制流分析\" class=\"headerlink\" title=\"(一) 控制流分析\"></a>(一) 控制流分析</h3><p>通过 if，else 等控制流语句来逐步缩减参数的类型范围。</p>\n<ul>\n<li><strong><code>typeof</code></strong> 类型守卫</li>\n</ul>\n<p>在下面的例子中，我们使用了<strong><code>typeof</code></strong> 这个 <strong><code>type gurads</code></strong> 类型守卫，<code>typeof</code>会返回一些列固定的字符串，我们根据这些字符串来减少类型范围。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn</span> = <span class=\"function\">(<span class=\"params\">name?: <span class=\"built_in\">string</span> | <span class=\"built_in\">number</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn</span>: <span class=\"title class_\">Fn</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类型缩减</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;default name&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 接下来只能是string或者number</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> name === <span class=\"string\">&quot;string&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    <span class=\"comment\">// 接下来只能是number</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">String</span>(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><code>typeof</code> 的返回值</strong>：</p>\n<ol>\n<li><p><strong>“<code>string</code>“</strong></p>\n</li>\n<li><p><strong>“<code>numbrt</code>“</strong></p>\n</li>\n<li><p><strong>“<code>bigint</code>“</strong></p>\n</li>\n<li><p><strong>“<code>boolean</code>“</strong></p>\n</li>\n<li><p><strong>“<code>symbol</code>“</strong></p>\n</li>\n<li><p><strong>“<code>undefined</code>“</strong></p>\n</li>\n<li><p><strong>“<code>object</code>“</strong></p>\n</li>\n<li><p><strong>“<code>function</code>“</strong></p>\n</li>\n</ol>\n<p>可以看到，<strong><code>typeof</code>无法检测出<code>null</code></strong>这个空值，<code>typeof null</code>会返回”<code>object</code>“，因此，我们可以辅以“<code>truthiness</code>”检测进行真值校验。</p>\n<ul>\n<li><p><strong><code>Truthiness narrowing</code></strong> 真值校验</p>\n<p>利用<code>true</code>和<code>false</code>来进行真值条件判断，从而达到类型缩减的目的。</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fn</span> = <span class=\"function\">(<span class=\"params\">name?: <span class=\"built_in\">string</span></span>) =&gt;</span> <span class=\"built_in\">string</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">fn2</span>: <span class=\"title class_\">Fn</span> = <span class=\"keyword\">function</span> (<span class=\"params\">name</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 真值校验</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (name) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;default name&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>下面列举出使用 <code>if</code> 会得到 <code>false</code> 的值</strong>，根据官方文档的描述，除了以下列举的值之外，其它的值都会返回<code>true</code>。</p>\n<ol>\n<li><p><strong><code>0</code></strong></p>\n</li>\n<li><p><strong><code>NaN</code></strong></p>\n</li>\n<li><p><strong>“”</strong> 空字符串</p>\n</li>\n<li><p><strong><code>0n</code></strong> 数字<code>0</code> + 字母<code>n</code>，是<code>bigint</code>类型的 <code>0</code></p>\n</li>\n<li><p><strong><code>null</code></strong></p>\n</li>\n<li><p><strong><code>undefined</code></strong></p>\n</li>\n</ol>\n<p>如果我们想把任何值转化为相应的<code>boolean</code>类型，可以利用布尔否定符”<code>!</code>“，任何值经过双重否定之后都会转化为相应的布尔值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!!<span class=\"number\">0</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"title class_\">NaN</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// false</span></span><br><span class=\"line\">!!<span class=\"string\">&quot;name&quot;</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong><code>Equality narrowing</code></strong> 等值校验</p>\n<p>利用已知条件进行等值校验，从而 TS 可以推断出相应的参数类型，达到类型缩减的目的。</p>\n</li>\n<li><p><strong><code>in</code> 操作符</strong></p>\n<p>使用表达式 <strong><code>&quot;value&quot; in x</code></strong>，来判断对象里是否存在某个属性，来进行类型缩减。</p>\n</li>\n</ul>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fish</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\">obj: Fish | Dog</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 有bark方法的则是Dog</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;bark&quot;</span> <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;汪汪汪&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 否则是Fish</span></span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am Fish&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>使用 <strong><code>instanceof</code></strong></p>\n<p>用于<code>Array</code>，<code>Date</code>等引用类型。</p>\n</li>\n</ul>\n<h3 id=\"二-类型预言\"><a href=\"#二-类型预言\" class=\"headerlink\" title=\"(二) 类型预言\"></a>(二) 类型预言</h3><p>想要定义一个自定义的类型守卫，我们通常可以使用一个返回值是类型预言的函数。</p>\n<p>类型预言格式：<strong><code>param is Type</code></strong>，随后我们可以用该函数来进行类型缩减。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Fish</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">bark</span>: <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 我可能不是人，才是真的狗</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">isDog</span>(<span class=\"params\">obj: Fish | Dog</span>): obj is <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;bark&quot;</span> <span class=\"keyword\">in</span> obj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">animal</span>: <span class=\"title class_\">Fish</span> | <span class=\"title class_\">Dog</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">swim</span>: <span class=\"function\">() =&gt;</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am Fish&quot;</span>),</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 进行类型缩减</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title function_\">isDog</span>(animal)) &#123;</span><br><span class=\"line\">  animal.<span class=\"title function_\">bark</span>();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  animal.<span class=\"title function_\">swim</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意如果<code>animal</code>的的方法不是<code>swim</code>而是<code>bark</code>，则<code>TS</code>将会进行类型推论，得到这个<code>animal</code>是<code>Dog</code>，便已经排除了<code>Fish</code>类型。此时，在我们的 if 分支里包含了<code>animal</code>是<code>Dog</code>的情况，而在<code>else</code>分支里 <code>animal</code> 就是<code>never</code>类型了。</p>\n<h3 id=\"三-解析联合类型\"><a href=\"#三-解析联合类型\" class=\"headerlink\" title=\"(三) 解析联合类型\"></a>(三) 解析联合类型</h3><p>在上面的例子中，我们分析了一些较为简单的类型。但是实际上，稍微复杂些的类型也是非常常见的。在官方文档中，给了一个例子：我们定义一个用于表示形状的接口<code>Shape</code>，用 <code>kind</code> 属性来表示是圆形<code>circle</code>还是正方形<code>square</code>（字面量联合类型，防止单词拼写错误），圆形仅需要一个半径<code>radius</code>属性，正方形仅需要边长属性 <code>side_length</code>。因此我们使用可选属性，如果是<code>circle</code>，则有<code>radius</code>属性而没有<code>side_length</code>属性，反之同理。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Shape</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span> | <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">  radius?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  side?: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来我们需要一个求面积的函数，参数为<code>Shape</code>类型。由于参数<code>radius</code>和<code>side</code>都是可选的，因此都可能为空值。按照常理，我们会根据 <code>kind</code> 属性的值来判断是圆形还是方形，从而使用不同的面积公式：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">obj: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;circle&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 圆形面积，会报错，obj.radius可能是空的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * obj.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 方形面积，会报错，obj.side可能是空的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"property\">side</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>但是此时你会发现，在严格空值检查下，这段代码会报错。因为<code>radius</code>和<code>side</code>都是可选属性，因此它们都可能为空值。当然，这里我们可以使用<strong>非空断言</strong>，但是也许我们可以用更合理的方式：给<code>circle</code>和<code>square</code>定义不同的接口，毕竟它们是两个完全不同的东西。此时我们的<code>getArea</code>函数就不会再出现上述的问题。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">side</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Shape</span> = <span class=\"title class_\">Circle</span> | <span class=\"title class_\">Square</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">obj: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;circle&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Circle，必然有radius属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * obj.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Square，必然有side属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"property\">side</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过合理设计接口，能使问题得到更加优雅的解决方案。</p>\n<h3 id=\"四-never-类型\"><a href=\"#四-never-类型\" class=\"headerlink\" title=\"(四) never 类型\"></a>(四) <code>never</code> 类型</h3><p>当我们进行类型缩减时，一旦所有可能的类型都被缩减完了，如果继续缩减，例如再加一个<code>else</code>分支，我们就会得到一个<strong><code>never</code></strong>类型。<code>TS</code>使用<code>never</code>类型来告诉我们，当前的情况是<code>tan ( Math.PI / 2 )</code>。<strong><code>never</code>类型可以被赋值给任意类型，但是任意其它类型都不能被赋值给<code>never</code>类型(除了<code>never</code>本身之外)</strong>。这个特性常用于穷举校验。</p>\n<h3 id=\"五-穷举校验\"><a href=\"#五-穷举校验\" class=\"headerlink\" title=\"(五) 穷举校验\"></a>(五) 穷举校验</h3><p>我们在进行类型缩减时，有时候无法考虑到所有的情况。因此，可以使用穷举校验，为了避免有类型被遗漏。穷举校验利用了上述<code>never</code>类型的特性，在控制流的最后一个分支里，(如<code>switch</code>语句的<code>default</code>分支，<code>if</code> 语句末尾的<code>else</code>分支)，尝试把 进行类型缩减的参数 赋值给一个 <code>never</code> 类型的变量。由于只有<code>never</code>类型可以被赋值给<code>never</code>类型，一旦有我们考虑不周全，参数有类型遗漏了，那么在最后的分支里，该参数的类型就不会是<code>never</code>，无法被赋值给<code>never</code>类型的变量，<code>TS</code>便会报错来提示我们。而如果我们考虑完了所有的类型情况，则该参数在最后一个分支里便是<code>never</code>类型，可以被赋值给<code>never</code>类型的变量，<code>TS</code>就不会报错。因此，通过穷举检查的方式，我们只需要关注最后一个分支里是否有相应的报错，就能知晓我们是否考虑到了所有的类型情况。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;circle&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">radius</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;square&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">side</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">kind</span>: <span class=\"string\">&quot;triangle&quot;</span>;</span><br><span class=\"line\">  <span class=\"attr\">side</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">Shape</span> = <span class=\"title class_\">Circle</span> | <span class=\"title class_\">Square</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getArea</span>(<span class=\"params\">obj: Shape</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;circle&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Circle，必然有radius属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"title class_\">Math</span>.<span class=\"property\">PI</span> * obj.<span class=\"property\">radius</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (obj.<span class=\"property\">kind</span> === <span class=\"string\">&quot;square&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 是Square，必然有side属性</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj.<span class=\"property\">side</span> ** <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在最后一个分支进行穷举校验</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> <span class=\"attr\">_isExhaustive</span>: <span class=\"built_in\">never</span> = obj;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _isExhaustive;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、函数进阶\"><a href=\"#五、函数进阶\" class=\"headerlink\" title=\"五、函数进阶\"></a>五、函数进阶</h2><p>前面已经介绍了函数类型表达式，下面我们来了解下更多关于函数的知识。</p>\n<h3 id=\"一-函数签名\"><a href=\"#一-函数签名\" class=\"headerlink\" title=\"(一) 函数签名\"></a>(一) 函数签名</h3><ol>\n<li><mark><strong>调用签名</strong></mark></li>\n</ol>\n<p>函数也是一种对象，可以有自己的属性。但是使用函数类型表达式的时候无法同时声明函数的属性。<strong>调用签名描述了一种函数类型，包含了函数的属性、调用函数时应传递的参数以及返回值</strong>。使用调用签名可以很方便地解决函数类型表达式的不足。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明调用签名，调用签名是一种类型，其名字可以任意取</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">CallSignatureFn</span> = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的属性</span></span><br><span class=\"line\">  <span class=\"attr\">grade</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 函数的形参和返回值</span></span><br><span class=\"line\">  (<span class=\"attr\">arg1</span>: <span class=\"built_in\">number</span>, <span class=\"attr\">arg2</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">logInfo</span>(<span class=\"params\">fn: CallSignatureFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(fn.<span class=\"property\">grade</span> + <span class=\"string\">&quot; returned &quot;</span> + <span class=\"title function_\">fn</span>(<span class=\"number\">6</span>, <span class=\"string\">&quot;A&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>调用签名 vs 函数类型表达式：</strong></p>\n<ul>\n<li>函数类型表达式十分简洁</li>\n<li>调用签名可以声明函数的属性</li>\n<li>调用前面在 参数列表 和 返回值 之间使用冒号 “<code>:</code>“ ，而函数类型表达式使用箭头 “<code>=&gt;</code>“</li>\n</ul>\n<ol>\n<li><mark><strong>构造签名</strong></mark></li>\n</ol>\n<p>函数除了可以被直接调用之外，还可以使用 <strong><code>new</code></strong> 操作符来调用。构造签名描述了函数在使用 <code>new</code> 操作符调用时的传参和返回值。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ConstructSignatureFn</span> = &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (<span class=\"attr\">_type</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">_num</span>: <span class=\"built_in\">number</span>): <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\">ctor: ConstructSignatureFn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title function_\">ctor</span>(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><mark><strong>混合签名</strong></mark></li>\n</ol>\n<p>对于有些比较特殊的函数比如<code>Date</code>，直接调用和使用<code>new</code>操作符调用得到的结果是一样的，这种函数类型可以使用混合签名，将调用签名和构造签名写在一个类型对象里。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">CallOrConstruct</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">new</span> (<span class=\"attr\">s</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">Date</span>;</span><br><span class=\"line\">  (n?: <span class=\"built_in\">number</span>): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li><mark><strong>重载签名</strong></mark> 和 <mark><strong>实现签名</strong></mark></li>\n</ol>\n<p>将在<strong>函数重载</strong>章节介绍。</p>\n<h3 id=\"二-泛型函数\"><a href=\"#二-泛型函数\" class=\"headerlink\" title=\"(二) 泛型函数\"></a>(二) 泛型函数</h3><ol>\n<li><strong>基础</strong></li>\n</ol>\n<p>此前，我们在声明函数时，会直接给 <strong>形参</strong> 和 <strong>返回值</strong> 添加类型注释，在调用时传入相应类型的值。以这样的形式声明的函数，其传参和返回值的类型都是固定的。那有没有什么方式，能让我们调用函数时传参的类型能灵活多样呢？<strong>泛型函数</strong>正是我们想要的。</p>\n<p><mark><strong>泛型函数</strong></mark>：高度抽象化的类型。在声明函数时将类型抽象化( 可以是多个类型 )：在函数名后面加上尖括号，里面为抽象化的类型名 (例如：<strong><code>&lt;T, K, U, ... &gt;</code>，其中 <code>T, K, U</code>是<mark>类型参数</mark>，各代表一种类型，至于具体是什么类型，在调用函数时由传入的类型决定。</strong>)，在调用函数时再具体化，传入实际的类型，一旦传入类型，所有出现该泛型的地方，都会替换为这个传入的类型。如果没有传入明确的类型，则<code>TS</code>会进行类型推论，自动判断<code>Type</code>的类型。(<code>T，K，U</code>等可以用任何你喜欢的词来替代，不过用这些字母会显得比较简洁。)</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &lt;Type&gt;为泛型，Tpye任意代表一种类型，</span></span><br><span class=\"line\"><span class=\"comment\">// 在调用函数时，需要传入实际的类型，一旦传入类型，所有出现Type的地方都会替换</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> firstElement&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arr</span>: <span class=\"title class_\">Type</span>[]): <span class=\"title class_\">Type</span> | <span class=\"literal\">undefined</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用函数时可以传入任意实际类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 类型推论判断Type为string</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> s = <span class=\"title function_\">firstElement</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 类型推论判断Type为number</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> n = <span class=\"title function_\">firstElement</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 类型推论判断Type为undefined类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> u = <span class=\"title function_\">firstElement</span>([]);</span><br></pre></td></tr></table></figure>\n<p>泛型的概念将类型进行了抽象化，使得函数可以在调用时传入需要的类型，从而增加了函数的通用性。泛型的名字 Type 可以随意取，注意相同的泛型代表着同一种类型。</p>\n<ol>\n<li><strong>泛型约束</strong></li>\n</ol>\n<p>我们知道，泛型可以定义多个，例如<code>&lt;Type1, Type2, ...&gt;</code>，每个泛型都代表着一种类型，它们可以相同，也可以不同，具体分别是什么类型，都由该函数调用时传入的类型来决定。然而，到目前为止，我们定义的泛型都是和其它类型无关的。很多时候，我们会希望给泛型做一定的约束，让它只能是某些类型之中的一种。这时候，可以使用<strong><code>extends</code></strong>关键字，来实现泛型约束。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 泛型T继承了Person类型，因此T必须有name和age属性</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> getInfo&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Person</span>&gt;(<span class=\"attr\">user</span>: T): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> user.<span class=\"property\">name</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> user1 = &#123; <span class=\"attr\">age</span>: <span class=\"number\">16</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> user2 = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;cc&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">18</span>, <span class=\"attr\">gender</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"comment\">// 报错，user1中没有name属性，不符合类型要求</span></span><br><span class=\"line\"><span class=\"title function_\">getInfo</span>(user1);</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"title function_\">getInfo</span>(user2);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>指定类型参数</strong></li>\n</ol>\n<p>在前面的例子中，我们都没有手动传入类型，来指定泛型的实际类型，而是由<code>TS</code>自动进行类型推论得出的。有一说一，<code>TS</code>确实够机智。不过有些时候，由于泛型太抽象，仅仅靠<code>TS</code>的类型推论，可能无法得出正确的结果。这时候，我们可以在调用函数时手动传入类型，来指定类型参数。毕竟<strong>我们永远比<code>TS</code>知道的更多</strong>。下面来看一个官方的示例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> combine&lt;<span class=\"title class_\">Type</span>&gt;(<span class=\"attr\">arr1</span>: <span class=\"title class_\">Type</span>[], <span class=\"attr\">arr2</span>: <span class=\"title class_\">Type</span>[]): <span class=\"title class_\">Type</span>[] &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> arr1.<span class=\"title function_\">concat</span>(arr2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 会报错，TS根据第一个参数数组[1,2,3]，将Type推论为number，</span></span><br><span class=\"line\"><span class=\"comment\">// 于是第二个字符串数组就无法通过类型校验, 因为Type[]此时应为number[]</span></span><br><span class=\"line\"><span class=\"title function_\">combine</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<p>这种情况下，便需要指定参数类型：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr = combine&lt;<span class=\"built_in\">string</span> | <span class=\"built_in\">number</span>&gt;([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], [<span class=\"string\">&quot;hello&quot;</span>]);</span><br></pre></td></tr></table></figure>\n<ol>\n<li><strong>三个小细节写好泛型函数</strong></li>\n</ol>\n<ul>\n<li>尽可能少地使用泛型约束，让 TS 进行类型推论</li>\n<li>尽可能少地使用类型参数</li>\n<li>不要将没有重复使用的类型作为类型参数</li>\n</ul>\n<h3 id=\"三-函数重载\"><a href=\"#三-函数重载\" class=\"headerlink\" title=\"(三) 函数重载\"></a>(三) 函数重载</h3><ol>\n<li><strong>函数的可选参数</strong></li>\n</ol>\n<p>在前面的类型缩减章节中，我们知道，函数可以有可选参数，调用函数时，如果没有给可选参数传值，那么该参数的值便是<code>undefined</code>, 这容易引发意想不到的错误。在函数中，我们可以通过<strong>真值校验</strong>来解决，也可以<strong>给参数一个默认值</strong>来解决 (同<code>JS</code>)。但是，如果一个函数的参数中有回调函数，且该<strong>回调函数也有可选参数，则尤其容易引发错误</strong>。偷个懒，继续搬运官方的栗子：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">myForEach</span>(<span class=\"params\">arr: <span class=\"built_in\">any</span>[], callback: (arg: <span class=\"built_in\">any</span>, index?: <span class=\"built_in\">number</span>) =&gt; <span class=\"built_in\">void</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; arr.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果调用callback时没有传入index参数，则index为undefined</span></span><br><span class=\"line\">    <span class=\"title function_\">callback</span>(arr[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">myForEach</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>], <span class=\"function\">(<span class=\"params\">a, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 即此处的i为undefined，undefined上没有toFixed方法，便会报错</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i.<span class=\"title function_\">toFixed</span>());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>可见，使用可选参数不仅处理起来会有些麻烦，而且容易引发错误。因此，函数当有有限个不定数量或不同类型的参数时，更好的方案是<strong>函数重载</strong>。</p>\n<ol>\n<li><mark><strong>函数重载</strong></mark></li>\n</ol>\n<p>规定函数的形参与返回值的是<mark><strong>重载签名</strong></mark>，可以有多个重载签名；</p>\n<p>兼容多个重载签名并进行逻辑处理的是<mark><strong>实现签名</strong></mark>，由于要兼容多套重载签名，因此会出现可选参数；</p>\n<p>我们可以通过编写多套<strong>重载签名</strong>，来规定函数的不同调用方式 (传入不同数量或不同类型的参数以及不同类型的返回值)。然后通过<strong>实现签名</strong>来进行兼容的逻辑处理。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义两套重载签名</span></span><br><span class=\"line\"><span class=\"comment\">// 允许调用函数时只传入name参数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>): <span class=\"built_in\">boolean</span>;</span><br><span class=\"line\"><span class=\"comment\">// 允许调用函数时传入name, age, gender三个参数</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age: <span class=\"built_in\">number</span>, gender: <span class=\"number\">1</span> | <span class=\"number\">2</span></span>): <span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"comment\">// 实现签名，统一处理逻辑</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">setUserInfo</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, age?: <span class=\"built_in\">number</span>, gender?: <span class=\"number\">1</span> | <span class=\"number\">2</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 真值校验，由于两套重载签名规定，调用函数时要么传入三个参数</span></span><br><span class=\"line\">  <span class=\"comment\">// 因此，传入了age，则必定也传入了gender</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (age) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`我叫 <span class=\"subst\">$&#123;name&#125;</span>, 今年 <span class=\"subst\">$&#123;age&#125;</span> 岁啦！`</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 传入一个参数，正确</span></span><br><span class=\"line\"><span class=\"title function_\">setUserInfo</span>(<span class=\"string\">&quot;cc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 传入三个参数，正确</span></span><br><span class=\"line\"><span class=\"title function_\">setUserInfo</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 传入两个参数，报错，因为没有定义两个参数的重载签名</span></span><br><span class=\"line\"><span class=\"title function_\">setUserInfo</span>(<span class=\"string\">&quot;cc&quot;</span>, <span class=\"number\">18</span>);</span><br></pre></td></tr></table></figure>\n<p>可以看到，实现签名 和 我们之前普通地使用可选参数的处理很相似，区别也很明显：尽管<code>age</code>和<code>gender</code>都是可选参数，但是通过重载签名，规定了<code>age</code>和<code>gender</code>必须同时传入或同时都不传，即规定了该函数的调用只能传入一个或三个参数。如果不进行函数重载，那么将多出一种只传入<code>name</code>和<code>age</code>这两个参数的情况要进行处理。可见，通过函数重载来规定函数不同的调用方式，可以使逻辑与结构更加清晰优雅。当我们进行函数重载时，一定要<strong>注意让实现签名兼容所有的重载签名(参数和返回值都要兼容处理)</strong>。</p>\n<h3 id=\"四-在函数中声明-this\"><a href=\"#四-在函数中声明-this\" class=\"headerlink\" title=\"(四) 在函数中声明 this\"></a>(四) 在函数中声明 this</h3><p>一般而言，<code>TS</code>会如同<code>JS</code>一样，自动推断 this 的指向。<code>JS</code>中不允许<code>this</code>作为参数，不过<code>TS</code>允许我们在函数中声明<code>this</code>的类型，这种情况尤其在函数的回调参数<code>callback</code>中较为常见。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// filterUser个方法，其后是其调用签名</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Data</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">filterUsers</span>(<span class=\"attr\">filter</span>: <span class=\"function\">(<span class=\"params\"><span class=\"variable language_\">this</span>: User</span>) =&gt;</span> <span class=\"built_in\">boolean</span>): <span class=\"title class_\">User</span>[];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>起初这个官方的示例我看了好几分钟没看懂，后来发现它的<code>filterUsers</code>就是一个函数的调用签名，੯ੁૂ‧̀͡u\\。这里声明了<code>this</code>是<code>User</code>类型，如果在该方法执行时，<code>callback</code>中的<code>this</code>不是<code>User</code>类型，<code>TS</code>就会提示我们代码写的有误。在函数中声明<code>this</code>时，需要注意一点是，虽然在构造签名中，<code>callback</code>使用箭头形式，但是<strong>在我们实际调用该方法时，<code>callback</code>不能使用箭头函数，只能用<code>function</code>关键字</strong>。毕竟众所周知，箭头函数没有自己作用域的<code>this</code>，它使用的的<code>this</code>同定义箭头函数时的上下文的 this。</p>\n<h3 id=\"五-其它的类型\"><a href=\"#五-其它的类型\" class=\"headerlink\" title=\"(五) 其它的类型\"></a>(五) 其它的类型</h3><ul>\n<li><p><strong><code>void</code></strong></p>\n<p>函数的返回值设置为<code>void</code>，则返回空值。<strong><code>void</code>不等同于<code>undefined</code></strong>。</p>\n<p>返回值为<code>void</code>类型的函数，并不一定不能写<code>return</code> 语句。<strong>如果是通过函数表达式、函数签名等定义的函数类型，该类型的实例函数体中可以有<code>return</code>语句，并且后面可以接任意类型的值，只不过它的返回值会被忽略</strong>。如果我们把这样的函数调用结果赋值给某个变量，则该变量的类型依然是<code>void</code>。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> voidFunc = <span class=\"function\">() =&gt;</span> <span class=\"built_in\">void</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"attr\">f1</span>: voidFunc = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 可以return任意类型的值，但是会被忽略</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// v1 的类型依然是void</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> v1 = <span class=\"title function_\">f1</span>();</span><br></pre></td></tr></table></figure>\n<p>但是，<strong>如果是通过字面量声明函数的返回值为<code>void</code>，则函数体内不能有<code>return</code>语句</strong>。虽然官方文档里这么说，下面的栗子也摘自官方文档，但是我的<code>vs code</code>编辑器里这样写并没有报错 ？。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">f2</span>(<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> f3 = <span class=\"keyword\">function</span> (<span class=\"params\"></span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// @ts-expect-error</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong><code>object</code></strong></p>\n<p>是小写的<code>object</code>，而不是大写的<code>Object</code>。这两者意义不同。</p>\n</li>\n<li><p><strong><code>unknown</code></strong></p>\n</li>\n<li><p><strong><code>never</code></strong></p>\n<p>有的函数永远没有返回值，例如在函数体内 <code>return</code> 之前抛出错误。<code>never</code>类型也常用来做穷举校验。</p>\n</li>\n<li><p><strong><code>Funtion</code></strong></p>\n<p>这些类型基本都在[# <code>Typescript</code>系列：基础篇(一)]<a href=\"https://juejin.cn/post/7069940384515751973\">2022年了，了解一下 typescript系列：基础篇(一)？ - 掘金</a>介绍过了，此处不再赘述。</p>\n</li>\n</ul>\n<h3 id=\"六-剩余参数\"><a href=\"#六-剩余参数\" class=\"headerlink\" title=\"(六) 剩余参数\"></a>(六) 剩余参数</h3><ul>\n<li>我才发现，原来<strong><code>parameters</code>表示形参</strong>，<strong><code>arguments</code>表示实参</strong>。</li>\n<li><strong>剩余形参</strong></li>\n</ul>\n<p>剩余形参的使用基本同<code>JS</code>一致，偷个懒直接拿官方栗子：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 倍乘函数，第一个参数为倍数，会返回后续所有参数各自乘以倍数而形成的数组</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">multiply</span>(<span class=\"params\">n: <span class=\"built_in\">number</span>, ...m: <span class=\"built_in\">number</span>[]</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> m.<span class=\"title function_\">map</span>(<span class=\"function\">(<span class=\"params\">x</span>) =&gt;</span> n * x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// a 的值</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"title function_\">multiply</span>(<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>剩余实参</strong></li>\n</ul>\n<p>剩余实参常用于函数调用时对传递的参数 (数组、对象等) 进行展开，然而这里容易踩坑。以数组为例：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> arr1 = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> arr2 = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\">arr1.<span class=\"title function_\">push</span>(...arr2);</span><br></pre></td></tr></table></figure>\n<p>数组的<code>push</code>可以接收无限制个参数，因此可以直接展开参数<code>arr2</code>。但是有的方法只能接收指定数量的参数，而在一般情况下，<code>TS</code>认为数组的是可变的。如果直接对这类方法的进行数组参数的展开，会引起报错，因为<code>TS</code>会认为数组里的成员数量可能是<code>0</code>个或者多个，不符合该方法只接受指定数量的参数的要求。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 虽然数组现在只有两个成员，但是它的类型被推断为 number[]，</span></span><br><span class=\"line\"><span class=\"comment\">// 即args数组可能会发生变化，可能有0个或多个参数</span></span><br><span class=\"line\"><span class=\"comment\">// 而Math.atan2方法只接收两个参数，因此会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">8</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> angle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(...args);s);</span><br></pre></td></tr></table></figure>\n<p>解决的办法也很简单，使用 <strong><code>as const</code></strong>将数组的类型断言为不可变类型。此时的数组便被推论为元组类型。有关元组类型的内容，会在下一篇 <strong>对象类型篇</strong>中介绍。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 此时args长度不可变，被推论为元组类型</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> args = [<span class=\"number\">8</span>, <span class=\"number\">5</span>] <span class=\"keyword\">as</span> <span class=\"keyword\">const</span>;</span><br><span class=\"line\"><span class=\"comment\">// ok</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> angle = <span class=\"title class_\">Math</span>.<span class=\"title function_\">atan2</span>(...args);</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>形参结构</strong></li>\n</ul>\n<p>没啥好说的，直接上官方示例。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NumberABC</span> = &#123; <span class=\"attr\">a</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">b</span>: <span class=\"built_in\">number</span>; <span class=\"attr\">c</span>: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">sum</span>(<span class=\"params\">&#123; a, b, c &#125;: NumberABC</span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a + b + c);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Typescript系列 基础篇 (六) 模块化入门篇","date":"2022-03-05T06:22:00.000Z","updated":"2022-03-05T06:22:00.000Z","keywords":["前端","TypeScript","TS","类型"],"archive":"TypeScript","swiper_index":55,"_content":"\n# Typescript 系列 基础篇 (六) 模块化入门篇\n\n`TS`模块化是建立在`JS`模块化的基础上，与`JS`中的写法有许多的不同之处。`TS`极大地支持了主流的`ESM`和`CommomJs`，也对其他的模块化方案有所兼容。\n\n## 一、`ES` 模块化语法\n\n### 1. _`export`_ 导出\n\n`TS`支持`ES`模块化方案，写法和`JS`中一致。\n\n```typescript\n// ModuleA.ts\nexport var a = 1;\nexport const b = function () {\n  // ...\n};\nexport let c = () => {\n  // ...\n};\n// 设置默认导出项，仅TS中可导出interface、type等\nexport default interface Person {\n  name: string;\n  age: number;\n}\n```\n\n### 2. _`import`_ 导入\n\n- 使用`import`加载其它模块，和`JS`中一致，可以使用 **`as`** 重命名。\n\n```typescript\n// main.ts\nimport { a, b, c as RenamedC } from \"./ModuleA\";\nimport Person from \"./ModuleA\";\n```\n\n- 可以混合导入，但是默认项必须写在前面。\n\n```typescript\n// main.ts\nimport Person, { a, b, c as RenamedC } from \"./ModuleA\";\n```\n\n- 可以使用 **`import *`** 来导入所有内容，并用 **`as`** 重命名。\n\n```typescript\n// main.ts\nimport * as M from \"./ModuleA\";\n```\n\n- 可以使用 `import + 文件名` 来导入一个文件，这种情况下，被导入的文件中的代码会被执行，可能会对当前作用域中的变量产生影响。\n\n```typescript\n// main.ts\nimport \"./ModuleA\";\n```\n\n- `TS`特有的语法\n\n  - `JS`中没有`interface`、`type`等概念，没有相应的关键字。因此，`interface`和`type`语句是`TS`特有的导出语法。\n\n    ```typescript\n    // ModuleB.ts\n    export type Cat = { breed: string; yearOfBirth: number };\n\n    export interface Dog {\n      breeds: string[];\n      yearOfBirth: number;\n    }\n\n    export const c = 1;\n    ```\n\n    导入时正常导入就行了。\n\n  - **_`import type`_** 语法\n\n    该语法只能用来导入类型。\n\n    ```typescript\n    // 不能导入变量c\n    import type { Cat, Dog } from \"./ModuleB\";\n    ```\n\n  - `inline type imports`\n\n    `TS 4.5` 版本允许混合导入类型和变量。**把 `type` 关键字写在导入的类型前面**，不写`type`的则为变量。\n\n    ```typescript\n    // 不能导入变量c\n    import { type Cat, type Dog, c } from \"./ModuleB\";\n    ```\n\n- 具有 `CommonJs` 表现的 `ES` 语法\n\n  使用 **`export = { // ... }`** 来导出的模块，既可以用`CommonJs`语法导入，也可以用`ESM`的兼容语法 `import a = require('./xxx')` 语法导入。\n\n  ```typescript\n  // ModuleX.ts\n  export = {\n    name: \"x\",\n  };\n\n  // app.ts\n  const a = require(\"./ModuleX\"); // 不推荐\n  import b = require(\"./ModuleX\"); // 推荐写法\n  ```\n\n## 二、`CommonJs` 模块化语法\n\n**通过 全局变量 `module` 上的 `exports` 属性来设置导出的内容**。\n\n```typescript\n// MathModule.ts\nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n};\n```\n\n对应的，使用 **`require`** 来导入。\n\n```typescript\n// main.ts\nconst math = require(\"./MathModule\");\n// 或者也可以解构\nconst { pi, squareTwo } = require(\"./MathModule\");\n```\n\n`TS`系列基础篇就写到这儿了，累了，`TS`进阶篇再见。另外，想进一步了解`TS`模块化的知识，可以参考我的**`TS`进阶系列**：[深入理解 TS 模块](https://juejin.cn/post/7080089003113840670)。\n","source":"_posts/TypeScript 系列/基础篇/Typescript系列  基础篇 (六)   模块化入门篇.md","raw":"---\ntitle: Typescript系列 基础篇 (六) 模块化入门篇\ndate: 2022-03-05 14:22\nupdated: 2022-03-05 14:22\nkeywords:\n  - 前端\n  - TypeScript\n  - TS\n  - 类型\ntags:\n  - TypeScript\n  - 前端\narchive: TypeScript\nswiper_index: 55\n---\n\n# Typescript 系列 基础篇 (六) 模块化入门篇\n\n`TS`模块化是建立在`JS`模块化的基础上，与`JS`中的写法有许多的不同之处。`TS`极大地支持了主流的`ESM`和`CommomJs`，也对其他的模块化方案有所兼容。\n\n## 一、`ES` 模块化语法\n\n### 1. _`export`_ 导出\n\n`TS`支持`ES`模块化方案，写法和`JS`中一致。\n\n```typescript\n// ModuleA.ts\nexport var a = 1;\nexport const b = function () {\n  // ...\n};\nexport let c = () => {\n  // ...\n};\n// 设置默认导出项，仅TS中可导出interface、type等\nexport default interface Person {\n  name: string;\n  age: number;\n}\n```\n\n### 2. _`import`_ 导入\n\n- 使用`import`加载其它模块，和`JS`中一致，可以使用 **`as`** 重命名。\n\n```typescript\n// main.ts\nimport { a, b, c as RenamedC } from \"./ModuleA\";\nimport Person from \"./ModuleA\";\n```\n\n- 可以混合导入，但是默认项必须写在前面。\n\n```typescript\n// main.ts\nimport Person, { a, b, c as RenamedC } from \"./ModuleA\";\n```\n\n- 可以使用 **`import *`** 来导入所有内容，并用 **`as`** 重命名。\n\n```typescript\n// main.ts\nimport * as M from \"./ModuleA\";\n```\n\n- 可以使用 `import + 文件名` 来导入一个文件，这种情况下，被导入的文件中的代码会被执行，可能会对当前作用域中的变量产生影响。\n\n```typescript\n// main.ts\nimport \"./ModuleA\";\n```\n\n- `TS`特有的语法\n\n  - `JS`中没有`interface`、`type`等概念，没有相应的关键字。因此，`interface`和`type`语句是`TS`特有的导出语法。\n\n    ```typescript\n    // ModuleB.ts\n    export type Cat = { breed: string; yearOfBirth: number };\n\n    export interface Dog {\n      breeds: string[];\n      yearOfBirth: number;\n    }\n\n    export const c = 1;\n    ```\n\n    导入时正常导入就行了。\n\n  - **_`import type`_** 语法\n\n    该语法只能用来导入类型。\n\n    ```typescript\n    // 不能导入变量c\n    import type { Cat, Dog } from \"./ModuleB\";\n    ```\n\n  - `inline type imports`\n\n    `TS 4.5` 版本允许混合导入类型和变量。**把 `type` 关键字写在导入的类型前面**，不写`type`的则为变量。\n\n    ```typescript\n    // 不能导入变量c\n    import { type Cat, type Dog, c } from \"./ModuleB\";\n    ```\n\n- 具有 `CommonJs` 表现的 `ES` 语法\n\n  使用 **`export = { // ... }`** 来导出的模块，既可以用`CommonJs`语法导入，也可以用`ESM`的兼容语法 `import a = require('./xxx')` 语法导入。\n\n  ```typescript\n  // ModuleX.ts\n  export = {\n    name: \"x\",\n  };\n\n  // app.ts\n  const a = require(\"./ModuleX\"); // 不推荐\n  import b = require(\"./ModuleX\"); // 推荐写法\n  ```\n\n## 二、`CommonJs` 模块化语法\n\n**通过 全局变量 `module` 上的 `exports` 属性来设置导出的内容**。\n\n```typescript\n// MathModule.ts\nmodule.exports = {\n  pi: 3.14,\n  squareTwo: 1.41,\n  phi: 1.61,\n};\n```\n\n对应的，使用 **`require`** 来导入。\n\n```typescript\n// main.ts\nconst math = require(\"./MathModule\");\n// 或者也可以解构\nconst { pi, squareTwo } = require(\"./MathModule\");\n```\n\n`TS`系列基础篇就写到这儿了，累了，`TS`进阶篇再见。另外，想进一步了解`TS`模块化的知识，可以参考我的**`TS`进阶系列**：[深入理解 TS 模块](https://juejin.cn/post/7080089003113840670)。\n","slug":"TypeScript-系列-基础篇-Typescript系列-基础篇-六-模块化入门篇","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"cla5g9ypk0011wgoifmnigtln","content":"<h1 id=\"Typescript-系列-基础篇-六-模块化入门篇\"><a href=\"#Typescript-系列-基础篇-六-模块化入门篇\" class=\"headerlink\" title=\"Typescript 系列 基础篇 (六) 模块化入门篇\"></a>Typescript 系列 基础篇 (六) 模块化入门篇</h1><p><code>TS</code>模块化是建立在<code>JS</code>模块化的基础上，与<code>JS</code>中的写法有许多的不同之处。<code>TS</code>极大地支持了主流的<code>ESM</code>和<code>CommomJs</code>，也对其他的模块化方案有所兼容。</p>\n<h2 id=\"一、ES-模块化语法\"><a href=\"#一、ES-模块化语法\" class=\"headerlink\" title=\"一、ES 模块化语法\"></a>一、<code>ES</code> 模块化语法</h2><h3 id=\"1-export-导出\"><a href=\"#1-export-导出\" class=\"headerlink\" title=\"1. export 导出\"></a>1. <em><code>export</code></em> 导出</h3><p><code>TS</code>支持<code>ES</code>模块化方案，写法和<code>JS</code>中一致。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ModuleA.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> b = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> <span class=\"title function_\">c</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置默认导出项，仅TS中可导出interface、type等</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-import-导入\"><a href=\"#2-import-导入\" class=\"headerlink\" title=\"2. import 导入\"></a>2. <em><code>import</code></em> 导入</h3><ul>\n<li>使用<code>import</code>加载其它模块，和<code>JS</code>中一致，可以使用 <strong><code>as</code></strong> 重命名。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a, b, c <span class=\"keyword\">as</span> <span class=\"title class_\">RenamedC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以混合导入，但是默认项必须写在前面。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Person</span>, &#123; a, b, c <span class=\"keyword\">as</span> <span class=\"title class_\">RenamedC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以使用 <strong><code>import *</code></strong> 来导入所有内容，并用 <strong><code>as</code></strong> 重命名。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> M <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以使用 <code>import + 文件名</code> 来导入一个文件，这种情况下，被导入的文件中的代码会被执行，可能会对当前作用域中的变量产生影响。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>TS</code>特有的语法</p>\n<ul>\n<li><p><code>JS</code>中没有<code>interface</code>、<code>type</code>等概念，没有相应的关键字。因此，<code>interface</code>和<code>type</code>语句是<code>TS</code>特有的导出语法。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ModuleB.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Cat</span> = &#123; <span class=\"attr\">breed</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">yearOfBirth</span>: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">breeds</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">  <span class=\"attr\">yearOfBirth</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>导入时正常导入就行了。</p>\n</li>\n<li><p><strong><em><code>import type</code></em></strong> 语法</p>\n<p>该语法只能用来导入类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不能导入变量c</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">Cat</span>, <span class=\"title class_\">Dog</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleB&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>inline type imports</code></p>\n<p><code>TS 4.5</code> 版本允许混合导入类型和变量。<strong>把 <code>type</code> 关键字写在导入的类型前面</strong>，不写<code>type</code>的则为变量。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不能导入变量c</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">type</span> <span class=\"title class_\">Cat</span>, <span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span>, c &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleB&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>具有 <code>CommonJs</code> 表现的 <code>ES</code> 语法</p>\n<p>使用 <strong><code>export = &#123; // ... &#125;</code></strong> 来导出的模块，既可以用<code>CommonJs</code>语法导入，也可以用<code>ESM</code>的兼容语法 <code>import a = require(&#39;./xxx&#39;)</code> 语法导入。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ModuleX.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;x&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./ModuleX&quot;</span>); <span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./ModuleX&quot;</span>); <span class=\"comment\">// 推荐写法</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"二、CommonJs-模块化语法\"><a href=\"#二、CommonJs-模块化语法\" class=\"headerlink\" title=\"二、CommonJs 模块化语法\"></a>二、<code>CommonJs</code> 模块化语法</h2><p><strong>通过 全局变量 <code>module</code> 上的 <code>exports</code> 属性来设置导出的内容</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MathModule.ts</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">pi</span>: <span class=\"number\">3.14</span>,</span><br><span class=\"line\">  <span class=\"attr\">squareTwo</span>: <span class=\"number\">1.41</span>,</span><br><span class=\"line\">  <span class=\"attr\">phi</span>: <span class=\"number\">1.61</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对应的，使用 <strong><code>require</code></strong> 来导入。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./MathModule&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者也可以解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; pi, squareTwo &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./MathModule&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><code>TS</code>系列基础篇就写到这儿了，累了，<code>TS</code>进阶篇再见。另外，想进一步了解<code>TS</code>模块化的知识，可以参考我的<strong><code>TS</code>进阶系列</strong>：<a href=\"https://juejin.cn/post/7080089003113840670\">深入理解 TS 模块</a>。</p>\n","site":{"data":{"clustrmaps":{"bottom":[{"class_name":"user-map","id_name":"user-map","name":"訪客地圖","icon":"fas fa-heartbeat","order":1,"html":"<script type=\"text/javascript\" id=\"clstr_globe\" src=\"//clustrmaps.com/globe.js?d=5V2tOKp8qAdRM-i8eu7ETTO9ugt5uKbbG-U7Yj8uMl8\"></script>"}]},"link":[{"class_name":"1.技术支持","class_desc":"本站基于Hexo框架搭建","link_list":[{"name":"Hexo","link":"https://hexo.io.zh-cn/","avatar":"https://d33wubrfki0168.cloudfront.net/6657ba50e702d84afb32fe846bed54fbala77add/827ae/logo.svg"}]},{"class_name":"2.友情链接","class_desc":"With friends ~","link_list":[{"name":"Fomalhaut","link":"https://fomal.cc","avatar":"/assets/head.jpg","siteshot":"https://source.fomal.cc/siteshot/wwww.fomal.cc.jpg"}]}]}},"cover":"https://blog.onlyy.vip/img/Wendy.png","excerpt":"","more":"<h1 id=\"Typescript-系列-基础篇-六-模块化入门篇\"><a href=\"#Typescript-系列-基础篇-六-模块化入门篇\" class=\"headerlink\" title=\"Typescript 系列 基础篇 (六) 模块化入门篇\"></a>Typescript 系列 基础篇 (六) 模块化入门篇</h1><p><code>TS</code>模块化是建立在<code>JS</code>模块化的基础上，与<code>JS</code>中的写法有许多的不同之处。<code>TS</code>极大地支持了主流的<code>ESM</code>和<code>CommomJs</code>，也对其他的模块化方案有所兼容。</p>\n<h2 id=\"一、ES-模块化语法\"><a href=\"#一、ES-模块化语法\" class=\"headerlink\" title=\"一、ES 模块化语法\"></a>一、<code>ES</code> 模块化语法</h2><h3 id=\"1-export-导出\"><a href=\"#1-export-导出\" class=\"headerlink\" title=\"1. export 导出\"></a>1. <em><code>export</code></em> 导出</h3><p><code>TS</code>支持<code>ES</code>模块化方案，写法和<code>JS</code>中一致。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ModuleA.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> b = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">let</span> <span class=\"title function_\">c</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 设置默认导出项，仅TS中可导出interface、type等</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-import-导入\"><a href=\"#2-import-导入\" class=\"headerlink\" title=\"2. import 导入\"></a>2. <em><code>import</code></em> 导入</h3><ul>\n<li>使用<code>import</code>加载其它模块，和<code>JS</code>中一致，可以使用 <strong><code>as</code></strong> 重命名。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; a, b, c <span class=\"keyword\">as</span> <span class=\"title class_\">RenamedC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Person</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以混合导入，但是默认项必须写在前面。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Person</span>, &#123; a, b, c <span class=\"keyword\">as</span> <span class=\"title class_\">RenamedC</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以使用 <strong><code>import *</code></strong> 来导入所有内容，并用 <strong><code>as</code></strong> 重命名。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> M <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>可以使用 <code>import + 文件名</code> 来导入一个文件，这种情况下，被导入的文件中的代码会被执行，可能会对当前作用域中的变量产生影响。</li>\n</ul>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./ModuleA&quot;</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>TS</code>特有的语法</p>\n<ul>\n<li><p><code>JS</code>中没有<code>interface</code>、<code>type</code>等概念，没有相应的关键字。因此，<code>interface</code>和<code>type</code>语句是<code>TS</code>特有的导出语法。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ModuleB.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">type</span> <span class=\"title class_\">Cat</span> = &#123; <span class=\"attr\">breed</span>: <span class=\"built_in\">string</span>; <span class=\"attr\">yearOfBirth</span>: <span class=\"built_in\">number</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">breeds</span>: <span class=\"built_in\">string</span>[];</span><br><span class=\"line\">  <span class=\"attr\">yearOfBirth</span>: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> c = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n<p>导入时正常导入就行了。</p>\n</li>\n<li><p><strong><em><code>import type</code></em></strong> 语法</p>\n<p>该语法只能用来导入类型。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不能导入变量c</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"keyword\">type</span> &#123; <span class=\"title class_\">Cat</span>, <span class=\"title class_\">Dog</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleB&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>inline type imports</code></p>\n<p><code>TS 4.5</code> 版本允许混合导入类型和变量。<strong>把 <code>type</code> 关键字写在导入的类型前面</strong>，不写<code>type</code>的则为变量。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 不能导入变量c</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">type</span> <span class=\"title class_\">Cat</span>, <span class=\"keyword\">type</span> <span class=\"title class_\">Dog</span>, c &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./ModuleB&quot;</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>具有 <code>CommonJs</code> 表现的 <code>ES</code> 语法</p>\n<p>使用 <strong><code>export = &#123; // ... &#125;</code></strong> 来导出的模块，既可以用<code>CommonJs</code>语法导入，也可以用<code>ESM</code>的兼容语法 <code>import a = require(&#39;./xxx&#39;)</code> 语法导入。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ModuleX.ts</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;x&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./ModuleX&quot;</span>); <span class=\"comment\">// 不推荐</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> b = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./ModuleX&quot;</span>); <span class=\"comment\">// 推荐写法</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"二、CommonJs-模块化语法\"><a href=\"#二、CommonJs-模块化语法\" class=\"headerlink\" title=\"二、CommonJs 模块化语法\"></a>二、<code>CommonJs</code> 模块化语法</h2><p><strong>通过 全局变量 <code>module</code> 上的 <code>exports</code> 属性来设置导出的内容</strong>。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MathModule.ts</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">  <span class=\"attr\">pi</span>: <span class=\"number\">3.14</span>,</span><br><span class=\"line\">  <span class=\"attr\">squareTwo</span>: <span class=\"number\">1.41</span>,</span><br><span class=\"line\">  <span class=\"attr\">phi</span>: <span class=\"number\">1.61</span>,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>对应的，使用 <strong><code>require</code></strong> 来导入。</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.ts</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./MathModule&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 或者也可以解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; pi, squareTwo &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;./MathModule&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><code>TS</code>系列基础篇就写到这儿了，累了，<code>TS</code>进阶篇再见。另外，想进一步了解<code>TS</code>模块化的知识，可以参考我的<strong><code>TS</code>进阶系列</strong>：<a href=\"https://juejin.cn/post/7080089003113840670\">深入理解 TS 模块</a>。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cla5g9yog0001wgoi38t3geqd","tag_id":"cla5g9yom0004wgoigmp0fbzm","_id":"cla5g9yov000ewgoiber414nr"},{"post_id":"cla5g9yog0001wgoi38t3geqd","tag_id":"cla5g9yos0009wgoi35772nkt","_id":"cla5g9yow000gwgoi95d2ehzn"},{"post_id":"cla5g9yol0003wgoia6xl8e21","tag_id":"cla5g9yom0004wgoigmp0fbzm","_id":"cla5g9yp1000mwgoi4osr916t"},{"post_id":"cla5g9yol0003wgoia6xl8e21","tag_id":"cla5g9yos0009wgoi35772nkt","_id":"cla5g9yp2000owgoi9020fhvu"},{"post_id":"cla5g9yop0006wgoi292dei8b","tag_id":"cla5g9yom0004wgoigmp0fbzm","_id":"cla5g9ypa000twgoie1tzhk0g"},{"post_id":"cla5g9yop0006wgoi292dei8b","tag_id":"cla5g9yos0009wgoi35772nkt","_id":"cla5g9ypb000vwgoi34c533yu"},{"post_id":"cla5g9yph000ywgoi9n584h3l","tag_id":"cla5g9yom0004wgoigmp0fbzm","_id":"cla5g9ypk0010wgoi6dn6271i"},{"post_id":"cla5g9yph000ywgoi9n584h3l","tag_id":"cla5g9yos0009wgoi35772nkt","_id":"cla5g9ypm0012wgoie1fl7by0"},{"post_id":"cla5g9ypj000zwgoi2lzvex2p","tag_id":"cla5g9yom0004wgoigmp0fbzm","_id":"cla5g9ypm0013wgoi0c7813fl"},{"post_id":"cla5g9ypj000zwgoi2lzvex2p","tag_id":"cla5g9yos0009wgoi35772nkt","_id":"cla5g9ypm0014wgoig8pjb4ek"},{"post_id":"cla5g9ypk0011wgoifmnigtln","tag_id":"cla5g9yom0004wgoigmp0fbzm","_id":"cla5g9ypn0015wgoif5h49vf2"},{"post_id":"cla5g9ypk0011wgoifmnigtln","tag_id":"cla5g9yos0009wgoi35772nkt","_id":"cla5g9ypn0016wgoi4mjm4r64"}],"Tag":[{"name":"TypeScript","_id":"cla5g9yom0004wgoigmp0fbzm"},{"name":"前端","_id":"cla5g9yos0009wgoi35772nkt"}]}}